(include "#.scm")

(check-same-behavior ("" "##" "~~lib/gambit/prim/list#.scm")

;; R4RS

(append) (append '(1 2)) (append '(1 2) '(3 4)) (append '(1 2) '(3 4) '(5 6))
(assoc "a" '()) (assoc "a" '(("a" . 1))) (assoc "a" '(("a" . 1)) eq?)
(assq 'a '()) (assq 'a '((a . 1)))
(assv 1 '()) (assv 1 '((1 . 2)))
(caaaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caaadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caadar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caaddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
        (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cadaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cadadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cadar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caddar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cadddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(caddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
        (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(car '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
       (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdaaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdaadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdadar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdaddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
        (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cddaar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cddadr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cddar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdddar '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cddddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
          (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
         (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cddr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
        (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cdr '(((((a . b) c . d) (e . f) g . h) ((i . j) k . l) (m . n) o . p)
       (((q . r) s . t) (u . v) w . x) ((y . z) 0 . 1) (2 . 3) 4 . 5))
(cons 1 2)
(for-each list '(1 2)) (for-each list '(1) '(2)) (for-each list '(1) '(2) '(3))
(length '(1 2 3))
(list) (list 1) (list 1 2) (list 1 2 3)
(list-ref '(1 2 3) 1)
(list-tail '(1 2 3) 1)
(list? '()) (list? '(1 2 3)) (list '(1 . 2))
(map list '(1 2)) (map list '(1) '(2)) (map list '(1) '(2) '(3))
(member "a" '()) (member "a" '("a" "b")) (member "a" '("a" "b") eq?)
(memq 'a '()) (memq 'a '(a b))
(memv '1 '()) (memv '1 '(1 2))
(null? '()) (null? '(1 2))
(pair? '()) (pair? '(1 2))
(reverse '()) (reverse '(1 2 3))
(let ((x (cons 1 2))) (set-car! x 3) x)
(let ((x (cons 1 2))) (set-cdr! x 3) x)

;; R7RS

(make-list 0) (make-list 5) (make-list 5 99)
(list-copy '()) (list-copy '(1 2 3))
(list-set! (list 1 2 3) 1 99)

;; Gambit

(list-ref (circular-list 1) 10) (list-ref (circular-list 1 2) 10) (list-ref (circular-list 1 2 3) 10)
(cons* 1) (cons* 1 2) (cons* 1 2 3)
(drop '(1 2 3 4) 2)
(fold list 1 '(2 3 4 5))
(fold-right list 1 '(2 3 4 5))
(iota 10)
(last '(1 2 3 4))
(last-pair '(1 2 3 4))
(list-set '(1 2 3 4) 2 99)
(let ((x (list))) (list-sort < x)) (let ((x (list 8 3 1 2 4))) (list-sort < x))
(let ((x (list))) (list-sort! < x)) (let ((x (list 8 3 1 2 4))) (list-sort! < x))
(list-tabulate 5 list)
(let ((x (list 1 2 3 4))) (reverse! x))
(let ((x (list 1 2 3 4))) (append-reverse x 5))
(let ((x (list 1 2 3 4))) (append-reverse! x 5))
(take '(1 2 3 4) 2)
(xcons 1 2)

)
