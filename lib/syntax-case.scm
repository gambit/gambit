;;;============================================================================

;;; File: "syntax-case.scm", Time-stamp: <2013-09-17 09:08:23 feeley>

;;; Copyright (c) 1998-2008 by Marc Feeley, All Rights Reserved.

;;; This is version 3.2 .

;; This version includes a patch which avoids quoting self-evaluating
;; constants.  This makes it possible to use some Gambit specific forms
;; such as declare, namespace and define-macro.

;; This is an implementation of "syntax-case" for the Gambit-C 4.0
;; system based on the portable implementation "psyntax.ss".  At the
;; top of the file "psyntax.ss" can be found this information:
;;
;;      Portable implementation of syntax-case
;;      Extracted from Chez Scheme Version 7.3 (Feb 26, 2007)
;;      Authors: R. Kent Dybvig, Oscar Waddell, Bob Hieb, Carl Bruggeman

;; This file can be used to replace the builtin macro expander of the
;; interpreter and compiler.  Source code correlation information
;; (filename and position in file) is preserved by the expander.  The
;; expander mangles non-global variable names and this complicates
;; debugging somewhat.  Note that Gambit's normal parser processes the
;; input after expansion by the syntax-case expander.  Since the
;; syntax-case expander does not know about Gambit's syntactic
;; extensions (like DSSSL parameters) some of the syntactic
;; extensions cannot be used.  On the other hand, the syntax-case
;; expander defines some new special forms, such as "module",
;; "alias", and "eval-when".

;; You can simply load this file at the REPL with:
;;
;;   (load "syntax-case")
;;
;; For faster macro processing it is worthwhile to compile the file
;; with the compiler.  You can also rename this file to "gambcext.scm"
;; and put it in the Gambit "lib" installation directory so that it is
;; loaded every time the interpreter and compiler are started.
;;
;; Alternatively, the expander can be loaded from the command line
;; like this:
;;
;;   % gsi ~~lib/syntax-case -
;;   > (pp (lambda (x y) (if (< x y) (let ((z (* x x))) z))))
;;   (lambda (%%x0 %%y1)
;;     (if (< %%x0 %%y1) ((lambda (%%z2) %%z2) (* %%x0 %%x0)) (void)))

;;;============================================================================

(##declare
 (standard-bindings)
 (extended-bindings)
 (inlining-limit 100)
 (block)
)

(##namespace ("sc#"))

(##include "~~lib/gambit#.scm")

(##namespace (""

$make-environment
$sc-put-cte
$syntax-dispatch
bound-identifier=?
datum->syntax-object
environment?
free-identifier=?
generate-temporaries
identifier?
interaction-environment
literal-identifier=?
sc-expand
sc-compile-expand
syntax-error
syntax-object->datum
syntax->list
syntax->vector

))

(##namespace ("sc#"

interaction-environment
eval
gensym

))

;;;============================================================================

;; The following procedures are needed by the syntax-case system.

(define andmap
  (lambda (f first . rest)
    (or (null? first)
        (if (null? rest)
            (let andmap ((first first))
              (let ((x (car first)) (first (cdr first)))
                (if (null? first)
                    (f x)
                    (and (f x) (andmap first)))))
            (let andmap ((first first) (rest rest))
              (let ((x (car first))
                    (xr (map car rest))
                    (first (cdr first))
                    (rest (map cdr rest)))
                (if (null? first)
                    (apply f (cons x xr))
                    (and (apply f (cons x xr)) (andmap first rest)))))))))

(define ormap
  (lambda (proc list1)
    (and (not (null? list1))
         (or (proc (car list1)) (ormap proc (cdr list1))))))

(define eval
  (lambda (expr)
    (cond ((and (##pair? expr)
                (##equal? (##car expr) "noexpand")
                (##pair? (##cdr expr))
                (##null? (##cddr expr)))
           (##eval (##cadr expr)))
          ((and (##source? expr)
                (##pair? (##source-code expr))
                (##source? (##car (##source-code expr)))
                (##equal? (##source-code (##car (##source-code expr))) "noexpand")
                (##pair? (##cdr (##source-code expr)))
                (##null? (##cddr (##source-code expr))))
           (##eval (##cadr (##source-code expr))))
          (else
           (##raise-error-exception
            "eval expects an expression of the form (\"noexpand\" <expr>)"
            (##list expr))))))

(define gensym-count 0)

(define gensym
  (lambda id
    (let ((n gensym-count))
      (set! gensym-count (+ n 1))
      (string->symbol
       (string-append "%%"
                      (if (null? id) "" (symbol->string (car id)))
                      (number->string n))))))

(define gensym?
  (lambda (obj)
    (and (symbol? obj)
         (let ((str (symbol->string obj)))
           (and (> (string-length str) 2)
                (string=? (substring str 0 2) "%%"))))))

(define prop-table (##make-table))

(define remprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key))))

(define putprop
  (lambda (sym key val)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key val))))

(define getprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-ref prop-table sym-key #f))))

(define list*
  (lambda (arg1 . other-args)

    (define (fix lst)
      (if (null? (cdr lst))
          (car lst)
          (cons (car lst) (fix (cdr lst)))))

    (fix (cons arg1 other-args))))

(define remq
  (lambda (obj lst)
    (cond ((null? lst)
           '())
          ((eq? (car lst) obj)
           (remq obj (cdr lst)))
          (else
           (cons (car lst) (remq obj (cdr lst)))))))

;;;----------------------------------------------------------------------------

;; These initial definitions are needed because these variables are
;; mutated with a "set!" without a prior definition.

(define $sc-put-cte #f)
(define sc-expand (lambda (src) src)) ; temporary definition
(define sc-compile-expand (lambda (src) src)) ; temporary definition
(define $make-environment #f)
(define environment? #f)
(define interaction-environment #f)
(define identifier? #f)
(define syntax->list #f)
(define syntax->vector #f)
(define syntax-object->datum #f)
(define datum->syntax-object #f)
(define generate-temporaries #f)
(define free-identifier=? #f)
(define bound-identifier=? #f)
(define literal-identifier=? #f)
(define syntax-error #f)
(define $syntax-dispatch #f)

;;;----------------------------------------------------------------------------

;;; Interface to Gambit's source code annotations.

(define annotation?
  (lambda (x)
;;    (pp `(annotation? ,x))
    (##source? x)))

(define annotation-expression
  (lambda (x)
;;    (pp `(annotation-expression ,x))
    (##source-code x)))

(define annotation-stripped
  (lambda (x)
;;    (pp `(annotation-stripped ,x))
    (##desourcify x)))

(define build-source
  (lambda (ae x)
;;    (pp `(build-source ,ae ,x))
    (if (##source? ae)
        (##make-source x (##source-locat ae))
        (##make-source x #f))))

(define attach-source
  (lambda (ae datum)
;;    (pp `(attach-source ,ae ,datum))
    (let ((src
           (if (##source? ae)
               ae
               (##make-source ae #f))))

      (define (datum->source x)
        (##make-source (cond ((pair? x)
                              (list-convert x))
                             ((box? x)
                              (box (datum->source (unbox x))))
                             ((vector? x)
                              (vector-convert x))
                             (else
                              x))
                       (##source-locat src)))

      (define (list-convert lst)
        (cons (datum->source (car lst))
              (list-tail-convert (cdr lst))))

      (define (list-tail-convert lst)
        (cond ((pair? lst)
               (if (quoting-form? lst)
                   (datum->source lst)
                   (cons (datum->source (car lst))
                         (list-tail-convert (cdr lst)))))
              ((null? lst)
               '())
              (else
               (datum->source lst))))

      (define (quoting-form? x)
        (let ((first (car x))
              (rest (cdr x)))
          (and (pair? rest)
               (null? (cdr rest))
               (or (eq? first 'quote)
                   (eq? first 'quasiquote)
                   (eq? first 'unquote)
                   (eq? first 'unquote-splicing)))))

      (define (vector-convert vect)
        (let* ((len (vector-length vect))
               (v (make-vector len)))
          (let loop ((i (- len 1)))
            (if (>= i 0)
              (begin
                (vector-set! v i (datum->source (vector-ref vect i)))
                (loop (- i 1)))))
          v))

      (datum->source datum))))

;;;----------------------------------------------------------------------------

(define self-eval?
  (lambda (x)
    (or (number? x)
        (string? x)
        (char? x)
        (keyword? x)
        (memq x
              '(#f
                #t
                #!eof
                #!void
                #!unbound
                #!unbound2
                #!optional
                #!rest
                #!key)))))

;;;============================================================================

(set! ##expression-parsing-exception-names
      (cons '(psyntax-error . "Syntax expansion failure:")
            ##expression-parsing-exception-names))

;;;============================================================================

(begin ((lambda () (letrec ((%%noexpand35 "noexpand") (%%make-syntax-object36 (lambda (%%p1462 %%p2463) (begin (##declare (extended-bindings)) (##structure '#0=#structure(#1=#structure(#1# ##type-5 type 8 #f #(id 1 #f name 5 #f flags 5 #f super 5 #f fields 5 #f)) ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) %%p1462 %%p2463)))) (%%bs-syntax?37 (lambda (%%obj464) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj464 '##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7)))) (%%bs-syntax-expression38 (lambda (%%obj465) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj465 1 '#0# %%bs-syntax-expression38))) (%%bs-syntax-wrap39 (lambda (%%obj466) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj466 2 '#0# %%bs-syntax-wrap39))) (%%syntax-object?40 (lambda (%%obj467) ((lambda (%%t468) (if %%t468 %%t468 ((lambda (%%obj469) (if (vector? %%obj469) (eq? (vector-ref %%obj469 0) 'syntax-object) #f)) (if (annotation? %%obj467) (annotation-stripped %%obj467) %%obj467)))) (%%bs-syntax?37 %%obj467)))) (%%syntax-object-expression41 (lambda (%%obj470) (if (%%bs-syntax?37 %%obj470) (%%bs-syntax-expression38 %%obj470) ((lambda (%%obj471) (vector-ref %%obj471 1)) (if (annotation? %%obj470) (annotation-stripped %%obj470) %%obj470))))) (%%syntax-object-wrap42 (lambda (%%obj472) (if (%%bs-syntax?37 %%obj472) (%%bs-syntax-wrap39 %%obj472) ((lambda (%%obj473) (vector-ref %%obj473 2)) (if (annotation? %%obj472) (annotation-stripped %%obj472) %%obj472))))) (%%top-level-eval-hook43 (lambda (%%x474) (eval (list %%noexpand35 %%x474)))) (%%local-eval-hook44 (lambda (%%x475) (eval (list %%noexpand35 %%x475)))) (%%define-top-level-value-hook45 (lambda (%%sym476 %%val477) (%%top-level-eval-hook43 (build-source #f (list (build-source #f 'define) %%sym476 ((lambda (%%x478) (if (self-eval? %%val477) %%x478 (build-source #f (list (build-source #f 'quote) %%x478)))) (attach-source #f %%val477))))))) (%%put-cte-hook46 (lambda (%%symbol479 %%val480) ($sc-put-cte %%symbol479 %%val480 '*top*))) (%%get-global-definition-hook47 (lambda (%%symbol481) (getprop %%symbol481 '*sc-expander*))) (%%put-global-definition-hook48 (lambda (%%symbol482 %%x483) (if (not %%x483) (remprop %%symbol482 '*sc-expander*) (putprop %%symbol482 '*sc-expander* %%x483)))) (%%read-only-binding?49 (lambda (%%symbol484) #f)) (%%get-import-binding50 (lambda (%%symbol485 %%token486) (getprop %%symbol485 %%token486))) (%%update-import-binding!51 (lambda (%%symbol487 %%token488 %%p489) ((lambda (%%x490) (if (not %%x490) (remprop %%symbol487 %%token488) (putprop %%symbol487 %%token488 %%x490))) (%%p489 (%%get-import-binding50 %%symbol487 %%token488))))) (%%generate-id52 ((lambda (%%digits491) ((lambda (%%base492 %%session-key493) (letrec ((%%make-digit494 (lambda (%%x496) (string-ref %%digits491 %%x496))) (%%fmt495 (lambda (%%n497) ((letrec ((%%fmt498 (lambda (%%n499 %%a500) (if (< %%n499 %%base492) (list->string (cons (%%make-digit494 %%n499) %%a500)) ((lambda (%%r501 %%rest502) (%%fmt498 %%rest502 (cons (%%make-digit494 %%r501) %%a500))) (modulo %%n499 %%base492) (quotient %%n499 %%base492)))))) %%fmt498) %%n497 '())))) ((lambda (%%n503) (lambda (%%name504) (begin (set! %%n503 (+ %%n503 1)) (string->symbol (string-append %%session-key493 (%%fmt495 %%n503) (if %%name504 (string-append "." (symbol->string %%name504)) "")))))) -1))) (string-length %%digits491) "_")) "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-")) (%%built-lambda?136 (lambda (%%x505) ((lambda (%%t506) (if %%t506 %%t506 (if (##source? %%x505) (if (pair? (##source-code %%x505)) (if (##source? (car (##source-code %%x505))) (eq? (##source-code (car (##source-code %%x505))) 'lambda) #f) #f) #f))) (if (pair? %%x505) (eq? (car %%x505) 'lambda) #f)))) (%%build-sequence154 (lambda (%%ae507 %%exps508) ((letrec ((%%loop509 (lambda (%%exps510) (if (null? (cdr %%exps510)) (car %%exps510) (if ((lambda (%%x511) ((lambda (%%t512) (if %%t512 %%t512 (if (##source? %%x511) (if (pair? (##source-code %%x511)) (if (##source? (car (##source-code %%x511))) (if (eq? (##source-code (car (##source-code %%x511))) 'void) (null? (cdr (##source-code %%x511))) #f) #f) #f) #f))) (equal? %%x511 '(void)))) (car %%exps510)) (%%loop509 (cdr %%exps510)) (build-source %%ae507 (cons (build-source %%ae507 'begin) %%exps510))))))) %%loop509) %%exps508))) (%%build-letrec155 (lambda (%%ae513 %%vars514 %%val-exps515 %%body-exp516) (if (null? %%vars514) %%body-exp516 (build-source %%ae513 (list (build-source %%ae513 'letrec) (build-source %%ae513 (map (lambda (%%v517 %%e518) (build-source %%ae513 (list %%v517 %%e518))) %%vars514 %%val-exps515)) %%body-exp516))))) (%%build-body156 (lambda (%%ae519 %%vars520 %%val-exps521 %%body-exp522) (%%build-letrec155 %%ae519 %%vars520 %%val-exps521 %%body-exp522))) (%%build-top-module157 (lambda (%%ae523 %%types524 %%vars525 %%val-exps526 %%body-exp527) (call-with-values (lambda () ((letrec ((%%f528 (lambda (%%types529 %%vars530) (if (null? %%types529) (values '() '() '()) ((lambda (%%var531) (call-with-values (lambda () (%%f528 (cdr %%types529) (cdr %%vars530))) (lambda (%%vars532 %%defns533 %%sets534) (if (eq? (car %%types529) 'global) ((lambda (%%x535) (values (cons %%x535 %%vars532) (cons (build-source #f (list (build-source #f 'define) %%var531 (%%chi-void455))) %%defns533) (cons (build-source #f (list (build-source #f 'set!) %%var531 %%x535)) %%sets534))) (gensym %%var531)) (values (cons %%var531 %%vars532) %%defns533 %%sets534))))) (car %%vars530)))))) %%f528) %%types524 %%vars525)) (lambda (%%vars536 %%defns537 %%sets538) (if (null? %%defns537) (%%build-letrec155 %%ae523 %%vars536 %%val-exps526 %%body-exp527) (%%build-sequence154 #f (append %%defns537 (list (%%build-letrec155 %%ae523 %%vars536 %%val-exps526 (%%build-sequence154 #f (append %%sets538 (list %%body-exp527)))))))))))) (%%sanitize-binding190 (lambda (%%b539) (if (procedure? %%b539) (cons 'macro %%b539) (if (%%binding?204 %%b539) (if ((lambda (%%t540) (if (memv %%t540 '(core macro macro! deferred)) (procedure? (%%binding-value201 %%b539)) (if (memv %%t540 '($module)) (%%interface?387 (%%binding-value201 %%b539)) (if (memv %%t540 '(lexical)) #f (if (memv %%t540 '(global meta-variable)) (symbol? (%%binding-value201 %%b539)) (if (memv %%t540 '(syntax)) ((lambda (%%x541) (if (pair? %%x541) (if #f ((lambda (%%n542) (if (integer? %%n542) (if (exact? %%n542) (>= %%n542 0) #f) #f)) (cdr %%x541)) #f) #f)) (%%binding-value201 %%b539)) (if (memv %%t540 '(begin define define-syntax set! $module-key $import eval-when meta)) (null? (%%binding-value201 %%b539)) (if (memv %%t540 '(local-syntax)) (boolean? (%%binding-value201 %%b539)) (if (memv %%t540 '(displaced-lexical)) (eq? (%%binding-value201 %%b539) #f) #t))))))))) (%%binding-type200 %%b539)) %%b539 #f) #f)))) (%%binding-type200 car) (%%binding-value201 cdr) (%%set-binding-type!202 set-car!) (%%set-binding-value!203 set-cdr!) (%%binding?204 (lambda (%%x543) (if (pair? %%x543) (symbol? (car %%x543)) #f))) (%%extend-env214 (lambda (%%label544 %%binding545 %%r546) (cons (cons %%label544 %%binding545) %%r546))) (%%extend-env*215 (lambda (%%labels547 %%bindings548 %%r549) (if (null? %%labels547) %%r549 (%%extend-env*215 (cdr %%labels547) (cdr %%bindings548) (%%extend-env214 (car %%labels547) (car %%bindings548) %%r549))))) (%%extend-var-env*216 (lambda (%%labels550 %%vars551 %%r552) (if (null? %%labels550) %%r552 (%%extend-var-env*216 (cdr %%labels550) (cdr %%vars551) (%%extend-env214 (car %%labels550) (cons 'lexical (car %%vars551)) %%r552))))) (%%displaced-lexical?217 (lambda (%%id553 %%r554) ((lambda (%%n555) (if %%n555 ((lambda (%%b556) (eq? (%%binding-type200 %%b556) 'displaced-lexical)) (%%lookup220 %%n555 %%r554)) #f)) (%%id-var-name368 %%id553 '(()))))) (%%displaced-lexical-error218 (lambda (%%id557) (syntax-error %%id557 (if (%%id-var-name368 %%id557 '(())) "identifier out of context" "identifier not visible")))) (%%lookup*219 (lambda (%%x558 %%r559) ((lambda (%%t560) (if %%t560 (cdr %%t560) (if (symbol? %%x558) ((lambda (%%t561) (if %%t561 %%t561 (cons 'global %%x558))) (%%get-global-definition-hook47 %%x558)) '(displaced-lexical . #f)))) (assq %%x558 %%r559)))) (%%lookup220 (lambda (%%x562 %%r563) (letrec ((%%whack-binding!564 (lambda (%%b565 %%*b566) (begin (%%set-binding-type!202 %%b565 (%%binding-type200 %%*b566)) (%%set-binding-value!203 %%b565 (%%binding-value201 %%*b566)))))) ((lambda (%%b567) (begin (if (eq? (%%binding-type200 %%b567) 'deferred) (%%whack-binding!564 %%b567 (%%make-transformer-binding221 ((%%binding-value201 %%b567)))) (void)) %%b567)) (%%lookup*219 %%x562 %%r563))))) (%%make-transformer-binding221 (lambda (%%b568) ((lambda (%%t569) (if %%t569 %%t569 (syntax-error %%b568 "invalid transformer"))) (%%sanitize-binding190 %%b568)))) (%%defer-or-eval-transformer222 (lambda (%%eval570 %%x571) (if (%%built-lambda?136 %%x571) (cons 'deferred (lambda () (%%eval570 %%x571))) (%%make-transformer-binding221 (%%eval570 %%x571))))) (%%global-extend223 (lambda (%%type572 %%sym573 %%val574) (%%put-cte-hook46 %%sym573 (cons %%type572 %%val574)))) (%%nonsymbol-id?224 (lambda (%%x575) (if (%%syntax-object?40 %%x575) (symbol? ((lambda (%%e576) (if (annotation? %%e576) (annotation-expression %%e576) %%e576)) (%%syntax-object-expression41 %%x575))) #f))) (%%id?225 (lambda (%%x577) (if (symbol? %%x577) #t (if (%%syntax-object?40 %%x577) (symbol? ((lambda (%%e578) (if (annotation? %%e578) (annotation-expression %%e578) %%e578)) (%%syntax-object-expression41 %%x577))) (if (annotation? %%x577) (symbol? (annotation-expression %%x577)) #f))))) (%%id-marks231 (lambda (%%id579) (if (%%syntax-object?40 %%id579) (%%wrap-marks235 (%%syntax-object-wrap42 %%id579)) (%%wrap-marks235 '((top)))))) (%%id-subst232 (lambda (%%id580) (if (%%syntax-object?40 %%id580) (%%wrap-subst236 (%%syntax-object-wrap42 %%id580)) (%%wrap-marks235 '((top)))))) (%%id-sym-name&marks233 (lambda (%%x581 %%w582) (if (%%syntax-object?40 %%x581) (values ((lambda (%%e583) (if (annotation? %%e583) (annotation-expression %%e583) %%e583)) (%%syntax-object-expression41 %%x581)) (%%join-marks357 (%%wrap-marks235 %%w582) (%%wrap-marks235 (%%syntax-object-wrap42 %%x581)))) (values ((lambda (%%e584) (if (annotation? %%e584) (annotation-expression %%e584) %%e584)) %%x581) (%%wrap-marks235 %%w582))))) (%%make-wrap234 cons) (%%wrap-marks235 car) (%%wrap-subst236 cdr) (%%##type-1-indirect-label274 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-1-indirect-label") 'indirect-label 8 #f '#(label 0 #f))) (%%make-indirect-label275 (lambda (%%p1585) (begin (##declare (extended-bindings)) (##structure %%##type-1-indirect-label274 %%p1585)))) (%%indirect-label?276 (lambda (%%obj586) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj586 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-1-indirect-label274)))))))) (%%indirect-label-label277 (lambda (%%obj587) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj587 1 %%##type-1-indirect-label274 %%indirect-label-label277))) (%%indirect-label-label-set!278 (lambda (%%obj588 %%val589) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj588 %%val589 1 %%##type-1-indirect-label274 %%indirect-label-label-set!278))) (%%gen-indirect-label279 (lambda () (%%make-indirect-label275 (%%gen-label282)))) (%%get-indirect-label280 (lambda (%%x590) (%%indirect-label-label277 %%x590))) (%%set-indirect-label!281 (lambda (%%x591 %%v592) (set-indirect-label-label! %%x591 %%v592))) (%%gen-label282 (lambda () (string #\i))) (%%label?283 (lambda (%%x593) ((lambda (%%t594) (if %%t594 %%t594 ((lambda (%%t595) (if %%t595 %%t595 (%%indirect-label?276 %%x593))) (symbol? %%x593)))) (string? %%x593)))) (%%gen-labels284 (lambda (%%ls596) (if (null? %%ls596) '() (cons (%%gen-label282) (%%gen-labels284 (cdr %%ls596)))))) (%%make-ribcage285 (lambda (%%p1597 %%p2598 %%p3599) (begin (##declare (extended-bindings)) (##structure '#2=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) %%p1597 %%p2598 %%p3599)))) (%%bs-ribcage?286 (lambda (%%obj600) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj600 '##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939)))) (%%bs-ribcage-symnames287 (lambda (%%obj601) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj601 1 '#2# %%bs-ribcage-symnames287))) (%%set-bs-ribcage-symnames!288 (lambda (%%obj602 %%val603) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj602 %%val603 1 '#2# %%set-bs-ribcage-symnames!288))) (%%bs-ribcage-marks289 (lambda (%%obj604) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj604 2 '#2# %%bs-ribcage-marks289))) (%%set-bs-ribcage-marks!290 (lambda (%%obj605 %%val606) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj605 %%val606 2 '#2# %%set-bs-ribcage-marks!290))) (%%bs-ribcage-labels291 (lambda (%%obj607) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj607 3 '#2# %%bs-ribcage-labels291))) (%%set-bs-ribcage-labels!292 (lambda (%%obj608 %%val609) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj608 %%val609 3 '#2# %%set-bs-ribcage-labels!292))) (%%ribcage?293 (lambda (%%obj610) ((lambda (%%t611) (if %%t611 %%t611 ((lambda (%%obj612) (if (vector? %%obj612) (eq? (vector-ref %%obj612 0) 'ribcage) #f)) (if (annotation? %%obj610) (annotation-stripped %%obj610) %%obj610)))) (%%bs-ribcage?286 %%obj610)))) (%%ribcage-symnames294 (lambda (%%obj613) (if (%%bs-ribcage?286 %%obj613) (%%bs-ribcage-symnames287 %%obj613) ((lambda (%%obj614) (vector-ref %%obj614 1)) (if (annotation? %%obj613) (annotation-stripped %%obj613) %%obj613))))) (%%set-ribcage-symnames!295 (lambda (%%obj615 %%val616) (if (%%bs-ribcage?286 %%obj615) (%%set-bs-ribcage-symnames!288 %%obj615 %%val616) ((lambda (%%obj617) (vector-set! %%obj617 1 %%val616)) (if (annotation? %%obj615) (annotation-stripped %%obj615) %%obj615))))) (%%ribcage-marks296 (lambda (%%obj618) (if (%%bs-ribcage?286 %%obj618) (%%bs-ribcage-marks289 %%obj618) ((lambda (%%obj619) (vector-ref %%obj619 2)) (if (annotation? %%obj618) (annotation-stripped %%obj618) %%obj618))))) (%%set-ribcage-marks!297 (lambda (%%obj620 %%val621) (if (%%bs-ribcage?286 %%obj620) (%%set-bs-ribcage-marks!290 %%obj620 %%val621) ((lambda (%%obj622) (vector-set! %%obj622 2 %%val621)) (if (annotation? %%obj620) (annotation-stripped %%obj620) %%obj620))))) (%%ribcage-labels298 (lambda (%%obj623) (if (%%bs-ribcage?286 %%obj623) (%%bs-ribcage-labels291 %%obj623) ((lambda (%%obj624) (vector-ref %%obj624 3)) (if (annotation? %%obj623) (annotation-stripped %%obj623) %%obj623))))) (%%set-ribcage-labels!299 (lambda (%%obj625 %%val626) (if (%%bs-ribcage?286 %%obj625) (%%set-bs-ribcage-labels!292 %%obj625 %%val626) ((lambda (%%obj627) (vector-set! %%obj627 3 %%val626)) (if (annotation? %%obj625) (annotation-stripped %%obj625) %%obj625))))) (%%make-top-ribcage300 (lambda (%%p1628 %%p2629) (begin (##declare (extended-bindings)) (##structure '#3=#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) %%p1628 %%p2629)))) (%%bs-top-ribcage?301 (lambda (%%obj630) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj630 '##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91)))) (%%bs-top-ribcage-key302 (lambda (%%obj631) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj631 1 '#3# %%bs-top-ribcage-key302))) (%%set-bs-top-ribcage-key!303 (lambda (%%obj632 %%val633) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj632 %%val633 1 '#3# %%set-bs-top-ribcage-key!303))) (%%bs-top-ribcage-mutable?304 (lambda (%%obj634) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj634 2 '#3# %%bs-top-ribcage-mutable?304))) (%%set-bs-top-ribcage-mutable?!305 (lambda (%%obj635 %%val636) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj635 %%val636 2 '#3# %%set-bs-top-ribcage-mutable?!305))) (%%top-ribcage?306 (lambda (%%obj637) ((lambda (%%t638) (if %%t638 %%t638 ((lambda (%%obj639) (if (vector? %%obj639) (eq? (vector-ref %%obj639 0) 'top-ribcage) #f)) (if (annotation? %%obj637) (annotation-stripped %%obj637) %%obj637)))) (%%bs-top-ribcage?301 %%obj637)))) (%%top-ribcage-key307 (lambda (%%obj640) (if (%%bs-top-ribcage?301 %%obj640) (%%bs-top-ribcage-key302 %%obj640) ((lambda (%%obj641) (vector-ref %%obj641 1)) (if (annotation? %%obj640) (annotation-stripped %%obj640) %%obj640))))) (%%set-top-ribcage-key!308 (lambda (%%obj642 %%val643) (if (%%bs-top-ribcage?301 %%obj642) (%%set-bs-top-ribcage-key!303 %%obj642 %%val643) ((lambda (%%obj644) (vector-set! %%obj644 1 %%val643)) (if (annotation? %%obj642) (annotation-stripped %%obj642) %%obj642))))) (%%top-ribcage-mutable?309 (lambda (%%obj645) (if (%%bs-top-ribcage?301 %%obj645) (%%bs-top-ribcage-mutable?304 %%obj645) ((lambda (%%obj646) (vector-ref %%obj646 2)) (if (annotation? %%obj645) (annotation-stripped %%obj645) %%obj645))))) (%%set-top-ribcage-mutable?!310 (lambda (%%obj647 %%val648) (if (%%bs-top-ribcage?301 %%obj647) (%%set-bs-top-ribcage-mutable?!305 %%obj647 %%val648) ((lambda (%%obj649) (vector-set! %%obj649 2 %%val648)) (if (annotation? %%obj647) (annotation-stripped %%obj647) %%obj647))))) (%%##type-2-import-interface311 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-import-interface") 'import-interface 8 #f '#(interface 0 #f new-marks 0 #f))) (%%make-import-interface312 (lambda (%%p1650 %%p2651) (begin (##declare (extended-bindings)) (##structure %%##type-2-import-interface311 %%p1650 %%p2651)))) (%%import-interface?313 (lambda (%%obj652) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj652 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-import-interface311)))))))) (%%import-interface-interface314 (lambda (%%obj653) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj653 1 %%##type-2-import-interface311 %%import-interface-interface314))) (%%import-interface-interface-set!315 (lambda (%%obj654 %%val655) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj654 %%val655 1 %%##type-2-import-interface311 %%import-interface-interface-set!315))) (%%import-interface-new-marks316 (lambda (%%obj656) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj656 2 %%##type-2-import-interface311 %%import-interface-new-marks316))) (%%import-interface-new-marks-set!317 (lambda (%%obj657 %%val658) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj657 %%val658 2 %%##type-2-import-interface311 %%import-interface-new-marks-set!317))) (%%##type-2-env318 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-env") 'env 8 #f '#(top-ribcage 0 #f wrap 0 #f))) (%%make-env319 (lambda (%%p1659 %%p2660) (begin (##declare (extended-bindings)) (##structure %%##type-2-env318 %%p1659 %%p2660)))) (%%env?320 (lambda (%%obj661) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj661 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-env318)))))))) (%%env-top-ribcage321 (lambda (%%obj662) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj662 1 %%##type-2-env318 %%env-top-ribcage321))) (%%env-top-ribcage-set!322 (lambda (%%obj663 %%val664) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj663 %%val664 1 %%##type-2-env318 %%env-top-ribcage-set!322))) (%%env-wrap323 (lambda (%%obj665) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj665 2 %%##type-2-env318 %%env-wrap323))) (%%env-wrap-set!324 (lambda (%%obj666 %%val667) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj666 %%val667 2 %%##type-2-env318 %%env-wrap-set!324))) (%%anti-mark334 (lambda (%%w668) (%%make-wrap234 (cons #f (%%wrap-marks235 %%w668)) (cons 'shift (%%wrap-subst236 %%w668))))) (%%barrier-marker339 #f) (%%extend-ribcage!344 (lambda (%%ribcage669 %%id670 %%label671) (begin (%%set-ribcage-symnames!295 %%ribcage669 (cons ((lambda (%%e672) (if (annotation? %%e672) (annotation-expression %%e672) %%e672)) (%%syntax-object-expression41 %%id670)) (%%ribcage-symnames294 %%ribcage669))) (%%set-ribcage-marks!297 %%ribcage669 (cons (%%wrap-marks235 (%%syntax-object-wrap42 %%id670)) (%%ribcage-marks296 %%ribcage669))) (%%set-ribcage-labels!299 %%ribcage669 (cons %%label671 (%%ribcage-labels298 %%ribcage669)))))) (%%import-extend-ribcage!345 (lambda (%%ribcage673 %%new-marks674 %%id675 %%label676) (begin (%%set-ribcage-symnames!295 %%ribcage673 (cons ((lambda (%%e677) (if (annotation? %%e677) (annotation-expression %%e677) %%e677)) (%%syntax-object-expression41 %%id675)) (%%ribcage-symnames294 %%ribcage673))) (%%set-ribcage-marks!297 %%ribcage673 (cons (%%join-marks357 %%new-marks674 (%%wrap-marks235 (%%syntax-object-wrap42 %%id675))) (%%ribcage-marks296 %%ribcage673))) (%%set-ribcage-labels!299 %%ribcage673 (cons %%label676 (%%ribcage-labels298 %%ribcage673)))))) (%%extend-ribcage-barrier!346 (lambda (%%ribcage678 %%killer-id679) (%%extend-ribcage-barrier-help!347 %%ribcage678 (%%syntax-object-wrap42 %%killer-id679)))) (%%extend-ribcage-barrier-help!347 (lambda (%%ribcage680 %%wrap681) (begin (%%set-ribcage-symnames!295 %%ribcage680 (cons %%barrier-marker339 (%%ribcage-symnames294 %%ribcage680))) (%%set-ribcage-marks!297 %%ribcage680 (cons (%%wrap-marks235 %%wrap681) (%%ribcage-marks296 %%ribcage680)))))) (%%extend-ribcage-subst!348 (lambda (%%ribcage682 %%import-iface683) (%%set-ribcage-symnames!295 %%ribcage682 (cons %%import-iface683 (%%ribcage-symnames294 %%ribcage682))))) (%%lookup-import-binding-name349 (lambda (%%sym684 %%marks685 %%token686 %%new-marks687) ((lambda (%%new688) (if %%new688 ((letrec ((%%f689 (lambda (%%new690) (if (pair? %%new690) ((lambda (%%t691) (if %%t691 %%t691 (%%f689 (cdr %%new690)))) (%%f689 (car %%new690))) (if (symbol? %%new690) (if (%%same-marks?359 %%marks685 (%%join-marks357 %%new-marks687 (%%wrap-marks235 '((top))))) %%new690 #f) (if (%%same-marks?359 %%marks685 (%%join-marks357 %%new-marks687 (%%wrap-marks235 (%%syntax-object-wrap42 %%new690)))) %%new690 #f)))))) %%f689) %%new688) #f)) (%%get-import-binding50 %%sym684 %%token686)))) (%%store-import-binding350 (lambda (%%id692 %%token693 %%new-marks694) (letrec ((%%cons-id695 (lambda (%%id697 %%x698) (if (not %%x698) %%id697 (cons %%id697 %%x698)))) (%%weed696 (lambda (%%marks699 %%x700) (if (pair? %%x700) (if (%%same-marks?359 (%%id-marks231 (car %%x700)) %%marks699) (%%weed696 %%marks699 (cdr %%x700)) (%%cons-id695 (car %%x700) (%%weed696 %%marks699 (cdr %%x700)))) (if %%x700 (if (not (%%same-marks?359 (%%id-marks231 %%x700) %%marks699)) %%x700 #f) #f))))) ((lambda (%%id701) ((lambda (%%sym702) (if (not (eq? %%id701 %%sym702)) ((lambda (%%marks703) (%%update-import-binding!51 %%sym702 %%token693 (lambda (%%old-binding704) ((lambda (%%x705) (%%cons-id695 (if (%%same-marks?359 %%marks703 (%%wrap-marks235 '((top)))) (%%resolved-id-var-name354 %%id701) %%id701) %%x705)) (%%weed696 %%marks703 %%old-binding704))))) (%%id-marks231 %%id701)) (void))) ((lambda (%%x706) ((lambda (%%e707) (if (annotation? %%e707) (annotation-expression %%e707) %%e707)) (if (%%syntax-object?40 %%x706) (%%syntax-object-expression41 %%x706) %%x706))) %%id701))) (if (null? %%new-marks694) %%id692 (%%make-syntax-object36 ((lambda (%%x708) ((lambda (%%e709) (if (annotation? %%e709) (annotation-expression %%e709) %%e709)) (if (%%syntax-object?40 %%x708) (%%syntax-object-expression41 %%x708) %%x708))) %%id692) (%%make-wrap234 (%%join-marks357 %%new-marks694 (%%id-marks231 %%id692)) (%%id-subst232 %%id692)))))))) (%%make-binding-wrap351 (lambda (%%ids710 %%labels711 %%w712) (if (null? %%ids710) %%w712 (%%make-wrap234 (%%wrap-marks235 %%w712) (cons ((lambda (%%labelvec713) ((lambda (%%n714) ((lambda (%%symnamevec715 %%marksvec716) (begin ((letrec ((%%f717 (lambda (%%ids718 %%i719) (if (not (null? %%ids718)) (call-with-values (lambda () (%%id-sym-name&marks233 (car %%ids718) %%w712)) (lambda (%%symname720 %%marks721) (begin (vector-set! %%symnamevec715 %%i719 %%symname720) (vector-set! %%marksvec716 %%i719 %%marks721) (%%f717 (cdr %%ids718) (fx+ %%i719 1))))) (void))))) %%f717) %%ids710 0) (%%make-ribcage285 %%symnamevec715 %%marksvec716 %%labelvec713))) (make-vector %%n714) (make-vector %%n714))) (vector-length %%labelvec713))) (list->vector %%labels711)) (%%wrap-subst236 %%w712)))))) (%%make-resolved-id352 (lambda (%%fromsym722 %%marks723 %%tosym724) (%%make-syntax-object36 %%fromsym722 (%%make-wrap234 %%marks723 (list (%%make-ribcage285 (vector %%fromsym722) (vector %%marks723) (vector %%tosym724))))))) (%%id->resolved-id353 (lambda (%%id725) (call-with-values (lambda () (%%id-var-name&marks366 %%id725 '(()))) (lambda (%%tosym726 %%marks727) (begin (if (not %%tosym726) (syntax-error %%id725 "identifier not visible for export") (void)) (%%make-resolved-id352 ((lambda (%%x728) ((lambda (%%e729) (if (annotation? %%e729) (annotation-expression %%e729) %%e729)) (if (%%syntax-object?40 %%x728) (%%syntax-object-expression41 %%x728) %%x728))) %%id725) %%marks727 %%tosym726)))))) (%%resolved-id-var-name354 (lambda (%%id730) (vector-ref (%%ribcage-labels298 (car (%%wrap-subst236 (%%syntax-object-wrap42 %%id730)))) 0))) (%%smart-append355 (lambda (%%m1731 %%m2732) (if (null? %%m2732) %%m1731 (append %%m1731 %%m2732)))) (%%join-wraps356 (lambda (%%w1733 %%w2734) ((lambda (%%m1735 %%s1736) (if (null? %%m1735) (if (null? %%s1736) %%w2734 (%%make-wrap234 (%%wrap-marks235 %%w2734) (%%join-subst358 %%s1736 (%%wrap-subst236 %%w2734)))) (%%make-wrap234 (%%join-marks357 %%m1735 (%%wrap-marks235 %%w2734)) (%%join-subst358 %%s1736 (%%wrap-subst236 %%w2734))))) (%%wrap-marks235 %%w1733) (%%wrap-subst236 %%w1733)))) (%%join-marks357 (lambda (%%m1737 %%m2738) (%%smart-append355 %%m1737 %%m2738))) (%%join-subst358 (lambda (%%s1739 %%s2740) (%%smart-append355 %%s1739 %%s2740))) (%%same-marks?359 (lambda (%%x741 %%y742) ((lambda (%%t743) (if %%t743 %%t743 (if (not (null? %%x741)) (if (not (null? %%y742)) (if (eq? (car %%x741) (car %%y742)) (%%same-marks?359 (cdr %%x741) (cdr %%y742)) #f) #f) #f))) (eq? %%x741 %%y742)))) (%%diff-marks360 (lambda (%%m1744 %%m2745) ((lambda (%%n1746 %%n2747) ((letrec ((%%f748 (lambda (%%n1749 %%m1750) (if (> %%n1749 %%n2747) (cons (car %%m1750) (%%f748 (- %%n1749 1) (cdr %%m1750))) (if (equal? %%m1750 %%m2745) '() (error "internal error in diff-marks" %%m1750 %%m2745)))))) %%f748) %%n1746 %%m1744)) (length %%m1744) (length %%m2745)))) (%%leave-implicit?361 (lambda (%%token751) (eq? %%token751 '*top*))) (%%new-binding362 (lambda (%%sym752 %%marks753 %%token754) ((lambda (%%loc755) ((lambda (%%id756) (begin (%%store-import-binding350 %%id756 %%token754 '()) (values %%loc755 %%id756))) (%%make-resolved-id352 %%sym752 %%marks753 %%loc755))) (if (if (%%leave-implicit?361 %%token754) (%%same-marks?359 %%marks753 (%%wrap-marks235 '((top)))) #f) %%sym752 (%%generate-id52 %%sym752))))) (%%top-id-bound-var-name363 (lambda (%%sym757 %%marks758 %%top-ribcage759) ((lambda (%%token760) ((lambda (%%t761) (if %%t761 ((lambda (%%id762) (if (symbol? %%id762) (if (%%read-only-binding?49 %%id762) (%%new-binding362 %%sym757 %%marks758 %%token760) (values %%id762 (%%make-resolved-id352 %%sym757 %%marks758 %%id762))) (values (%%resolved-id-var-name354 %%id762) %%id762))) %%t761) (%%new-binding362 %%sym757 %%marks758 %%token760))) (%%lookup-import-binding-name349 %%sym757 %%marks758 %%token760 '()))) (%%top-ribcage-key307 %%top-ribcage759)))) (%%top-id-free-var-name364 (lambda (%%sym763 %%marks764 %%top-ribcage765) ((lambda (%%token766) ((lambda (%%t767) (if %%t767 ((lambda (%%id768) (if (symbol? %%id768) %%id768 (%%resolved-id-var-name354 %%id768))) %%t767) (if (if (%%top-ribcage-mutable?309 %%top-ribcage765) (%%same-marks?359 %%marks764 (%%wrap-marks235 '((top)))) #f) (call-with-values (lambda () (%%new-binding362 %%sym763 (%%wrap-marks235 '((top))) %%token766)) (lambda (%%sym769 %%id770) %%sym769)) #f))) (%%lookup-import-binding-name349 %%sym763 %%marks764 %%token766 '()))) (%%top-ribcage-key307 %%top-ribcage765)))) (%%id-var-name-loc&marks365 (lambda (%%id771 %%w772) (letrec ((%%search773 (lambda (%%sym776 %%subst777 %%marks778) (if (null? %%subst777) (values #f %%marks778) ((lambda (%%fst779) (if (eq? %%fst779 'shift) (%%search773 %%sym776 (cdr %%subst777) (cdr %%marks778)) (if (%%ribcage?293 %%fst779) ((lambda (%%symnames780) (if (vector? %%symnames780) (%%search-vector-rib775 %%sym776 %%subst777 %%marks778 %%symnames780 %%fst779) (%%search-list-rib774 %%sym776 %%subst777 %%marks778 %%symnames780 %%fst779))) (%%ribcage-symnames294 %%fst779)) (if (%%top-ribcage?306 %%fst779) ((lambda (%%t781) (if %%t781 ((lambda (%%var-name782) (values %%var-name782 %%marks778)) %%t781) (%%search773 %%sym776 (cdr %%subst777) %%marks778))) (%%top-id-free-var-name364 %%sym776 %%marks778 %%fst779)) (error "internal error in id-var-name-loc&marks: improper subst" %%subst777))))) (car %%subst777))))) (%%search-list-rib774 (lambda (%%sym783 %%subst784 %%marks785 %%symnames786 %%ribcage787) ((letrec ((%%f788 (lambda (%%symnames789 %%i790) (if (null? %%symnames789) (%%search773 %%sym783 (cdr %%subst784) %%marks785) ((lambda (%%x791) (if (if (eq? %%x791 %%sym783) (%%same-marks?359 %%marks785 (list-ref (%%ribcage-marks296 %%ribcage787) %%i790)) #f) (values (list-ref (%%ribcage-labels298 %%ribcage787) %%i790) %%marks785) (if (%%import-interface?313 %%x791) ((lambda (%%iface792 %%new-marks793) ((lambda (%%t794) (if %%t794 ((lambda (%%token795) ((lambda (%%t796) (if %%t796 ((lambda (%%id797) (values (if (symbol? %%id797) %%id797 (%%resolved-id-var-name354 %%id797)) %%marks785)) %%t796) (%%f788 (cdr %%symnames789) %%i790))) (%%lookup-import-binding-name349 %%sym783 %%marks785 %%token795 %%new-marks793))) %%t794) ((lambda (%%ie798) ((lambda (%%n799) ((lambda () ((letrec ((%%g800 (lambda (%%j801) (if (fx= %%j801 %%n799) (%%f788 (cdr %%symnames789) %%i790) ((lambda (%%id802) ((lambda (%%id.sym803 %%id.marks804) (if (%%help-bound-id=?371 %%id.sym803 %%id.marks804 %%sym783 %%marks785) (values (%%lookup-import-label443 %%id802) %%marks785) (%%g800 (fx+ %%j801 1)))) ((lambda (%%x805) ((lambda (%%e806) (if (annotation? %%e806) (annotation-expression %%e806) %%e806)) (if (%%syntax-object?40 %%x805) (%%syntax-object-expression41 %%x805) %%x805))) %%id802) (%%join-marks357 %%new-marks793 (%%id-marks231 %%id802)))) (vector-ref %%ie798 %%j801)))))) %%g800) 0)))) (vector-length %%ie798))) (%%interface-exports390 %%iface792)))) (%%interface-token392 %%iface792))) (%%import-interface-interface314 %%x791) (%%import-interface-new-marks316 %%x791)) (if (if (eq? %%x791 %%barrier-marker339) (%%same-marks?359 %%marks785 (list-ref (%%ribcage-marks296 %%ribcage787) %%i790)) #f) (values #f %%marks785) (%%f788 (cdr %%symnames789) (fx+ %%i790 1)))))) (car %%symnames789)))))) %%f788) %%symnames786 0))) (%%search-vector-rib775 (lambda (%%sym807 %%subst808 %%marks809 %%symnames810 %%ribcage811) ((lambda (%%n812) ((letrec ((%%f813 (lambda (%%i814) (if (fx= %%i814 %%n812) (%%search773 %%sym807 (cdr %%subst808) %%marks809) (if (if (eq? (vector-ref %%symnames810 %%i814) %%sym807) (%%same-marks?359 %%marks809 (vector-ref (%%ribcage-marks296 %%ribcage811) %%i814)) #f) (values (vector-ref (%%ribcage-labels298 %%ribcage811) %%i814) %%marks809) (%%f813 (fx+ %%i814 1))))))) %%f813) 0)) (vector-length %%symnames810))))) (if (symbol? %%id771) (%%search773 %%id771 (%%wrap-subst236 %%w772) (%%wrap-marks235 %%w772)) (if (%%syntax-object?40 %%id771) ((lambda (%%sym815 %%w1816) (call-with-values (lambda () (%%search773 %%sym815 (%%wrap-subst236 %%w772) (%%join-marks357 (%%wrap-marks235 %%w772) (%%wrap-marks235 %%w1816)))) (lambda (%%name817 %%marks818) (if %%name817 (values %%name817 %%marks818) (%%search773 %%sym815 (%%wrap-subst236 %%w1816) %%marks818))))) ((lambda (%%e819) (if (annotation? %%e819) (annotation-expression %%e819) %%e819)) (%%syntax-object-expression41 %%id771)) (%%syntax-object-wrap42 %%id771)) (if (annotation? %%id771) (%%search773 ((lambda (%%e820) (if (annotation? %%e820) (annotation-expression %%e820) %%e820)) %%id771) (%%wrap-subst236 %%w772) (%%wrap-marks235 %%w772)) (error "(in id-var-name) invalid id" %%id771))))))) (%%id-var-name&marks366 (lambda (%%id821 %%w822) (call-with-values (lambda () (%%id-var-name-loc&marks365 %%id821 %%w822)) (lambda (%%label823 %%marks824) (values (if (%%indirect-label?276 %%label823) (%%get-indirect-label280 %%label823) %%label823) %%marks824))))) (%%id-var-name-loc367 (lambda (%%id825 %%w826) (call-with-values (lambda () (%%id-var-name-loc&marks365 %%id825 %%w826)) (lambda (%%label827 %%marks828) %%label827)))) (%%id-var-name368 (lambda (%%id829 %%w830) (call-with-values (lambda () (%%id-var-name-loc&marks365 %%id829 %%w830)) (lambda (%%label831 %%marks832) (if (%%indirect-label?276 %%label831) (%%get-indirect-label280 %%label831) %%label831))))) (%%free-id=?369 (lambda (%%i833 %%j834) (if (eq? ((lambda (%%x835) ((lambda (%%e836) (if (annotation? %%e836) (annotation-expression %%e836) %%e836)) (if (%%syntax-object?40 %%x835) (%%syntax-object-expression41 %%x835) %%x835))) %%i833) ((lambda (%%x837) ((lambda (%%e838) (if (annotation? %%e838) (annotation-expression %%e838) %%e838)) (if (%%syntax-object?40 %%x837) (%%syntax-object-expression41 %%x837) %%x837))) %%j834)) (eq? (%%id-var-name368 %%i833 '(())) (%%id-var-name368 %%j834 '(()))) #f))) (%%literal-id=?370 (lambda (%%id839 %%literal840) (if (eq? ((lambda (%%x841) ((lambda (%%e842) (if (annotation? %%e842) (annotation-expression %%e842) %%e842)) (if (%%syntax-object?40 %%x841) (%%syntax-object-expression41 %%x841) %%x841))) %%id839) ((lambda (%%x843) ((lambda (%%e844) (if (annotation? %%e844) (annotation-expression %%e844) %%e844)) (if (%%syntax-object?40 %%x843) (%%syntax-object-expression41 %%x843) %%x843))) %%literal840)) ((lambda (%%n-id845 %%n-literal846) ((lambda (%%t847) (if %%t847 %%t847 (if ((lambda (%%t848) (if %%t848 %%t848 (symbol? %%n-id845))) (not %%n-id845)) ((lambda (%%t849) (if %%t849 %%t849 (symbol? %%n-literal846))) (not %%n-literal846)) #f))) (eq? %%n-id845 %%n-literal846))) (%%id-var-name368 %%id839 '(())) (%%id-var-name368 %%literal840 '(()))) #f))) (%%help-bound-id=?371 (lambda (%%i.sym850 %%i.marks851 %%j.sym852 %%j.marks853) (if (eq? %%i.sym850 %%j.sym852) (%%same-marks?359 %%i.marks851 %%j.marks853) #f))) (%%bound-id=?372 (lambda (%%i854 %%j855) (%%help-bound-id=?371 ((lambda (%%x856) ((lambda (%%e857) (if (annotation? %%e857) (annotation-expression %%e857) %%e857)) (if (%%syntax-object?40 %%x856) (%%syntax-object-expression41 %%x856) %%x856))) %%i854) (%%id-marks231 %%i854) ((lambda (%%x858) ((lambda (%%e859) (if (annotation? %%e859) (annotation-expression %%e859) %%e859)) (if (%%syntax-object?40 %%x858) (%%syntax-object-expression41 %%x858) %%x858))) %%j855) (%%id-marks231 %%j855)))) (%%valid-bound-ids?373 (lambda (%%ids860) (if ((letrec ((%%all-ids?861 (lambda (%%ids862) ((lambda (%%t863) (if %%t863 %%t863 (if (%%id?225 (car %%ids862)) (%%all-ids?861 (cdr %%ids862)) #f))) (null? %%ids862))))) %%all-ids?861) %%ids860) (%%distinct-bound-ids?374 %%ids860) #f))) (%%distinct-bound-ids?374 (lambda (%%ids864) ((letrec ((%%distinct?865 (lambda (%%ids866) ((lambda (%%t867) (if %%t867 %%t867 (if (not (%%bound-id-member?376 (car %%ids866) (cdr %%ids866))) (%%distinct?865 (cdr %%ids866)) #f))) (null? %%ids866))))) %%distinct?865) %%ids864))) (%%invalid-ids-error375 (lambda (%%ids868 %%exp869 %%class870) ((letrec ((%%find871 (lambda (%%ids872 %%gooduns873) (if (null? %%ids872) (syntax-error %%exp869) (if (%%id?225 (car %%ids872)) (if (%%bound-id-member?376 (car %%ids872) %%gooduns873) (syntax-error (car %%ids872) "duplicate " %%class870) (%%find871 (cdr %%ids872) (cons (car %%ids872) %%gooduns873))) (syntax-error (car %%ids872) "invalid " %%class870)))))) %%find871) %%ids868 '()))) (%%bound-id-member?376 (lambda (%%x874 %%list875) (if (not (null? %%list875)) ((lambda (%%t876) (if %%t876 %%t876 (%%bound-id-member?376 %%x874 (cdr %%list875)))) (%%bound-id=?372 %%x874 (car %%list875))) #f))) (%%wrap377 (lambda (%%x877 %%w878) (if (if (null? (%%wrap-marks235 %%w878)) (null? (%%wrap-subst236 %%w878)) #f) %%x877 (if (%%syntax-object?40 %%x877) (%%make-syntax-object36 (%%syntax-object-expression41 %%x877) (%%join-wraps356 %%w878 (%%syntax-object-wrap42 %%x877))) (if (null? %%x877) %%x877 (%%make-syntax-object36 %%x877 %%w878)))))) (%%source-wrap378 (lambda (%%x879 %%w880 %%ae881) (%%wrap377 (if (annotation? %%ae881) (begin (if (not (eq? (annotation-expression %%ae881) %%x879)) (error "internal error in source-wrap: ae/x mismatch") (void)) %%ae881) %%x879) %%w880))) (%%chi-when-list379 (lambda (%%when-list882 %%w883) (map (lambda (%%x884) (if (%%literal-id=?370 %%x884 '#structure(#4=#structure(#1# ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) compile (#5=(top) . #6=(#structure(#7=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) () () ()) #structure(#7# #(x) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(when-list w) #(#5# #5#) #("i" "i")) #8=#structure(#7# (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module frob-meta?-set! frob-meta? frob-e-set! frob-e frob? make-frob ##type-2-frob create-module-binding module-binding-exported-set! module-binding-exported module-binding-val-set! module-binding-val module-binding-imps-set! module-binding-imps module-binding-label-set! module-binding-label module-binding-id-set! module-binding-id module-binding-type-set! module-binding-type module-binding? make-module-binding ##type-6-module-binding make-resolved-interface make-unresolved-interface interface-token-set! interface-token interface-exports-set! interface-exports interface-marks-set! interface-marks interface? make-interface ##type-3-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark env-wrap-set! env-wrap env-top-ribcage-set! env-top-ribcage env? make-env ##type-2-env import-interface-new-marks-set! import-interface-new-marks import-interface-interface-set! import-interface-interface import-interface? make-import-interface ##type-2-import-interface set-top-ribcage-mutable?! top-ribcage-mutable? set-top-ribcage-key! top-ribcage-key top-ribcage? set-bs-top-ribcage-mutable?! bs-top-ribcage-mutable? set-bs-top-ribcage-key! bs-top-ribcage-key bs-top-ribcage? make-top-ribcage set-ribcage-labels! ribcage-labels set-ribcage-marks! ribcage-marks set-ribcage-symnames! ribcage-symnames ribcage? set-bs-ribcage-labels! bs-ribcage-labels set-bs-ribcage-marks! bs-ribcage-marks set-bs-ribcage-symnames! bs-ribcage-symnames bs-ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? tmp-wrap top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-dsssl-lambda build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id update-import-binding! get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook define-top-level-value-hook local-eval-hook top-level-eval-hook syntax-object-wrap syntax-object-expression syntax-object? bs-syntax-wrap bs-syntax-expression bs-syntax? make-syntax-object noexpand let-values define-structure unless when) (#5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# ("m" . #9=(top)) #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# ("m" . #9#) #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5# #5#) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) . #10=(#structure(#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) *top* #t)))))) 'compile (if (%%literal-id=?370 %%x884 '#structure(#4# load (#5# . #6#))) 'load (if (%%literal-id=?370 %%x884 '#structure(#4# visit (#5# . #6#))) 'visit (if (%%literal-id=?370 %%x884 '#structure(#4# revisit (#5# . #6#))) 'revisit (if (%%literal-id=?370 %%x884 '#structure(#4# eval (#5# . #6#))) 'eval (syntax-error (%%wrap377 %%x884 %%w883) "invalid eval-when situation"))))))) %%when-list882))) (%%syntax-type380 (lambda (%%e885 %%r886 %%w887 %%ae888 %%rib889) (if (symbol? %%e885) ((lambda (%%n890) ((lambda (%%b891) ((lambda (%%type892) ((lambda () ((lambda (%%t893) (if (memv %%t893 '(macro macro!)) (%%syntax-type380 (%%chi-macro439 (%%binding-value201 %%b891) %%e885 %%r886 %%w887 %%ae888 %%rib889) %%r886 '(()) #f %%rib889) (values %%type892 (%%binding-value201 %%b891) %%e885 %%w887 %%ae888))) %%type892)))) (%%binding-type200 %%b891))) (%%lookup220 %%n890 %%r886))) (%%id-var-name368 %%e885 %%w887)) (if (pair? %%e885) ((lambda (%%first894) (if (%%id?225 %%first894) ((lambda (%%n895) ((lambda (%%b896) ((lambda (%%type897) ((lambda () ((lambda (%%t898) (if (memv %%t898 '(lexical)) (values 'lexical-call (%%binding-value201 %%b896) %%e885 %%w887 %%ae888) (if (memv %%t898 '(macro macro!)) (%%syntax-type380 (%%chi-macro439 (%%binding-value201 %%b896) %%e885 %%r886 %%w887 %%ae888 %%rib889) %%r886 '(()) #f %%rib889) (if (memv %%t898 '(core)) (values %%type897 (%%binding-value201 %%b896) %%e885 %%w887 %%ae888) (if (memv %%t898 '(begin ##begin)) (values 'begin-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(alias)) (values 'alias-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(define)) (values 'define-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(define-syntax)) (values 'define-syntax-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(set!)) (%%chi-set!438 %%e885 %%r886 %%w887 %%ae888 %%rib889) (if (memv %%t898 '($module-key)) (values '$module-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '($import)) (values '$import-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(eval-when)) (values 'eval-when-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(meta)) (values 'meta-form #f %%e885 %%w887 %%ae888) (if (memv %%t898 '(local-syntax)) (values 'local-syntax-form (%%binding-value201 %%b896) %%e885 %%w887 %%ae888) (values 'call #f %%e885 %%w887 %%ae888))))))))))))))) %%type897)))) (%%binding-type200 %%b896))) (%%lookup220 %%n895 %%r886))) (%%id-var-name368 %%first894 %%w887)) (values 'call #f %%e885 %%w887 %%ae888))) (car %%e885)) (if (%%syntax-object?40 %%e885) (%%syntax-type380 (%%syntax-object-expression41 %%e885) %%r886 (%%join-wraps356 %%w887 (%%syntax-object-wrap42 %%e885)) #f %%rib889) (if (annotation? %%e885) (%%syntax-type380 (annotation-expression %%e885) %%r886 %%w887 %%e885 %%rib889) (if ((lambda (%%x899) (self-eval? %%x899)) %%e885) (values 'constant #f %%e885 %%w887 %%ae888) (values 'other #f %%e885 %%w887 %%ae888)))))))) (%%chi-top*381 (lambda (%%e900 %%r901 %%w902 %%ctem903 %%rtem904 %%meta?905 %%top-ribcage906) ((lambda (%%meta-residuals907) (letrec ((%%meta-residualize!908 (lambda (%%x909) (set! %%meta-residuals907 (cons %%x909 %%meta-residuals907))))) ((lambda (%%e910) (%%build-sequence154 #f (reverse (cons %%e910 %%meta-residuals907)))) (%%chi-top383 %%e900 %%r901 %%w902 %%ctem903 %%rtem904 %%meta?905 %%top-ribcage906 %%meta-residualize!908 #f)))) '()))) (%%chi-top-sequence382 (lambda (%%body911 %%r912 %%w913 %%ae914 %%ctem915 %%rtem916 %%meta?917 %%ribcage918 %%meta-residualize!919) (%%build-sequence154 %%ae914 ((letrec ((%%dobody920 (lambda (%%body921) (if (null? %%body921) '() ((lambda (%%first922) (cons %%first922 (%%dobody920 (cdr %%body921)))) (%%chi-top383 (car %%body921) %%r912 %%w913 %%ctem915 %%rtem916 %%meta?917 %%ribcage918 %%meta-residualize!919 #f)))))) %%dobody920) %%body911)))) (%%chi-top383 (lambda (%%e923 %%r924 %%w925 %%ctem926 %%rtem927 %%meta?928 %%top-ribcage929 %%meta-residualize!930 %%meta-seen?931) (call-with-values (lambda () (%%syntax-type380 %%e923 %%r924 %%w925 #f %%top-ribcage929)) (lambda (%%type932 %%value933 %%e934 %%w935 %%ae936) ((lambda (%%t937) (if (memv %%t937 '(begin-form)) ((lambda (%%forms938) (if (null? %%forms938) (%%chi-void455) (%%chi-top-sequence382 %%forms938 %%r924 %%w935 %%ae936 %%ctem926 %%rtem927 %%meta?928 %%top-ribcage929 %%meta-residualize!930))) (%%parse-begin452 %%e934 %%w935 %%ae936 #t)) (if (memv %%t937 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax454 %%value933 %%e934 %%r924 %%r924 %%w935 %%ae936)) (lambda (%%forms939 %%r940 %%mr941 %%w942 %%ae943) (%%chi-top-sequence382 %%forms939 %%r940 %%w942 %%ae943 %%ctem926 %%rtem927 %%meta?928 %%top-ribcage929 %%meta-residualize!930))) (if (memv %%t937 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when450 %%e934 %%w935 %%ae936)) (lambda (%%when-list944 %%forms945) ((lambda (%%ctem946 %%rtem947) (if (if (null? %%ctem946) (null? %%rtem947) #f) (%%chi-void455) (%%chi-top-sequence382 %%forms945 %%r924 %%w935 %%ae936 %%ctem946 %%rtem947 %%meta?928 %%top-ribcage929 %%meta-residualize!930))) (%%update-mode-set427 %%when-list944 %%ctem926) (%%update-mode-set427 %%when-list944 %%rtem927)))) (if (memv %%t937 '(meta-form)) (%%chi-top383 (%%parse-meta449 %%e934 %%w935 %%ae936) %%r924 %%w935 %%ctem926 %%rtem927 #t %%top-ribcage929 %%meta-residualize!930 #t) (if (memv %%t937 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax448 %%e934 %%w935 %%ae936)) (lambda (%%id948 %%rhs949 %%w950) ((lambda (%%id951) (begin (if (%%displaced-lexical?217 %%id951 %%r924) (%%displaced-lexical-error218 %%id951) (void)) (if (not (%%top-ribcage-mutable?309 %%top-ribcage929)) (syntax-error (%%source-wrap378 %%e934 %%w950 %%ae936) "invalid definition in read-only environment") (void)) ((lambda (%%sym952) (call-with-values (lambda () (%%top-id-bound-var-name363 %%sym952 (%%wrap-marks235 (%%syntax-object-wrap42 %%id951)) %%top-ribcage929)) (lambda (%%valsym953 %%bound-id954) (begin (if (not (eq? (%%id-var-name368 %%id951 '(())) %%valsym953)) (syntax-error (%%source-wrap378 %%e934 %%w950 %%ae936) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym953) (syntax-error (%%source-wrap378 %%e934 %%w950 %%ae936) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2430 %%ctem926 (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%bound-id954)) (%%chi435 %%rhs949 %%r924 %%r924 %%w950 #t) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage929))))))))))) ((lambda (%%x955) ((lambda (%%e956) (if (annotation? %%e956) (annotation-expression %%e956) %%e956)) (if (%%syntax-object?40 %%x955) (%%syntax-object-expression41 %%x955) %%x955))) %%id951)))) (%%wrap377 %%id948 %%w950)))) (if (memv %%t937 '(define-form)) (call-with-values (lambda () (%%parse-define447 %%e934 %%w935 %%ae936)) (lambda (%%id957 %%rhs958 %%w959) ((lambda (%%id960) (begin (if (%%displaced-lexical?217 %%id960 %%r924) (%%displaced-lexical-error218 %%id960) (void)) (if (not (%%top-ribcage-mutable?309 %%top-ribcage929)) (syntax-error (%%source-wrap378 %%e934 %%w959 %%ae936) "invalid definition in read-only environment") (void)) ((lambda (%%sym961) (call-with-values (lambda () (%%top-id-bound-var-name363 %%sym961 (%%wrap-marks235 (%%syntax-object-wrap42 %%id960)) %%top-ribcage929)) (lambda (%%valsym962 %%bound-id963) (begin (if (not (eq? (%%id-var-name368 %%id960 '(())) %%valsym962)) (syntax-error (%%source-wrap378 %%e934 %%w959 %%ae936) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym962) (syntax-error (%%source-wrap378 %%e934 %%w959 %%ae936) "invalid definition of read-only identifier") (void)) (if %%meta?928 (%%ct-eval/residualize2430 %%ctem926 (lambda () (%%build-sequence154 #f (list (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%bound-id963)) ((lambda (%%x964) (if (self-eval? (cons 'meta-variable %%valsym962)) %%x964 (build-source #f (list (build-source #f 'quote) %%x964)))) (attach-source #f (cons 'meta-variable %%valsym962))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage929))))) (build-source %%ae936 (list (build-source %%ae936 'define) %%valsym962 (%%chi435 %%rhs958 %%r924 %%r924 %%w959 #t))))))) ((lambda (%%x965) (%%build-sequence154 #f (list %%x965 (%%rt-eval/residualize429 %%rtem927 (lambda () (build-source %%ae936 (list (build-source %%ae936 'define) %%valsym962 (%%chi435 %%rhs958 %%r924 %%r924 %%w959 #f)))))))) (%%ct-eval/residualize2430 %%ctem926 (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%bound-id963)) ((lambda (%%x966) (if (self-eval? (cons 'global %%valsym962)) %%x966 (build-source #f (list (build-source #f 'quote) %%x966)))) (attach-source #f (cons 'global %%valsym962))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage929))))))))))))) ((lambda (%%x967) ((lambda (%%e968) (if (annotation? %%e968) (annotation-expression %%e968) %%e968)) (if (%%syntax-object?40 %%x967) (%%syntax-object-expression41 %%x967) %%x967))) %%id960)))) (%%wrap377 %%id957 %%w959)))) (if (memv %%t937 '($module-form)) ((lambda (%%ribcage969) (call-with-values (lambda () (%%parse-module445 %%e934 %%w935 %%ae936 (%%make-wrap234 (%%wrap-marks235 %%w935) (cons %%ribcage969 (%%wrap-subst236 %%w935))))) (lambda (%%orig970 %%id971 %%exports972 %%forms973) (begin (if (%%displaced-lexical?217 %%id971 %%r924) (%%displaced-lexical-error218 (%%wrap377 %%id971 %%w935)) (void)) (if (not (%%top-ribcage-mutable?309 %%top-ribcage929)) (syntax-error %%orig970 "invalid definition in read-only environment") (void)) (%%chi-top-module419 %%orig970 %%r924 %%r924 %%top-ribcage929 %%ribcage969 %%ctem926 %%rtem927 %%meta?928 %%id971 %%exports972 %%forms973 %%meta-residualize!930))))) (%%make-ribcage285 '() '() '())) (if (memv %%t937 '($import-form)) (call-with-values (lambda () (%%parse-import446 %%e934 %%w935 %%ae936)) (lambda (%%orig974 %%only?975 %%mid976) (begin (if (not (%%top-ribcage-mutable?309 %%top-ribcage929)) (syntax-error %%orig974 "invalid definition in read-only environment") (void)) (%%ct-eval/residualize2430 %%ctem926 (lambda () ((lambda (%%binding977) ((lambda (%%t978) (if (memv %%t978 '($module)) (%%do-top-import426 %%only?975 %%top-ribcage929 %%mid976 (%%interface-token392 (%%binding-value201 %%binding977))) (if (memv %%t978 '(displaced-lexical)) (%%displaced-lexical-error218 %%mid976) (syntax-error %%mid976 "unknown module")))) (%%binding-type200 %%binding977))) (%%lookup220 (%%id-var-name368 %%mid976 '(())) '()))))))) (if (memv %%t937 '(alias-form)) (call-with-values (lambda () (%%parse-alias451 %%e934 %%w935 %%ae936)) (lambda (%%new-id979 %%old-id980) ((lambda (%%new-id981) (begin (if (%%displaced-lexical?217 %%new-id981 %%r924) (%%displaced-lexical-error218 %%new-id981) (void)) (if (not (%%top-ribcage-mutable?309 %%top-ribcage929)) (syntax-error (%%source-wrap378 %%e934 %%w935 %%ae936) "invalid definition in read-only environment") (void)) ((lambda (%%sym982) (call-with-values (lambda () (%%top-id-bound-var-name363 %%sym982 (%%wrap-marks235 (%%syntax-object-wrap42 %%new-id981)) %%top-ribcage929)) (lambda (%%valsym983 %%bound-id984) (begin (if (not (eq? (%%id-var-name368 %%new-id981 '(())) %%valsym983)) (syntax-error (%%source-wrap378 %%e934 %%w935 %%ae936) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym983) (syntax-error (%%source-wrap378 %%e934 %%w935 %%ae936) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2430 %%ctem926 (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) (%%make-resolved-id352 %%sym982 (%%wrap-marks235 (%%syntax-object-wrap42 %%new-id981)) (%%id-var-name368 %%old-id980 %%w935)))) ((lambda (%%x985) (if (self-eval? '(do-alias . #f)) %%x985 (build-source #f (list (build-source #f 'quote) %%x985)))) (attach-source #f '(do-alias . #f))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage929))))))))))) ((lambda (%%x986) ((lambda (%%e987) (if (annotation? %%e987) (annotation-expression %%e987) %%e987)) (if (%%syntax-object?40 %%x986) (%%syntax-object-expression41 %%x986) %%x986))) %%new-id981)))) (%%wrap377 %%new-id979 %%w935)))) (begin (if %%meta-seen?931 (syntax-error (%%source-wrap378 %%e934 %%w935 %%ae936) "invalid meta definition") (void)) (if %%meta?928 ((lambda (%%x988) (begin (%%top-level-eval-hook43 %%x988) (%%ct-eval/residualize3431 %%ctem926 void (lambda () %%x988)))) (%%chi-expr436 %%type932 %%value933 %%e934 %%r924 %%r924 %%w935 %%ae936 #t)) (%%rt-eval/residualize429 %%rtem927 (lambda () (%%chi-expr436 %%type932 %%value933 %%e934 %%r924 %%r924 %%w935 %%ae936 #f))))))))))))))) %%type932))))) (%%flatten-exports384 (lambda (%%exports989) ((letrec ((%%loop990 (lambda (%%exports991 %%ls992) (if (null? %%exports991) %%ls992 (%%loop990 (cdr %%exports991) (if (pair? (car %%exports991)) (%%loop990 (car %%exports991) %%ls992) (cons (car %%exports991) %%ls992))))))) %%loop990) %%exports989 '()))) (%%##type-3-interface385 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-3-interface") 'interface 8 #f '#(marks 0 #f exports 0 #f token 0 #f))) (%%make-interface386 (lambda (%%p1993 %%p2994 %%p3995) (begin (##declare (extended-bindings)) (##structure %%##type-3-interface385 %%p1993 %%p2994 %%p3995)))) (%%interface?387 (lambda (%%obj996) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj996 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-3-interface385)))))))) (%%interface-marks388 (lambda (%%obj997) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj997 1 %%##type-3-interface385 %%interface-marks388))) (%%interface-marks-set!389 (lambda (%%obj998 %%val999) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj998 %%val999 1 %%##type-3-interface385 %%interface-marks-set!389))) (%%interface-exports390 (lambda (%%obj1000) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1000 2 %%##type-3-interface385 %%interface-exports390))) (%%interface-exports-set!391 (lambda (%%obj1001 %%val1002) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1001 %%val1002 2 %%##type-3-interface385 %%interface-exports-set!391))) (%%interface-token392 (lambda (%%obj1003) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1003 3 %%##type-3-interface385 %%interface-token392))) (%%interface-token-set!393 (lambda (%%obj1004 %%val1005) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1004 %%val1005 3 %%##type-3-interface385 %%interface-token-set!393))) (%%make-unresolved-interface394 (lambda (%%mid1006 %%exports1007) (%%make-interface386 (%%wrap-marks235 (%%syntax-object-wrap42 %%mid1006)) (list->vector (map (lambda (%%x1008) (if (pair? %%x1008) (car %%x1008) %%x1008)) %%exports1007)) #f))) (%%make-resolved-interface395 (lambda (%%mid1009 %%exports1010 %%token1011) (%%make-interface386 (%%wrap-marks235 (%%syntax-object-wrap42 %%mid1009)) (list->vector (map (lambda (%%x1012) (%%id->resolved-id353 (if (pair? %%x1012) (car %%x1012) %%x1012))) %%exports1010)) %%token1011))) (%%##type-6-module-binding396 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-6-module-binding") 'module-binding 8 #f '#(type 0 #f id 0 #f label 0 #f imps 0 #f val 0 #f exported 0 #f))) (%%make-module-binding397 (lambda (%%p11013 %%p21014 %%p31015 %%p41016 %%p51017 %%p61018) (begin (##declare (extended-bindings)) (##structure %%##type-6-module-binding396 %%p11013 %%p21014 %%p31015 %%p41016 %%p51017 %%p61018)))) (%%module-binding?398 (lambda (%%obj1019) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj1019 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-6-module-binding396)))))))) (%%module-binding-type399 (lambda (%%obj1020) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1020 1 %%##type-6-module-binding396 %%module-binding-type399))) (%%module-binding-type-set!400 (lambda (%%obj1021 %%val1022) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1021 %%val1022 1 %%##type-6-module-binding396 %%module-binding-type-set!400))) (%%module-binding-id401 (lambda (%%obj1023) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1023 2 %%##type-6-module-binding396 %%module-binding-id401))) (%%module-binding-id-set!402 (lambda (%%obj1024 %%val1025) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1024 %%val1025 2 %%##type-6-module-binding396 %%module-binding-id-set!402))) (%%module-binding-label403 (lambda (%%obj1026) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1026 3 %%##type-6-module-binding396 %%module-binding-label403))) (%%module-binding-label-set!404 (lambda (%%obj1027 %%val1028) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1027 %%val1028 3 %%##type-6-module-binding396 %%module-binding-label-set!404))) (%%module-binding-imps405 (lambda (%%obj1029) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1029 4 %%##type-6-module-binding396 %%module-binding-imps405))) (%%module-binding-imps-set!406 (lambda (%%obj1030 %%val1031) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1030 %%val1031 4 %%##type-6-module-binding396 %%module-binding-imps-set!406))) (%%module-binding-val407 (lambda (%%obj1032) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1032 5 %%##type-6-module-binding396 %%module-binding-val407))) (%%module-binding-val-set!408 (lambda (%%obj1033 %%val1034) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1033 %%val1034 5 %%##type-6-module-binding396 %%module-binding-val-set!408))) (%%module-binding-exported409 (lambda (%%obj1035) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1035 6 %%##type-6-module-binding396 %%module-binding-exported409))) (%%module-binding-exported-set!410 (lambda (%%obj1036 %%val1037) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1036 %%val1037 6 %%##type-6-module-binding396 %%module-binding-exported-set!410))) (%%create-module-binding411 (lambda (%%type1038 %%id1039 %%label1040 %%imps1041 %%val1042) (%%make-module-binding397 %%type1038 %%id1039 %%label1040 %%imps1041 %%val1042 #f))) (%%##type-2-frob412 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-frob") 'frob 8 #f '#(e 0 #f meta? 0 #f))) (%%make-frob413 (lambda (%%p11043 %%p21044) (begin (##declare (extended-bindings)) (##structure %%##type-2-frob412 %%p11043 %%p21044)))) (%%frob?414 (lambda (%%obj1045) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj1045 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-frob412)))))))) (%%frob-e415 (lambda (%%obj1046) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1046 1 %%##type-2-frob412 %%frob-e415))) (%%frob-e-set!416 (lambda (%%obj1047 %%val1048) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1047 %%val1048 1 %%##type-2-frob412 %%frob-e-set!416))) (%%frob-meta?417 (lambda (%%obj1049) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1049 2 %%##type-2-frob412 %%frob-meta?417))) (%%frob-meta?-set!418 (lambda (%%obj1050 %%val1051) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1050 %%val1051 2 %%##type-2-frob412 %%frob-meta?-set!418))) (%%chi-top-module419 (lambda (%%orig1052 %%r1053 %%mr1054 %%top-ribcage1055 %%ribcage1056 %%ctem1057 %%rtem1058 %%meta?1059 %%id1060 %%exports1061 %%forms1062 %%meta-residualize!1063) ((lambda (%%fexports1064) (call-with-values (lambda () (%%chi-external423 %%ribcage1056 %%orig1052 (map (lambda (%%d1065) (%%make-frob413 %%d1065 %%meta?1059)) %%forms1062) %%r1053 %%mr1054 %%ctem1057 %%exports1061 %%fexports1064 %%meta-residualize!1063)) (lambda (%%r1066 %%mr1067 %%bindings1068 %%inits1069) ((letrec ((%%process-exports1070 (lambda (%%fexports1071 %%ctdefs1072) (if (null? %%fexports1071) ((letrec ((%%process-locals1073 (lambda (%%bs1074 %%r1075 %%dts1076 %%dvs1077 %%des1078) (if (null? %%bs1074) ((lambda (%%des1079 %%inits1080) (%%build-sequence154 #f (append (%%ctdefs1072) (list (%%ct-eval/residualize2430 %%ctem1057 (lambda () ((lambda (%%sym1081) ((lambda (%%token1082) ((lambda (%%b1083) ((lambda () (call-with-values (lambda () (%%top-id-bound-var-name363 %%sym1081 (%%wrap-marks235 (%%syntax-object-wrap42 %%id1060)) %%top-ribcage1055)) (lambda (%%valsym1084 %%bound-id1085) (begin (if (not (eq? (%%id-var-name368 %%id1060 '(())) %%valsym1084)) (syntax-error %%orig1052 "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym1084) (syntax-error %%orig1052 "invalid definition of read-only identifier") (void)) (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%bound-id1085)) %%b1083 (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage1055))))))))))) ((lambda (%%x1086) (if (self-eval? (cons '$module (%%make-resolved-interface395 %%id1060 %%exports1061 %%token1082))) %%x1086 (build-source #f (list (build-source #f 'quote) %%x1086)))) (attach-source #f (cons '$module (%%make-resolved-interface395 %%id1060 %%exports1061 %%token1082)))))) (%%generate-id52 %%sym1081))) ((lambda (%%x1087) ((lambda (%%e1088) (if (annotation? %%e1088) (annotation-expression %%e1088) %%e1088)) (if (%%syntax-object?40 %%x1087) (%%syntax-object-expression41 %%x1087) %%x1087))) %%id1060)))) (%%rt-eval/residualize429 %%rtem1058 (lambda () (%%build-top-module157 #f %%dts1076 %%dvs1077 %%des1079 (if (null? %%inits1080) (%%chi-void455) (%%build-sequence154 #f (append %%inits1080 (list (%%chi-void455)))))))))))) (%%chi-frobs432 %%des1078 %%r1075 %%mr1067 #f) (%%chi-frobs432 %%inits1069 %%r1075 %%mr1067 #f)) ((lambda (%%b1089 %%bs1090) ((lambda (%%t1091) ((lambda (%%t1092) (if (memv %%t1092 '(define-form)) ((lambda (%%label1093) (if (%%module-binding-exported409 %%b1089) ((lambda (%%var1094) (%%process-locals1073 %%bs1090 %%r1075 (cons 'global %%dts1076) (cons %%label1093 %%dvs1077) (cons (%%module-binding-val407 %%b1089) %%des1078))) (%%module-binding-id401 %%b1089)) ((lambda (%%var1095) (%%process-locals1073 %%bs1090 (%%extend-env214 %%label1093 (cons 'lexical %%var1095) %%r1075) (cons 'local %%dts1076) (cons %%var1095 %%dvs1077) (cons (%%module-binding-val407 %%b1089) %%des1078))) (%%gen-var460 (%%module-binding-id401 %%b1089))))) (%%get-indirect-label280 (%%module-binding-label403 %%b1089))) (if (memv %%t1092 '(ctdefine-form define-syntax-form $module-form alias-form)) (%%process-locals1073 %%bs1090 %%r1075 %%dts1076 %%dvs1077 %%des1078) (error "unexpected module binding type" %%t1091)))) (%%module-binding-type399 %%b1089))) (%%module-binding-type399 %%b1089))) (car %%bs1074) (cdr %%bs1074)))))) %%process-locals1073) %%bindings1068 %%r1066 '() '() '()) ((lambda (%%id1096 %%fexports1097) ((letrec ((%%loop1098 (lambda (%%bs1099) (if (null? %%bs1099) (%%process-exports1070 %%fexports1097 %%ctdefs1072) ((lambda (%%b1100 %%bs1101) (if (%%free-id=?369 (%%module-binding-id401 %%b1100) %%id1096) (if (%%module-binding-exported409 %%b1100) (%%process-exports1070 %%fexports1097 %%ctdefs1072) ((lambda (%%t1102) ((lambda (%%label1103) ((lambda (%%imps1104) ((lambda (%%fexports1105) ((lambda () (begin (set-module-binding-exported! %%b1100 #t) ((lambda (%%t1106) (if (memv %%t1106 '(define-form)) ((lambda (%%sym1107) (begin (%%set-indirect-label!281 %%label1103 %%sym1107) (%%process-exports1070 %%fexports1105 %%ctdefs1072))) (%%generate-id52 ((lambda (%%x1108) ((lambda (%%e1109) (if (annotation? %%e1109) (annotation-expression %%e1109) %%e1109)) (if (%%syntax-object?40 %%x1108) (%%syntax-object-expression41 %%x1108) %%x1108))) %%id1096))) (if (memv %%t1106 '(ctdefine-form)) ((lambda (%%b1110) (%%process-exports1070 %%fexports1105 (lambda () ((lambda (%%sym1111) (begin (%%set-indirect-label!281 %%label1103 %%sym1111) (cons (%%ct-eval/residualize3431 %%ctem1057 (lambda () (%%put-cte-hook46 %%sym1111 %%b1110)) (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%sym1111)) ((lambda (%%x1112) (if (self-eval? %%b1110) %%x1112 (build-source #f (list (build-source #f 'quote) %%x1112)))) (attach-source #f %%b1110)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1072)))) (%%binding-value201 %%b1110))))) (%%module-binding-val407 %%b1100)) (if (memv %%t1106 '(define-syntax-form)) ((lambda (%%sym1113) (%%process-exports1070 %%fexports1105 (lambda () ((lambda (%%local-label1114) (begin (%%set-indirect-label!281 %%label1103 %%sym1113) (cons (%%ct-eval/residualize3431 %%ctem1057 (lambda () (%%put-cte-hook46 %%sym1113 (car (%%module-binding-val407 %%b1100)))) (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%sym1113)) (cdr (%%module-binding-val407 %%b1100)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1072)))) (%%get-indirect-label280 %%label1103))))) (%%generate-id52 ((lambda (%%x1115) ((lambda (%%e1116) (if (annotation? %%e1116) (annotation-expression %%e1116) %%e1116)) (if (%%syntax-object?40 %%x1115) (%%syntax-object-expression41 %%x1115) %%x1115))) %%id1096))) (if (memv %%t1106 '($module-form)) ((lambda (%%sym1117 %%exports1118) (%%process-exports1070 (append (%%flatten-exports384 %%exports1118) %%fexports1105) (lambda () (begin (%%set-indirect-label!281 %%label1103 %%sym1117) ((lambda (%%rest1119) ((lambda (%%x1120) (cons (%%ct-eval/residualize3431 %%ctem1057 (lambda () (%%put-cte-hook46 %%sym1117 %%x1120)) (lambda () (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%sym1117)) ((lambda (%%x1121) (if (self-eval? %%x1120) %%x1121 (build-source #f (list (build-source #f 'quote) %%x1121)))) (attach-source #f %%x1120)) (build-source #f (list (build-source #f 'quote) #f)))))) %%rest1119)) (cons '$module (%%make-resolved-interface395 %%id1096 %%exports1118 %%sym1117)))) (%%ctdefs1072)))))) (%%generate-id52 ((lambda (%%x1122) ((lambda (%%e1123) (if (annotation? %%e1123) (annotation-expression %%e1123) %%e1123)) (if (%%syntax-object?40 %%x1122) (%%syntax-object-expression41 %%x1122) %%x1122))) %%id1096)) (%%module-binding-val407 %%b1100)) (if (memv %%t1106 '(alias-form)) (%%process-exports1070 %%fexports1105 (lambda () ((lambda (%%rest1124) (begin (if (%%indirect-label?276 %%label1103) (if (not (symbol? (%%get-indirect-label280 %%label1103))) (syntax-error (%%module-binding-id401 %%b1100) "unexported target of alias") (void)) (void)) %%rest1124)) (%%ctdefs1072)))) (error "unexpected module binding type" %%t1102))))))) %%t1102))))) (append %%imps1104 %%fexports1097))) (%%module-binding-imps405 %%b1100))) (%%module-binding-label403 %%b1100))) (%%module-binding-type399 %%b1100))) (%%loop1098 %%bs1101))) (car %%bs1099) (cdr %%bs1099)))))) %%loop1098) %%bindings1068)) (car %%fexports1071) (cdr %%fexports1071)))))) %%process-exports1070) %%fexports1064 (lambda () '()))))) (%%flatten-exports384 %%exports1061)))) (%%id-set-diff420 (lambda (%%exports1125 %%defs1126) (if (null? %%exports1125) '() (if (%%bound-id-member?376 (car %%exports1125) %%defs1126) (%%id-set-diff420 (cdr %%exports1125) %%defs1126) (cons (car %%exports1125) (%%id-set-diff420 (cdr %%exports1125) %%defs1126)))))) (%%check-module-exports421 (lambda (%%source-exp1127 %%fexports1128 %%ids1129) (letrec ((%%defined?1130 (lambda (%%e1131 %%ids1132) (ormap (lambda (%%x1133) (if (%%import-interface?313 %%x1133) ((lambda (%%x.iface1134 %%x.new-marks1135) ((lambda (%%t1136) (if %%t1136 ((lambda (%%token1137) (%%lookup-import-binding-name349 ((lambda (%%x1138) ((lambda (%%e1139) (if (annotation? %%e1139) (annotation-expression %%e1139) %%e1139)) (if (%%syntax-object?40 %%x1138) (%%syntax-object-expression41 %%x1138) %%x1138))) %%e1131) (%%id-marks231 %%e1131) %%token1137 %%x.new-marks1135)) %%t1136) ((lambda (%%v1140) ((letrec ((%%lp1141 (lambda (%%i1142) (if (fx>= %%i1142 0) ((lambda (%%t1143) (if %%t1143 %%t1143 (%%lp1141 (fx- %%i1142 1)))) ((lambda (%%id1144) (%%help-bound-id=?371 ((lambda (%%x1145) ((lambda (%%e1146) (if (annotation? %%e1146) (annotation-expression %%e1146) %%e1146)) (if (%%syntax-object?40 %%x1145) (%%syntax-object-expression41 %%x1145) %%x1145))) %%id1144) (%%join-marks357 %%x.new-marks1135 (%%id-marks231 %%id1144)) ((lambda (%%x1147) ((lambda (%%e1148) (if (annotation? %%e1148) (annotation-expression %%e1148) %%e1148)) (if (%%syntax-object?40 %%x1147) (%%syntax-object-expression41 %%x1147) %%x1147))) %%e1131) (%%id-marks231 %%e1131))) (vector-ref %%v1140 %%i1142))) #f)))) %%lp1141) (fx- (vector-length %%v1140) 1))) (%%interface-exports390 %%x.iface1134)))) (%%interface-token392 %%x.iface1134))) (%%import-interface-interface314 %%x1133) (%%import-interface-new-marks316 %%x1133)) (%%bound-id=?372 %%e1131 %%x1133))) %%ids1132)))) ((letrec ((%%loop1149 (lambda (%%fexports1150 %%missing1151) (if (null? %%fexports1150) (if (not (null? %%missing1151)) (syntax-error (car %%missing1151) (if (= (length %%missing1151) 1) "missing definition for export" "missing definition for multiple exports, including")) (void)) ((lambda (%%e1152 %%fexports1153) (if (%%defined?1130 %%e1152 %%ids1129) (%%loop1149 %%fexports1153 %%missing1151) (%%loop1149 %%fexports1153 (cons %%e1152 %%missing1151)))) (car %%fexports1150) (cdr %%fexports1150)))))) %%loop1149) %%fexports1128 '())))) (%%check-defined-ids422 (lambda (%%source-exp1154 %%ls1155) (letrec ((%%vfold1156 (lambda (%%v1159 %%p1160 %%cls1161) ((lambda (%%len1162) ((letrec ((%%lp1163 (lambda (%%i1164 %%cls1165) (if (fx= %%i1164 %%len1162) %%cls1165 (%%lp1163 (fx+ %%i1164 1) (%%p1160 (vector-ref %%v1159 %%i1164) %%cls1165)))))) %%lp1163) 0 %%cls1161)) (vector-length %%v1159)))) (%%conflicts1157 (lambda (%%x1166 %%y1167 %%cls1168) (if (%%import-interface?313 %%x1166) ((lambda (%%x.iface1169 %%x.new-marks1170) (if (%%import-interface?313 %%y1167) ((lambda (%%y.iface1171 %%y.new-marks1172) ((lambda (%%xe1173 %%ye1174) (if (fx> (vector-length %%xe1173) (vector-length %%ye1174)) (%%vfold1156 %%ye1174 (lambda (%%id1175 %%cls1176) (%%id-iface-conflicts1158 %%id1175 %%y.new-marks1172 %%x.iface1169 %%x.new-marks1170 %%cls1176)) %%cls1168) (%%vfold1156 %%xe1173 (lambda (%%id1177 %%cls1178) (%%id-iface-conflicts1158 %%id1177 %%x.new-marks1170 %%y.iface1171 %%y.new-marks1172 %%cls1178)) %%cls1168))) (%%interface-exports390 %%x.iface1169) (%%interface-exports390 %%y.iface1171))) (%%import-interface-interface314 %%y1167) (%%import-interface-new-marks316 %%y1167)) (%%id-iface-conflicts1158 %%y1167 '() %%x.iface1169 %%x.new-marks1170 %%cls1168))) (%%import-interface-interface314 %%x1166) (%%import-interface-new-marks316 %%x1166)) (if (%%import-interface?313 %%y1167) ((lambda (%%y.iface1179 %%y.new-marks1180) (%%id-iface-conflicts1158 %%x1166 '() %%y.iface1179 %%y.new-marks1180 %%cls1168)) (%%import-interface-interface314 %%y1167) (%%import-interface-new-marks316 %%y1167)) (if (%%bound-id=?372 %%x1166 %%y1167) (cons %%x1166 %%cls1168) %%cls1168))))) (%%id-iface-conflicts1158 (lambda (%%id1181 %%id.new-marks1182 %%iface1183 %%iface.new-marks1184 %%cls1185) ((lambda (%%id.sym1186 %%id.marks1187) ((lambda (%%t1188) (if %%t1188 ((lambda (%%token1189) (if (%%lookup-import-binding-name349 %%id.sym1186 %%id.marks1187 %%token1189 %%iface.new-marks1184) (cons %%id1181 %%cls1185) %%cls1185)) %%t1188) (%%vfold1156 (%%interface-exports390 %%iface1183) (lambda (%%*id1190 %%cls1191) ((lambda (%%*id.sym1192 %%*id.marks1193) (if (%%help-bound-id=?371 %%*id.sym1192 %%*id.marks1193 %%id.sym1186 %%id.marks1187) (cons %%*id1190 %%cls1191) %%cls1191)) ((lambda (%%x1194) ((lambda (%%e1195) (if (annotation? %%e1195) (annotation-expression %%e1195) %%e1195)) (if (%%syntax-object?40 %%x1194) (%%syntax-object-expression41 %%x1194) %%x1194))) %%*id1190) (%%join-marks357 %%iface.new-marks1184 (%%id-marks231 %%*id1190)))) %%cls1185))) (%%interface-token392 %%iface1183))) ((lambda (%%x1196) ((lambda (%%e1197) (if (annotation? %%e1197) (annotation-expression %%e1197) %%e1197)) (if (%%syntax-object?40 %%x1196) (%%syntax-object-expression41 %%x1196) %%x1196))) %%id1181) (%%join-marks357 %%id.new-marks1182 (%%id-marks231 %%id1181)))))) (if (not (null? %%ls1155)) ((letrec ((%%lp1198 (lambda (%%x1199 %%ls1200 %%cls1201) (if (null? %%ls1200) (if (not (null? %%cls1201)) ((lambda (%%cls1202) (syntax-error %%source-exp1154 "duplicate definition for " (symbol->string (car %%cls1202)) " in")) (syntax-object->datum %%cls1201)) (void)) ((letrec ((%%lp21203 (lambda (%%ls21204 %%cls1205) (if (null? %%ls21204) (%%lp1198 (car %%ls1200) (cdr %%ls1200) %%cls1205) (%%lp21203 (cdr %%ls21204) (%%conflicts1157 %%x1199 (car %%ls21204) %%cls1205)))))) %%lp21203) %%ls1200 %%cls1201))))) %%lp1198) (car %%ls1155) (cdr %%ls1155) '()) (void))))) (%%chi-external423 (lambda (%%ribcage1206 %%source-exp1207 %%body1208 %%r1209 %%mr1210 %%ctem1211 %%exports1212 %%fexports1213 %%meta-residualize!1214) (letrec ((%%return1215 (lambda (%%r1218 %%mr1219 %%bindings1220 %%ids1221 %%inits1222) (begin (%%check-defined-ids422 %%source-exp1207 %%ids1221) (%%check-module-exports421 %%source-exp1207 %%fexports1213 %%ids1221) (values %%r1218 %%mr1219 %%bindings1220 %%inits1222)))) (%%get-implicit-exports1216 (lambda (%%id1223) ((letrec ((%%f1224 (lambda (%%exports1225) (if (null? %%exports1225) '() (if (if (pair? (car %%exports1225)) (%%bound-id=?372 %%id1223 (caar %%exports1225)) #f) (%%flatten-exports384 (cdar %%exports1225)) (%%f1224 (cdr %%exports1225))))))) %%f1224) %%exports1212))) (%%update-imp-exports1217 (lambda (%%bindings1226 %%exports1227) ((lambda (%%exports1228) (map (lambda (%%b1229) ((lambda (%%id1230) (if (not (%%bound-id-member?376 %%id1230 %%exports1228)) %%b1229 (%%create-module-binding411 (%%module-binding-type399 %%b1229) %%id1230 (%%module-binding-label403 %%b1229) (append (%%get-implicit-exports1216 %%id1230) (%%module-binding-imps405 %%b1229)) (%%module-binding-val407 %%b1229)))) (%%module-binding-id401 %%b1229))) %%bindings1226)) (map (lambda (%%x1231) (if (pair? %%x1231) (car %%x1231) %%x1231)) %%exports1227))))) ((letrec ((%%parse1232 (lambda (%%body1233 %%r1234 %%mr1235 %%ids1236 %%bindings1237 %%inits1238 %%meta-seen?1239) (if (null? %%body1233) (%%return1215 %%r1234 %%mr1235 %%bindings1237 %%ids1236 %%inits1238) ((lambda (%%fr1240) ((lambda (%%e1241) ((lambda (%%meta?1242) ((lambda () (call-with-values (lambda () (%%syntax-type380 %%e1241 %%r1234 '(()) #f %%ribcage1206)) (lambda (%%type1243 %%value1244 %%e1245 %%w1246 %%ae1247) ((lambda (%%t1248) (if (memv %%t1248 '(define-form)) (call-with-values (lambda () (%%parse-define447 %%e1245 %%w1246 %%ae1247)) (lambda (%%id1249 %%rhs1250 %%w1251) ((lambda (%%id1252) ((lambda (%%label1253) ((lambda (%%imps1254) ((lambda () (begin (%%extend-ribcage!344 %%ribcage1206 %%id1252 %%label1253) (if %%meta?1242 ((lambda (%%sym1255) ((lambda (%%b1256) ((lambda () ((lambda (%%mr1257) ((lambda (%%exp1258) (begin (%%define-top-level-value-hook45 %%sym1255 (%%top-level-eval-hook43 %%exp1258)) (%%meta-residualize!1214 (%%ct-eval/residualize3431 %%ctem1211 void (lambda () (build-source #f (list (build-source #f 'define) %%sym1255 %%exp1258))))) (%%parse1232 (cdr %%body1233) %%r1234 %%mr1257 (cons %%id1252 %%ids1236) (cons (%%create-module-binding411 'ctdefine-form %%id1252 %%label1253 %%imps1254 %%b1256) %%bindings1237) %%inits1238 #f))) (%%chi435 %%rhs1250 %%mr1257 %%mr1257 %%w1251 #t))) (%%extend-env214 (%%get-indirect-label280 %%label1253) %%b1256 %%mr1235))))) (cons 'meta-variable %%sym1255))) (%%generate-id52 ((lambda (%%x1259) ((lambda (%%e1260) (if (annotation? %%e1260) (annotation-expression %%e1260) %%e1260)) (if (%%syntax-object?40 %%x1259) (%%syntax-object-expression41 %%x1259) %%x1259))) %%id1252))) (%%parse1232 (cdr %%body1233) %%r1234 %%mr1235 (cons %%id1252 %%ids1236) (cons (%%create-module-binding411 %%type1243 %%id1252 %%label1253 %%imps1254 (%%make-frob413 (%%wrap377 %%rhs1250 %%w1251) %%meta?1242)) %%bindings1237) %%inits1238 #f)))))) (%%get-implicit-exports1216 %%id1252))) (%%gen-indirect-label279))) (%%wrap377 %%id1249 %%w1251)))) (if (memv %%t1248 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax448 %%e1245 %%w1246 %%ae1247)) (lambda (%%id1261 %%rhs1262 %%w1263) ((lambda (%%id1264) ((lambda (%%label1265) ((lambda (%%imps1266) ((lambda (%%exp1267) ((lambda () (begin (%%extend-ribcage!344 %%ribcage1206 %%id1264 %%label1265) ((lambda (%%l1268 %%b1269) (%%parse1232 (cdr %%body1233) (%%extend-env214 %%l1268 %%b1269 %%r1234) (%%extend-env214 %%l1268 %%b1269 %%mr1235) (cons %%id1264 %%ids1236) (cons (%%create-module-binding411 %%type1243 %%id1264 %%label1265 %%imps1266 (cons %%b1269 %%exp1267)) %%bindings1237) %%inits1238 #f)) (%%get-indirect-label280 %%label1265) (%%defer-or-eval-transformer222 %%top-level-eval-hook43 %%exp1267)))))) (%%chi435 %%rhs1262 %%mr1235 %%mr1235 %%w1263 #t))) (%%get-implicit-exports1216 %%id1264))) (%%gen-indirect-label279))) (%%wrap377 %%id1261 %%w1263)))) (if (memv %%t1248 '($module-form)) ((lambda (%%*ribcage1270) ((lambda (%%*w1271) ((lambda () (call-with-values (lambda () (%%parse-module445 %%e1245 %%w1246 %%ae1247 %%*w1271)) (lambda (%%orig1272 %%id1273 %%*exports1274 %%forms1275) (call-with-values (lambda () (%%chi-external423 %%*ribcage1270 %%orig1272 (map (lambda (%%d1276) (%%make-frob413 %%d1276 %%meta?1242)) %%forms1275) %%r1234 %%mr1235 %%ctem1211 %%*exports1274 (%%flatten-exports384 %%*exports1274) %%meta-residualize!1214)) (lambda (%%r1277 %%mr1278 %%*bindings1279 %%*inits1280) ((lambda (%%iface1281 %%bindings1282 %%inits1283 %%label1284 %%imps1285) (begin (%%extend-ribcage!344 %%ribcage1206 %%id1273 %%label1284) ((lambda (%%l1286 %%b1287) (%%parse1232 (cdr %%body1233) (%%extend-env214 %%l1286 %%b1287 %%r1277) (%%extend-env214 %%l1286 %%b1287 %%mr1278) (cons %%id1273 %%ids1236) (cons (%%create-module-binding411 %%type1243 %%id1273 %%label1284 %%imps1285 %%*exports1274) %%bindings1282) %%inits1283 #f)) (%%get-indirect-label280 %%label1284) (cons '$module %%iface1281)))) (%%make-unresolved-interface394 %%id1273 %%*exports1274) (append %%*bindings1279 %%bindings1237) (append %%inits1238 %%*inits1280) (%%gen-indirect-label279) (%%get-implicit-exports1216 %%id1273))))))))) (%%make-wrap234 (%%wrap-marks235 %%w1246) (cons %%*ribcage1270 (%%wrap-subst236 %%w1246))))) (%%make-ribcage285 '() '() '())) (if (memv %%t1248 '($import-form)) (call-with-values (lambda () (%%parse-import446 %%e1245 %%w1246 %%ae1247)) (lambda (%%orig1288 %%only?1289 %%mid1290) ((lambda (%%mlabel1291) ((lambda (%%binding1292) ((lambda (%%t1293) (if (memv %%t1293 '($module)) ((lambda (%%iface1294) ((lambda (%%import-iface1295) ((lambda () (begin (if %%only?1289 (%%extend-ribcage-barrier!346 %%ribcage1206 %%mid1290) (void)) (%%do-import!444 %%import-iface1295 %%ribcage1206) (%%parse1232 (cdr %%body1233) %%r1234 %%mr1235 (cons %%import-iface1295 %%ids1236) (%%update-imp-exports1217 %%bindings1237 (vector->list (%%interface-exports390 %%iface1294))) %%inits1238 #f))))) (%%make-import-interface312 %%iface1294 (%%import-mark-delta442 %%mid1290 %%iface1294)))) (%%binding-value201 %%binding1292)) (if (memv %%t1293 '(displaced-lexical)) (%%displaced-lexical-error218 %%mid1290) (syntax-error %%mid1290 "unknown module")))) (%%binding-type200 %%binding1292))) (%%lookup220 %%mlabel1291 %%r1234))) (%%id-var-name368 %%mid1290 '(()))))) (if (memv %%t1248 '(alias-form)) (call-with-values (lambda () (%%parse-alias451 %%e1245 %%w1246 %%ae1247)) (lambda (%%new-id1296 %%old-id1297) ((lambda (%%new-id1298) ((lambda (%%label1299) ((lambda (%%imps1300) ((lambda () (begin (%%extend-ribcage!344 %%ribcage1206 %%new-id1298 %%label1299) (%%parse1232 (cdr %%body1233) %%r1234 %%mr1235 (cons %%new-id1298 %%ids1236) (cons (%%create-module-binding411 %%type1243 %%new-id1298 %%label1299 %%imps1300 #f) %%bindings1237) %%inits1238 #f))))) (%%get-implicit-exports1216 %%new-id1298))) (%%id-var-name-loc367 %%old-id1297 %%w1246))) (%%wrap377 %%new-id1296 %%w1246)))) (if (memv %%t1248 '(begin-form)) (%%parse1232 ((letrec ((%%f1301 (lambda (%%forms1302) (if (null? %%forms1302) (cdr %%body1233) (cons (%%make-frob413 (%%wrap377 (car %%forms1302) %%w1246) %%meta?1242) (%%f1301 (cdr %%forms1302))))))) %%f1301) (%%parse-begin452 %%e1245 %%w1246 %%ae1247 #t)) %%r1234 %%mr1235 %%ids1236 %%bindings1237 %%inits1238 #f) (if (memv %%t1248 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when450 %%e1245 %%w1246 %%ae1247)) (lambda (%%when-list1303 %%forms1304) (%%parse1232 (if (memq 'eval %%when-list1303) ((letrec ((%%f1305 (lambda (%%forms1306) (if (null? %%forms1306) (cdr %%body1233) (cons (%%make-frob413 (%%wrap377 (car %%forms1306) %%w1246) %%meta?1242) (%%f1305 (cdr %%forms1306))))))) %%f1305) %%forms1304) (cdr %%body1233)) %%r1234 %%mr1235 %%ids1236 %%bindings1237 %%inits1238 #f))) (if (memv %%t1248 '(meta-form)) (%%parse1232 (cons (%%make-frob413 (%%wrap377 (%%parse-meta449 %%e1245 %%w1246 %%ae1247) %%w1246) #t) (cdr %%body1233)) %%r1234 %%mr1235 %%ids1236 %%bindings1237 %%inits1238 #t) (if (memv %%t1248 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax454 %%value1244 %%e1245 %%r1234 %%mr1235 %%w1246 %%ae1247)) (lambda (%%forms1307 %%r1308 %%mr1309 %%w1310 %%ae1311) (%%parse1232 ((letrec ((%%f1312 (lambda (%%forms1313) (if (null? %%forms1313) (cdr %%body1233) (cons (%%make-frob413 (%%wrap377 (car %%forms1313) %%w1310) %%meta?1242) (%%f1312 (cdr %%forms1313))))))) %%f1312) %%forms1307) %%r1308 %%mr1309 %%ids1236 %%bindings1237 %%inits1238 #f))) (begin (if %%meta-seen?1239 (syntax-error (%%source-wrap378 %%e1245 %%w1246 %%ae1247) "invalid meta definition") (void)) ((letrec ((%%f1314 (lambda (%%body1315) (if ((lambda (%%t1316) (if %%t1316 %%t1316 (not (%%frob-meta?417 (car %%body1315))))) (null? %%body1315)) (%%return1215 %%r1234 %%mr1235 %%bindings1237 %%ids1236 (append %%inits1238 %%body1315)) (begin ((lambda (%%x1317) (begin (%%top-level-eval-hook43 %%x1317) (%%meta-residualize!1214 (%%ct-eval/residualize3431 %%ctem1211 void (lambda () %%x1317))))) (%%chi-meta-frob433 (car %%body1315) %%mr1235)) (%%f1314 (cdr %%body1315))))))) %%f1314) (cons (%%make-frob413 (%%source-wrap378 %%e1245 %%w1246 %%ae1247) %%meta?1242) (cdr %%body1233)))))))))))))) %%type1243)))))) (%%frob-meta?417 %%fr1240))) (%%frob-e415 %%fr1240))) (car %%body1233)))))) %%parse1232) %%body1208 %%r1209 %%mr1210 '() '() '() #f)))) (%%vmap424 (lambda (%%fn1318 %%v1319) ((letrec ((%%do1320 (lambda (%%i1321 %%ls1322) (if (fx< %%i1321 0) %%ls1322 (%%do1320 (fx- %%i1321 1) (cons (%%fn1318 (vector-ref %%v1319 %%i1321)) %%ls1322)))))) %%do1320) (fx- (vector-length %%v1319) 1) '()))) (%%vfor-each425 (lambda (%%fn1323 %%v1324) ((lambda (%%len1325) ((letrec ((%%do1326 (lambda (%%i1327) (if (not (fx= %%i1327 %%len1325)) (begin (%%fn1323 (vector-ref %%v1324 %%i1327)) (%%do1326 (fx+ %%i1327 1))) (void))))) %%do1326) 0)) (vector-length %%v1324)))) (%%do-top-import426 (lambda (%%import-only?1328 %%top-ribcage1329 %%mid1330 %%token1331) (build-source #f (list (build-source #f '$sc-put-cte) (build-source #f (list (build-source #f 'quote) %%mid1330)) ((lambda (%%x1332) (if (self-eval? (cons 'do-import %%token1331)) %%x1332 (build-source #f (list (build-source #f 'quote) %%x1332)))) (attach-source #f (cons 'do-import %%token1331))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key307 %%top-ribcage1329))))))) (%%update-mode-set427 ((lambda (%%table1333) (lambda (%%when-list1334 %%mode-set1335) (letrec ((%%remq1336 (lambda (%%x1337 %%ls1338) (if (null? %%ls1338) '() (if (eq? (car %%ls1338) %%x1337) (%%remq1336 %%x1337 (cdr %%ls1338)) (cons (car %%ls1338) (%%remq1336 %%x1337 (cdr %%ls1338)))))))) (%%remq1336 '- (apply append (map (lambda (%%m1339) ((lambda (%%row1340) (map (lambda (%%s1341) (cdr (assq %%s1341 %%row1340))) %%when-list1334)) (cdr (assq %%m1339 %%table1333)))) %%mode-set1335)))))) '((L (load . L) (compile . C) (visit . V) (revisit . R) (eval . -)) (C (load . -) (compile . -) (visit . -) (revisit . -) (eval . C)) (V (load . V) (compile . C) (visit . V) (revisit . -) (eval . -)) (R (load . R) (compile . C) (visit . -) (revisit . R) (eval . -)) (E (load . -) (compile . -) (visit . -) (revisit . -) (eval . E))))) (%%initial-mode-set428 (lambda (%%when-list1342 %%compiling-a-file1343) (apply append (map (lambda (%%s1344) (if %%compiling-a-file1343 ((lambda (%%t1345) (if (memv %%t1345 '(compile)) '(C) (if (memv %%t1345 '(load)) '(L) (if (memv %%t1345 '(visit)) '(V) (if (memv %%t1345 '(revisit)) '(R) '()))))) %%s1344) ((lambda (%%t1346) (if (memv %%t1346 '(eval)) '(E) '())) %%s1344))) %%when-list1342)))) (%%rt-eval/residualize429 (lambda (%%rtem1347 %%thunk1348) (if (memq 'E %%rtem1347) (%%thunk1348) ((lambda (%%thunk1349) (if (memq 'V %%rtem1347) (if ((lambda (%%t1350) (if %%t1350 %%t1350 (memq 'R %%rtem1347))) (memq 'L %%rtem1347)) (%%thunk1349) (%%thunk1349)) (if ((lambda (%%t1351) (if %%t1351 %%t1351 (memq 'R %%rtem1347))) (memq 'L %%rtem1347)) (%%thunk1349) (%%chi-void455)))) (if (memq 'C %%rtem1347) ((lambda (%%x1352) (begin (%%top-level-eval-hook43 %%x1352) (lambda () %%x1352))) (%%thunk1348)) %%thunk1348))))) (%%ct-eval/residualize2430 (lambda (%%ctem1353 %%thunk1354) ((lambda (%%t1355) (%%ct-eval/residualize3431 %%ctem1353 (lambda () (begin (if (not %%t1355) (set! %%t1355 (%%thunk1354)) (void)) (%%top-level-eval-hook43 %%t1355))) (lambda () ((lambda (%%t1356) (if %%t1356 %%t1356 (%%thunk1354))) %%t1355)))) #f))) (%%ct-eval/residualize3431 (lambda (%%ctem1357 %%eval-thunk1358 %%residualize-thunk1359) (if (memq 'E %%ctem1357) (begin (%%eval-thunk1358) (%%chi-void455)) (begin (if (memq 'C %%ctem1357) (%%eval-thunk1358) (void)) (if (memq 'R %%ctem1357) (if ((lambda (%%t1360) (if %%t1360 %%t1360 (memq 'V %%ctem1357))) (memq 'L %%ctem1357)) (%%residualize-thunk1359) (%%residualize-thunk1359)) (if ((lambda (%%t1361) (if %%t1361 %%t1361 (memq 'V %%ctem1357))) (memq 'L %%ctem1357)) (%%residualize-thunk1359) (%%chi-void455))))))) (%%chi-frobs432 (lambda (%%frob*1362 %%r1363 %%mr1364 %%m?1365) (map (lambda (%%x1366) (%%chi435 (%%frob-e415 %%x1366) %%r1363 %%mr1364 '(()) %%m?1365)) %%frob*1362))) (%%chi-meta-frob433 (lambda (%%x1367 %%mr1368) (%%chi435 (%%frob-e415 %%x1367) %%mr1368 %%mr1368 '(()) #t))) (%%chi-sequence434 (lambda (%%body1369 %%r1370 %%mr1371 %%w1372 %%ae1373 %%m?1374) (%%build-sequence154 %%ae1373 ((letrec ((%%dobody1375 (lambda (%%body1376) (if (null? %%body1376) '() ((lambda (%%first1377) (cons %%first1377 (%%dobody1375 (cdr %%body1376)))) (%%chi435 (car %%body1376) %%r1370 %%mr1371 %%w1372 %%m?1374)))))) %%dobody1375) %%body1369)))) (%%chi435 (lambda (%%e1378 %%r1379 %%mr1380 %%w1381 %%m?1382) (call-with-values (lambda () (%%syntax-type380 %%e1378 %%r1379 %%w1381 #f #f)) (lambda (%%type1383 %%value1384 %%e1385 %%w1386 %%ae1387) (%%chi-expr436 %%type1383 %%value1384 %%e1385 %%r1379 %%mr1380 %%w1386 %%ae1387 %%m?1382))))) (%%chi-expr436 (lambda (%%type1388 %%value1389 %%e1390 %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) ((lambda (%%t1396) (if (memv %%t1396 '(lexical)) %%value1389 (if (memv %%t1396 '(core)) (%%value1389 %%e1390 %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) (if (memv %%t1396 '(lexical-call)) (%%chi-application437 %%value1389 %%e1390 %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) (if (memv %%t1396 '(constant)) ((lambda (%%x1397) (if (self-eval? (%%strip459 (%%source-wrap378 %%e1390 %%w1393 %%ae1394) '(()))) %%x1397 (build-source %%ae1394 (list (build-source %%ae1394 'quote) %%x1397)))) (attach-source %%ae1394 (%%strip459 (%%source-wrap378 %%e1390 %%w1393 %%ae1394) '(())))) (if (memv %%t1396 '(global)) (build-source %%ae1394 %%value1389) (if (memv %%t1396 '(meta-variable)) (if %%m?1395 (build-source %%ae1394 %%value1389) (%%displaced-lexical-error218 (%%source-wrap378 %%e1390 %%w1393 %%ae1394))) (if (memv %%t1396 '(call)) (%%chi-application437 (%%chi435 (car %%e1390) %%r1391 %%mr1392 %%w1393 %%m?1395) %%e1390 %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) (if (memv %%t1396 '(begin-form)) (%%chi-sequence434 (%%parse-begin452 %%e1390 %%w1393 %%ae1394 #f) %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) (if (memv %%t1396 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax454 %%value1389 %%e1390 %%r1391 %%mr1392 %%w1393 %%ae1394)) (lambda (%%forms1398 %%r1399 %%mr1400 %%w1401 %%ae1402) (%%chi-sequence434 %%forms1398 %%r1399 %%mr1400 %%w1401 %%ae1402 %%m?1395))) (if (memv %%t1396 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when450 %%e1390 %%w1393 %%ae1394)) (lambda (%%when-list1403 %%forms1404) (if (memq 'eval %%when-list1403) (%%chi-sequence434 %%forms1404 %%r1391 %%mr1392 %%w1393 %%ae1394 %%m?1395) (%%chi-void455)))) (if (memv %%t1396 '(meta-form)) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394) "invalid context for meta definition") (if (memv %%t1396 '(define-form)) (begin (%%parse-define447 %%e1390 %%w1393 %%ae1394) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394) "invalid context for definition")) (if (memv %%t1396 '(define-syntax-form)) (begin (%%parse-define-syntax448 %%e1390 %%w1393 %%ae1394) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394) "invalid context for definition")) (if (memv %%t1396 '($module-form)) (call-with-values (lambda () (%%parse-module445 %%e1390 %%w1393 %%ae1394 %%w1393)) (lambda (%%orig1405 %%id1406 %%exports1407 %%forms1408) (syntax-error %%orig1405 "invalid context for definition"))) (if (memv %%t1396 '($import-form)) (call-with-values (lambda () (%%parse-import446 %%e1390 %%w1393 %%ae1394)) (lambda (%%orig1409 %%only?1410 %%mid1411) (syntax-error %%orig1409 "invalid context for definition"))) (if (memv %%t1396 '(alias-form)) (begin (%%parse-alias451 %%e1390 %%w1393 %%ae1394) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394) "invalid context for definition")) (if (memv %%t1396 '(syntax)) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394) "reference to pattern variable outside syntax form") (if (memv %%t1396 '(displaced-lexical)) (%%displaced-lexical-error218 (%%source-wrap378 %%e1390 %%w1393 %%ae1394)) (syntax-error (%%source-wrap378 %%e1390 %%w1393 %%ae1394))))))))))))))))))))) %%type1388))) (%%chi-application437 (lambda (%%x1412 %%e1413 %%r1414 %%mr1415 %%w1416 %%ae1417 %%m?1418) ((lambda (%%tmp1419) ((lambda (%%tmp1420) (if %%tmp1420 (apply (lambda (%%e01421 %%e11422) (build-source %%ae1417 (cons %%x1412 (map (lambda (%%e1423) (%%chi435 %%e1423 %%r1414 %%mr1415 %%w1416 %%m?1418)) %%e11422)))) %%tmp1420) ((lambda (%%_1425) (syntax-error (%%source-wrap378 %%e1413 %%w1416 %%ae1417))) %%tmp1419))) ($syntax-dispatch %%tmp1419 '(any . each-any)))) %%e1413))) (%%chi-set!438 (lambda (%%e1426 %%r1427 %%w1428 %%ae1429 %%rib1430) ((lambda (%%tmp1431) ((lambda (%%tmp1432) (if (if %%tmp1432 (apply (lambda (%%_1433 %%id1434 %%val1435) (%%id?225 %%id1434)) %%tmp1432) #f) (apply (lambda (%%_1436 %%id1437 %%val1438) ((lambda (%%n1439) ((lambda (%%b1440) ((lambda (%%t1441) (if (memv %%t1441 '(macro!)) ((lambda (%%id1442 %%val1443) (%%syntax-type380 (%%chi-macro439 (%%binding-value201 %%b1440) (list '#structure(#4# set! (#5# #structure(#7# () () ()) #structure(#7# #(id val) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(t) #(("m" . #9#)) #("i")) #structure(#7# () () ()) #structure(#7# #(b) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(n) #(#5#) #("i")) #structure(#7# #(_ id val) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(e r w ae rib) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #8# . #10#)) %%id1442 %%val1443) %%r1427 '(()) #f %%rib1430) %%r1427 '(()) #f %%rib1430)) (%%wrap377 %%id1437 %%w1428) (%%wrap377 %%val1438 %%w1428)) (values 'core (lambda (%%e1444 %%r1445 %%mr1446 %%w1447 %%ae1448 %%m?1449) ((lambda (%%val1450 %%n1451) ((lambda (%%b1452) ((lambda (%%t1453) (if (memv %%t1453 '(lexical)) (build-source %%ae1448 (list (build-source %%ae1448 'set!) (%%binding-value201 %%b1452) %%val1450)) (if (memv %%t1453 '(global)) ((lambda (%%sym1454) (begin (if (%%read-only-binding?49 %%n1451) (syntax-error (%%source-wrap378 %%e1444 %%w1447 %%ae1448) "invalid assignment to read-only variable") (void)) (build-source %%ae1448 (list (build-source %%ae1448 'set!) %%sym1454 %%val1450)))) (%%binding-value201 %%b1452)) (if (memv %%t1453 '(meta-variable)) (if %%m?1449 (build-source %%ae1448 (list (build-source %%ae1448 'set!) (%%binding-value201 %%b1452) %%val1450)) (%%displaced-lexical-error218 (%%wrap377 %%id1437 %%w1447))) (if (memv %%t1453 '(displaced-lexical)) (%%displaced-lexical-error218 (%%wrap377 %%id1437 %%w1447)) (syntax-error (%%source-wrap378 %%e1444 %%w1447 %%ae1448))))))) (%%binding-type200 %%b1452))) (%%lookup220 %%n1451 %%r1445))) (%%chi435 %%val1438 %%r1445 %%mr1446 %%w1447 %%m?1449) (%%id-var-name368 %%id1437 %%w1447))) %%e1426 %%w1428 %%ae1429))) (%%binding-type200 %%b1440))) (%%lookup220 %%n1439 %%r1427))) (%%id-var-name368 %%id1437 %%w1428))) %%tmp1432) ((lambda (%%_1455) (syntax-error (%%source-wrap378 %%e1426 %%w1428 %%ae1429))) %%tmp1431))) ($syntax-dispatch %%tmp1431 '(any any any)))) %%e1426))) (%%chi-macro439 (lambda (%%p1456 %%e1457 %%r1458 %%w1459 %%ae1460 %%rib1461) (letrec ((%%rebuild-macro-output1462 (lambda (%%x1463 %%m1464) (if (pair? %%x1463) (cons (%%rebuild-macro-output1462 (car %%x1463) %%m1464) (%%rebuild-macro-output1462 (cdr %%x1463) %%m1464)) (if (%%syntax-object?40 %%x1463) ((lambda (%%w1465) ((lambda (%%ms1466 %%s1467) (%%make-syntax-object36 (%%syntax-object-expression41 %%x1463) (if (if (pair? %%ms1466) (eq? (car %%ms1466) #f) #f) (%%make-wrap234 (cdr %%ms1466) (cdr %%s1467)) (%%make-wrap234 (cons %%m1464 %%ms1466) (if %%rib1461 (cons %%rib1461 (cons 'shift %%s1467)) (cons 'shift %%s1467)))))) (%%wrap-marks235 %%w1465) (%%wrap-subst236 %%w1465))) (%%syntax-object-wrap42 %%x1463)) (if (vector? %%x1463) ((lambda (%%n1468) ((lambda (%%v1469) ((lambda () ((letrec ((%%do1470 (lambda (%%i1471) (if (fx= %%i1471 %%n1468) %%v1469 (begin (vector-set! %%v1469 %%i1471 (%%rebuild-macro-output1462 (vector-ref %%x1463 %%i1471) %%m1464)) (%%do1470 (fx+ %%i1471 1))))))) %%do1470) 0)))) (make-vector %%n1468))) (vector-length %%x1463)) (if (symbol? %%x1463) (syntax-error (%%source-wrap378 %%e1457 %%w1459 %%ae1460) "encountered raw symbol " (symbol->string %%x1463) " in output of macro") %%x1463))))))) (%%rebuild-macro-output1462 ((lambda (%%out1472) (if (procedure? %%out1472) (%%out1472 (lambda (%%id1473) (begin (if (not (identifier? %%id1473)) (syntax-error %%id1473 "environment argument is not an identifier") (void)) (%%lookup220 (%%id-var-name368 %%id1473 '(())) %%r1458)))) %%out1472)) (%%p1456 (%%source-wrap378 %%e1457 (%%anti-mark334 %%w1459) %%ae1460))) (string #\m))))) (%%chi-body440 (lambda (%%body1474 %%outer-form1475 %%r1476 %%mr1477 %%w1478 %%m?1479) ((lambda (%%ribcage1480) ((lambda (%%w1481) ((lambda (%%body1482) ((lambda () (call-with-values (lambda () (%%chi-internal441 %%ribcage1480 %%outer-form1475 %%body1482 %%r1476 %%mr1477 %%m?1479)) (lambda (%%r1483 %%mr1484 %%exprs1485 %%ids1486 %%vars1487 %%vals1488 %%inits1489) (begin (if (null? %%exprs1485) (syntax-error %%outer-form1475 "no expressions in body") (void)) (%%build-body156 #f (reverse %%vars1487) (%%chi-frobs432 (reverse %%vals1488) %%r1483 %%mr1484 %%m?1479) (%%build-sequence154 #f (%%chi-frobs432 (append %%inits1489 %%exprs1485) %%r1483 %%mr1484 %%m?1479))))))))) (map (lambda (%%x1490) (%%make-frob413 (%%wrap377 %%x1490 %%w1481) #f)) %%body1474))) (%%make-wrap234 (%%wrap-marks235 %%w1478) (cons %%ribcage1480 (%%wrap-subst236 %%w1478))))) (%%make-ribcage285 '() '() '())))) (%%chi-internal441 (lambda (%%ribcage1491 %%source-exp1492 %%body1493 %%r1494 %%mr1495 %%m?1496) (letrec ((%%return1497 (lambda (%%r1498 %%mr1499 %%exprs1500 %%ids1501 %%vars1502 %%vals1503 %%inits1504) (begin (%%check-defined-ids422 %%source-exp1492 %%ids1501) (values %%r1498 %%mr1499 %%exprs1500 %%ids1501 %%vars1502 %%vals1503 %%inits1504))))) ((letrec ((%%parse1505 (lambda (%%body1506 %%r1507 %%mr1508 %%ids1509 %%vars1510 %%vals1511 %%inits1512 %%meta-seen?1513) (if (null? %%body1506) (%%return1497 %%r1507 %%mr1508 %%body1506 %%ids1509 %%vars1510 %%vals1511 %%inits1512) ((lambda (%%fr1514) ((lambda (%%e1515) ((lambda (%%meta?1516) ((lambda () (call-with-values (lambda () (%%syntax-type380 %%e1515 %%r1507 '(()) #f %%ribcage1491)) (lambda (%%type1517 %%value1518 %%e1519 %%w1520 %%ae1521) ((lambda (%%t1522) (if (memv %%t1522 '(define-form)) (call-with-values (lambda () (%%parse-define447 %%e1519 %%w1520 %%ae1521)) (lambda (%%id1523 %%rhs1524 %%w1525) ((lambda (%%id1526 %%label1527) (if %%meta?1516 ((lambda (%%sym1528) (begin (%%extend-ribcage!344 %%ribcage1491 %%id1526 %%label1527) ((lambda (%%mr1529) (begin (%%define-top-level-value-hook45 %%sym1528 (%%top-level-eval-hook43 (%%chi435 %%rhs1524 %%mr1529 %%mr1529 %%w1525 #t))) (%%parse1505 (cdr %%body1506) %%r1507 %%mr1529 (cons %%id1526 %%ids1509) %%vars1510 %%vals1511 %%inits1512 #f))) (%%extend-env214 %%label1527 (cons 'meta-variable %%sym1528) %%mr1508)))) (%%generate-id52 ((lambda (%%x1530) ((lambda (%%e1531) (if (annotation? %%e1531) (annotation-expression %%e1531) %%e1531)) (if (%%syntax-object?40 %%x1530) (%%syntax-object-expression41 %%x1530) %%x1530))) %%id1526))) ((lambda (%%var1532) (begin (%%extend-ribcage!344 %%ribcage1491 %%id1526 %%label1527) (%%parse1505 (cdr %%body1506) (%%extend-env214 %%label1527 (cons 'lexical %%var1532) %%r1507) %%mr1508 (cons %%id1526 %%ids1509) (cons %%var1532 %%vars1510) (cons (%%make-frob413 (%%wrap377 %%rhs1524 %%w1525) %%meta?1516) %%vals1511) %%inits1512 #f))) (%%gen-var460 %%id1526)))) (%%wrap377 %%id1523 %%w1525) (%%gen-label282)))) (if (memv %%t1522 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax448 %%e1519 %%w1520 %%ae1521)) (lambda (%%id1533 %%rhs1534 %%w1535) ((lambda (%%id1536 %%label1537 %%exp1538) (begin (%%extend-ribcage!344 %%ribcage1491 %%id1536 %%label1537) ((lambda (%%b1539) (%%parse1505 (cdr %%body1506) (%%extend-env214 %%label1537 %%b1539 %%r1507) (%%extend-env214 %%label1537 %%b1539 %%mr1508) (cons %%id1536 %%ids1509) %%vars1510 %%vals1511 %%inits1512 #f)) (%%defer-or-eval-transformer222 %%local-eval-hook44 %%exp1538)))) (%%wrap377 %%id1533 %%w1535) (%%gen-label282) (%%chi435 %%rhs1534 %%mr1508 %%mr1508 %%w1535 #t)))) (if (memv %%t1522 '($module-form)) ((lambda (%%*ribcage1540) ((lambda (%%*w1541) ((lambda () (call-with-values (lambda () (%%parse-module445 %%e1519 %%w1520 %%ae1521 %%*w1541)) (lambda (%%orig1542 %%id1543 %%exports1544 %%forms1545) (call-with-values (lambda () (%%chi-internal441 %%*ribcage1540 %%orig1542 (map (lambda (%%d1546) (%%make-frob413 %%d1546 %%meta?1516)) %%forms1545) %%r1507 %%mr1508 %%m?1496)) (lambda (%%r1547 %%mr1548 %%*body1549 %%*ids1550 %%*vars1551 %%*vals1552 %%*inits1553) (begin (%%check-module-exports421 %%source-exp1492 (%%flatten-exports384 %%exports1544) %%*ids1550) ((lambda (%%iface1554 %%vars1555 %%vals1556 %%inits1557 %%label1558) (begin (%%extend-ribcage!344 %%ribcage1491 %%id1543 %%label1558) ((lambda (%%b1559) (%%parse1505 (cdr %%body1506) (%%extend-env214 %%label1558 %%b1559 %%r1547) (%%extend-env214 %%label1558 %%b1559 %%mr1548) (cons %%id1543 %%ids1509) %%vars1555 %%vals1556 %%inits1557 #f)) (cons '$module %%iface1554)))) (%%make-resolved-interface395 %%id1543 %%exports1544 #f) (append %%*vars1551 %%vars1510) (append %%*vals1552 %%vals1511) (append %%inits1512 %%*inits1553 %%*body1549) (%%gen-label282)))))))))) (%%make-wrap234 (%%wrap-marks235 %%w1520) (cons %%*ribcage1540 (%%wrap-subst236 %%w1520))))) (%%make-ribcage285 '() '() '())) (if (memv %%t1522 '($import-form)) (call-with-values (lambda () (%%parse-import446 %%e1519 %%w1520 %%ae1521)) (lambda (%%orig1560 %%only?1561 %%mid1562) ((lambda (%%mlabel1563) ((lambda (%%binding1564) ((lambda (%%t1565) (if (memv %%t1565 '($module)) ((lambda (%%iface1566) ((lambda (%%import-iface1567) ((lambda () (begin (if %%only?1561 (%%extend-ribcage-barrier!346 %%ribcage1491 %%mid1562) (void)) (%%do-import!444 %%import-iface1567 %%ribcage1491) (%%parse1505 (cdr %%body1506) %%r1507 %%mr1508 (cons %%import-iface1567 %%ids1509) %%vars1510 %%vals1511 %%inits1512 #f))))) (%%make-import-interface312 %%iface1566 (%%import-mark-delta442 %%mid1562 %%iface1566)))) (%%binding-value201 %%binding1564)) (if (memv %%t1565 '(displaced-lexical)) (%%displaced-lexical-error218 %%mid1562) (syntax-error %%mid1562 "unknown module")))) (%%binding-type200 %%binding1564))) (%%lookup220 %%mlabel1563 %%r1507))) (%%id-var-name368 %%mid1562 '(()))))) (if (memv %%t1522 '(alias-form)) (call-with-values (lambda () (%%parse-alias451 %%e1519 %%w1520 %%ae1521)) (lambda (%%new-id1568 %%old-id1569) ((lambda (%%new-id1570) (begin (%%extend-ribcage!344 %%ribcage1491 %%new-id1570 (%%id-var-name-loc367 %%old-id1569 %%w1520)) (%%parse1505 (cdr %%body1506) %%r1507 %%mr1508 (cons %%new-id1570 %%ids1509) %%vars1510 %%vals1511 %%inits1512 #f))) (%%wrap377 %%new-id1568 %%w1520)))) (if (memv %%t1522 '(begin-form)) (%%parse1505 ((letrec ((%%f1571 (lambda (%%forms1572) (if (null? %%forms1572) (cdr %%body1506) (cons (%%make-frob413 (%%wrap377 (car %%forms1572) %%w1520) %%meta?1516) (%%f1571 (cdr %%forms1572))))))) %%f1571) (%%parse-begin452 %%e1519 %%w1520 %%ae1521 #t)) %%r1507 %%mr1508 %%ids1509 %%vars1510 %%vals1511 %%inits1512 #f) (if (memv %%t1522 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when450 %%e1519 %%w1520 %%ae1521)) (lambda (%%when-list1573 %%forms1574) (%%parse1505 (if (memq 'eval %%when-list1573) ((letrec ((%%f1575 (lambda (%%forms1576) (if (null? %%forms1576) (cdr %%body1506) (cons (%%make-frob413 (%%wrap377 (car %%forms1576) %%w1520) %%meta?1516) (%%f1575 (cdr %%forms1576))))))) %%f1575) %%forms1574) (cdr %%body1506)) %%r1507 %%mr1508 %%ids1509 %%vars1510 %%vals1511 %%inits1512 #f))) (if (memv %%t1522 '(meta-form)) (%%parse1505 (cons (%%make-frob413 (%%wrap377 (%%parse-meta449 %%e1519 %%w1520 %%ae1521) %%w1520) #t) (cdr %%body1506)) %%r1507 %%mr1508 %%ids1509 %%vars1510 %%vals1511 %%inits1512 #t) (if (memv %%t1522 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax454 %%value1518 %%e1519 %%r1507 %%mr1508 %%w1520 %%ae1521)) (lambda (%%forms1577 %%r1578 %%mr1579 %%w1580 %%ae1581) (%%parse1505 ((letrec ((%%f1582 (lambda (%%forms1583) (if (null? %%forms1583) (cdr %%body1506) (cons (%%make-frob413 (%%wrap377 (car %%forms1583) %%w1580) %%meta?1516) (%%f1582 (cdr %%forms1583))))))) %%f1582) %%forms1577) %%r1578 %%mr1579 %%ids1509 %%vars1510 %%vals1511 %%inits1512 #f))) (begin (if %%meta-seen?1513 (syntax-error (%%source-wrap378 %%e1519 %%w1520 %%ae1521) "invalid meta definition") (void)) ((letrec ((%%f1584 (lambda (%%body1585) (if ((lambda (%%t1586) (if %%t1586 %%t1586 (not (%%frob-meta?417 (car %%body1585))))) (null? %%body1585)) (%%return1497 %%r1507 %%mr1508 %%body1585 %%ids1509 %%vars1510 %%vals1511 %%inits1512) (begin (%%top-level-eval-hook43 (%%chi-meta-frob433 (car %%body1585) %%mr1508)) (%%f1584 (cdr %%body1585))))))) %%f1584) (cons (%%make-frob413 (%%source-wrap378 %%e1519 %%w1520 %%ae1521) %%meta?1516) (cdr %%body1506)))))))))))))) %%type1517)))))) (%%frob-meta?417 %%fr1514))) (%%frob-e415 %%fr1514))) (car %%body1506)))))) %%parse1505) %%body1493 %%r1494 %%mr1495 '() '() '() '() #f)))) (%%import-mark-delta442 (lambda (%%mid1587 %%iface1588) (%%diff-marks360 (%%id-marks231 %%mid1587) (%%interface-marks388 %%iface1588)))) (%%lookup-import-label443 (lambda (%%id1589) ((lambda (%%label1590) (begin (if (not %%label1590) (syntax-error %%id1589 "exported identifier not visible") (void)) %%label1590)) (%%id-var-name-loc367 %%id1589 '(()))))) (%%do-import!444 (lambda (%%import-iface1591 %%ribcage1592) ((lambda (%%ie1593) (if (<= (vector-length %%ie1593) 20) ((lambda (%%new-marks1594) (%%vfor-each425 (lambda (%%id1595) (%%import-extend-ribcage!345 %%ribcage1592 %%new-marks1594 %%id1595 (%%lookup-import-label443 %%id1595))) %%ie1593)) (%%import-interface-new-marks316 %%import-iface1591)) (%%extend-ribcage-subst!348 %%ribcage1592 %%import-iface1591))) (%%interface-exports390 (%%import-interface-interface314 %%import-iface1591))))) (%%parse-module445 (lambda (%%e1596 %%w1597 %%ae1598 %%*w1599) (letrec ((%%listify1600 (lambda (%%exports1601) (if (null? %%exports1601) '() (cons ((lambda (%%tmp1602) ((lambda (%%tmp1603) (if %%tmp1603 (apply (lambda (%%ex1604) (%%listify1600 %%ex1604)) %%tmp1603) ((lambda (%%x1606) (if (%%id?225 %%x1606) (%%wrap377 %%x1606 %%*w1599) (syntax-error (%%source-wrap378 %%e1596 %%w1597 %%ae1598) "invalid exports list in"))) %%tmp1602))) ($syntax-dispatch %%tmp1602 'each-any))) (car %%exports1601)) (%%listify1600 (cdr %%exports1601))))))) ((lambda (%%tmp1607) ((lambda (%%tmp1608) (if (if %%tmp1608 (apply (lambda (%%_1609 %%orig1610 %%mid1611 %%ex1612 %%form1613) (%%id?225 %%mid1611)) %%tmp1608) #f) (apply (lambda (%%_1614 %%orig1615 %%mid1616 %%ex1617 %%form1618) (values %%orig1615 (%%wrap377 %%mid1616 %%w1597) (%%listify1600 %%ex1617) (map (lambda (%%x1620) (%%wrap377 %%x1620 %%*w1599)) %%form1618))) %%tmp1608) ((lambda (%%_1622) (syntax-error (%%source-wrap378 %%e1596 %%w1597 %%ae1598))) %%tmp1607))) ($syntax-dispatch %%tmp1607 '(any any any each-any . each-any)))) %%e1596)))) (%%parse-import446 (lambda (%%e1623 %%w1624 %%ae1625) ((lambda (%%tmp1626) ((lambda (%%tmp1627) (if (if %%tmp1627 (apply (lambda (%%_1628 %%orig1629 %%mid1630) (%%id?225 %%mid1630)) %%tmp1627) #f) (apply (lambda (%%_1631 %%orig1632 %%mid1633) (values %%orig1632 #t (%%wrap377 %%mid1633 %%w1624))) %%tmp1627) ((lambda (%%tmp1634) (if (if %%tmp1634 (apply (lambda (%%_1635 %%orig1636 %%mid1637) (%%id?225 %%mid1637)) %%tmp1634) #f) (apply (lambda (%%_1638 %%orig1639 %%mid1640) (values %%orig1639 #f (%%wrap377 %%mid1640 %%w1624))) %%tmp1634) ((lambda (%%_1641) (syntax-error (%%source-wrap378 %%e1623 %%w1624 %%ae1625))) %%tmp1626))) ($syntax-dispatch %%tmp1626 '(any any #(atom #f) any))))) ($syntax-dispatch %%tmp1626 '(any any #(atom #t) any)))) %%e1623))) (%%parse-define447 (lambda (%%e1642 %%w1643 %%ae1644) ((lambda (%%tmp1645) ((lambda (%%tmp1646) (if (if %%tmp1646 (apply (lambda (%%_1647 %%name1648 %%val1649) (%%id?225 %%name1648)) %%tmp1646) #f) (apply (lambda (%%_1650 %%name1651 %%val1652) (values %%name1651 %%val1652 %%w1643)) %%tmp1646) ((lambda (%%tmp1653) (if (if %%tmp1653 (apply (lambda (%%_1654 %%name1655 %%args1656 %%e11657 %%e21658) (%%id?225 %%name1655)) %%tmp1653) #f) (apply (lambda (%%_1659 %%name1660 %%args1661 %%e11662 %%e21663) (values (%%wrap377 %%name1660 %%w1643) (cons '#structure(#4# lambda (#5# #structure(#7# #(_ name args e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) . #11=(#structure(#7# () () ()) #structure(#7# #(e w ae) #(#5# #5# #5#) #("i" "i" "i")) #8# . #10#))) (%%wrap377 (cons %%args1661 (cons %%e11662 %%e21663)) %%w1643)) '(()))) %%tmp1653) ((lambda (%%tmp1665) (if (if %%tmp1665 (apply (lambda (%%_1666 %%name1667) (%%id?225 %%name1667)) %%tmp1665) #f) (apply (lambda (%%_1668 %%name1669) (values (%%wrap377 %%name1669 %%w1643) '#structure(#4# (void) (#5# #structure(#7# #(_ name) #(#5# #5#) #("i" "i")) . #11#)) '(()))) %%tmp1665) ((lambda (%%_1670) (syntax-error (%%source-wrap378 %%e1642 %%w1643 %%ae1644))) %%tmp1645))) ($syntax-dispatch %%tmp1645 '(any any))))) ($syntax-dispatch %%tmp1645 '(any (any . any) any . each-any))))) ($syntax-dispatch %%tmp1645 '(any any any)))) %%e1642))) (%%parse-define-syntax448 (lambda (%%e1671 %%w1672 %%ae1673) ((lambda (%%tmp1674) ((lambda (%%tmp1675) (if (if %%tmp1675 (apply (lambda (%%_1676 %%name1677 %%id1678 %%e11679 %%e21680) (if (%%id?225 %%name1677) (%%id?225 %%id1678) #f)) %%tmp1675) #f) (apply (lambda (%%_1681 %%name1682 %%id1683 %%e11684 %%e21685) (values (%%wrap377 %%name1682 %%w1672) (cons '#structure(#4# lambda (#5# #structure(#7# #(_ name id e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(e w ae) #(#5# #5# #5#) #("i" "i" "i")) #8# . #10#)) (cons (%%wrap377 (list %%id1683) %%w1672) (%%wrap377 (cons %%e11684 %%e21685) %%w1672))) '(()))) %%tmp1675) ((lambda (%%tmp1687) (if (if %%tmp1687 (apply (lambda (%%_1688 %%name1689 %%val1690) (%%id?225 %%name1689)) %%tmp1687) #f) (apply (lambda (%%_1691 %%name1692 %%val1693) (values %%name1692 %%val1693 %%w1672)) %%tmp1687) ((lambda (%%_1694) (syntax-error (%%source-wrap378 %%e1671 %%w1672 %%ae1673))) %%tmp1674))) ($syntax-dispatch %%tmp1674 '(any any any))))) ($syntax-dispatch %%tmp1674 '(any (any any) any . each-any)))) %%e1671))) (%%parse-meta449 (lambda (%%e1695 %%w1696 %%ae1697) ((lambda (%%tmp1698) ((lambda (%%tmp1699) (if %%tmp1699 (apply (lambda (%%_1700 %%form1701) %%form1701) %%tmp1699) ((lambda (%%_1702) (syntax-error (%%source-wrap378 %%e1695 %%w1696 %%ae1697))) %%tmp1698))) ($syntax-dispatch %%tmp1698 '(any . any)))) %%e1695))) (%%parse-eval-when450 (lambda (%%e1703 %%w1704 %%ae1705) ((lambda (%%tmp1706) ((lambda (%%tmp1707) (if %%tmp1707 (apply (lambda (%%_1708 %%x1709 %%e11710 %%e21711) (values (%%chi-when-list379 %%x1709 %%w1704) (cons %%e11710 %%e21711))) %%tmp1707) ((lambda (%%_1714) (syntax-error (%%source-wrap378 %%e1703 %%w1704 %%ae1705))) %%tmp1706))) ($syntax-dispatch %%tmp1706 '(any each-any any . each-any)))) %%e1703))) (%%parse-alias451 (lambda (%%e1715 %%w1716 %%ae1717) ((lambda (%%tmp1718) ((lambda (%%tmp1719) (if (if %%tmp1719 (apply (lambda (%%_1720 %%new-id1721 %%old-id1722) (if (%%id?225 %%new-id1721) (%%id?225 %%old-id1722) #f)) %%tmp1719) #f) (apply (lambda (%%_1723 %%new-id1724 %%old-id1725) (values %%new-id1724 %%old-id1725)) %%tmp1719) ((lambda (%%_1726) (syntax-error (%%source-wrap378 %%e1715 %%w1716 %%ae1717))) %%tmp1718))) ($syntax-dispatch %%tmp1718 '(any any any)))) %%e1715))) (%%parse-begin452 (lambda (%%e1727 %%w1728 %%ae1729 %%empty-okay?1730) ((lambda (%%tmp1731) ((lambda (%%tmp1732) (if (if %%tmp1732 (apply (lambda (%%_1733) %%empty-okay?1730) %%tmp1732) #f) (apply (lambda (%%_1734) '()) %%tmp1732) ((lambda (%%tmp1735) (if %%tmp1735 (apply (lambda (%%_1736 %%e11737 %%e21738) (cons %%e11737 %%e21738)) %%tmp1735) ((lambda (%%_1740) (syntax-error (%%source-wrap378 %%e1727 %%w1728 %%ae1729))) %%tmp1731))) ($syntax-dispatch %%tmp1731 '(any any . each-any))))) ($syntax-dispatch %%tmp1731 '(any)))) %%e1727))) (%%chi-lambda-clause453 (lambda (%%e1741 %%c1742 %%r1743 %%mr1744 %%w1745 %%m?1746) (letrec ((%%reverse*1747 (lambda (%%l1750) ((letrec ((%%f1751 (lambda (%%ls11752 %%ls21753) (if (null? %%ls11752) %%ls21753 (%%f1751 (cdr %%ls11752) (cons (car %%ls11752) %%ls21753)))))) %%f1751) (cdr %%l1750) (car %%l1750)))) (%%ids/emitter1748 (lambda (%%formals1754 %%ids1755 %%emitter1756 %%ae1757 %%template1758) (if (null? %%ids1755) (values (reverse %%formals1754) %%emitter1756) (if (%%syntax-object?40 (car %%ids1755)) (%%ids/emitter1748 %%formals1754 (cons (syntax-object->datum (car %%ids1755)) (cdr %%ids1755)) %%emitter1756 %%ae1757 (car %%ids1755)) (if (annotation? (car %%ids1755)) (%%ids/emitter1748 %%formals1754 (cons ((lambda (%%e1759) (if (annotation? %%e1759) (annotation-expression %%e1759) %%e1759)) (car %%ids1755)) (cdr %%ids1755)) %%emitter1756 (car %%ids1755) %%template1758) (if (eq? (car %%ids1755) #!key) (%%ids/emitter1748 %%formals1754 (cdr %%ids1755) 'keyword %%ae1757 #f) (if (memq (car %%ids1755) '(#!optional #!rest)) (%%ids/emitter1748 %%formals1754 (cdr %%ids1755) ((lambda (%%t1760) (if %%t1760 %%t1760 %%emitter1756)) (if (eq? %%emitter1756 'rnrs) 'optional/rest #f)) %%ae1757 #f) (if (pair? (car %%ids1755)) (%%ids/emitter1748 %%formals1754 (cons (car (car %%ids1755)) (cdr %%ids1755)) %%emitter1756 %%ae1757 (if %%template1758 (%%make-syntax-object36 (car ((lambda (%%e1761) (if (annotation? %%e1761) (annotation-expression %%e1761) %%e1761)) (%%syntax-object-expression41 %%template1758))) (%%syntax-object-wrap42 %%template1758)) #f)) (%%ids/emitter1748 (cons (if %%template1758 (datum->syntax-object %%template1758 (car %%ids1755)) (if %%ae1757 (build-source %%ae1757 (car %%ids1755)) (build-source #f (car %%ids1755)))) %%formals1754) (cdr %%ids1755) %%emitter1756 %%ae1757 #f))))))))) (%%emit-formals1749 (lambda (%%formals*1762 %%formals1763 %%vars1764 %%emitter1765 %%ae1766 %%template1767) (letrec ((%%formal1768 (lambda () ((lambda (%%t1769) (if (memv %%t1769 '(optional/rest)) %%vars1764 (if (memv %%t1769 '(rnrs keyword)) %%formals1763 (void)))) %%emitter1765)))) (if (null? %%formals1763) (reverse %%formals*1762) (if (%%syntax-object?40 %%formals1763) (%%emit-formals1749 %%formals*1762 (syntax-object->datum %%formals1763) %%vars1764 %%emitter1765 %%ae1766 %%formals1763) (if (%%id?225 %%formals1763) (%%reverse*1747 (cons (%%formal1768) %%formals*1762)) (if (annotation? %%formals1763) (%%emit-formals1749 %%formals*1762 ((lambda (%%e1770) (if (annotation? %%e1770) (annotation-expression %%e1770) %%e1770)) %%formals1763) %%vars1764 %%emitter1765 %%ae1766 %%template1767) (if (annotation? (car %%formals1763)) (%%emit-formals1749 %%formals*1762 (cons ((lambda (%%e1771) (if (annotation? %%e1771) (annotation-expression %%e1771) %%e1771)) (car %%formals1763)) (cdr %%formals1763)) %%vars1764 %%emitter1765 (car %%formals1763) %%template1767) (if (%%syntax-object?40 (car %%formals1763)) (%%emit-formals1749 %%formals*1762 (cons (syntax-object->datum (car %%formals1763)) (cdr %%formals1763)) %%vars1764 %%emitter1765 %%ae1766 (car %%formals1763)) (if (memq (car %%formals1763) '(#!optional #!rest #!key)) (%%emit-formals1749 (cons (build-source %%ae1766 (car %%formals1763)) %%formals*1762) (cdr %%formals1763) %%vars1764 %%emitter1765 %%ae1766 %%template1767) (if (pair? (car %%formals1763)) (%%emit-formals1749 (cons (cons (car ((lambda (%%t1772) (if (memv %%t1772 '(keyword)) (car (%%formal1768)) (if (memv %%t1772 '(optional/rest)) (%%formal1768) (void)))) %%emitter1765)) ((lambda (%%e1773) (if (annotation? %%e1773) (annotation-expression %%e1773) %%e1773)) (%%chi435 (cdr (car %%formals1763)) %%r1743 %%mr1744 %%w1745 %%m?1746))) %%formals*1762) (cdr %%formals1763) (cdr %%vars1764) %%emitter1765 %%ae1766 %%template1767) (if (%%id?225 (car %%formals1763)) (%%emit-formals1749 (cons (car (%%formal1768)) %%formals*1762) (cdr (syntax-object->datum %%formals1763)) (cdr %%vars1764) %%emitter1765 %%ae1766 %%template1767) (error (list 'unexpected-formal (car %%formals1763)))))))))))))))) ((lambda (%%tmp1774) ((lambda (%%tmp1775) (if %%tmp1775 (apply (lambda (%%id1776 %%e11777 %%e21778) ((lambda (%%formals1779) (call-with-values (lambda () (%%ids/emitter1748 '() %%formals1779 'rnrs #f #f)) (lambda (%%ids1780 %%emitter1781) (if (not (%%valid-bound-ids?373 %%ids1780)) (syntax-error %%e1741 "invalid parameter list in") ((lambda (%%labels1782 %%new-vars1783) (values %%emitter1781 (if (eq? %%emitter1781 'keyword) (%%gen-var460 'dsssl-args) #f) (build-source %%formals1779 %%new-vars1783) (%%emit-formals1749 '() %%formals1779 %%new-vars1783 %%emitter1781 #f #f) (map syntax-object->datum %%ids1780) (%%chi-body440 (cons %%e11777 %%e21778) %%e1741 (%%extend-var-env*216 %%labels1782 %%new-vars1783 %%r1743) %%mr1744 (%%make-binding-wrap351 %%ids1780 %%labels1782 %%w1745) %%m?1746))) (%%gen-labels284 %%ids1780) (map (lambda (%%id1785) (build-source %%id1785 (%%gen-var460 %%id1785))) %%ids1780)))))) %%id1776)) %%tmp1775) ((lambda (%%tmp1787) (if %%tmp1787 (apply (lambda (%%ids1788 %%e11789 %%e21790) ((lambda (%%formals1791) (call-with-values (lambda () (%%ids/emitter1748 '() (%%lambda-var-list461 %%formals1791) 'rnrs #f #f)) (lambda (%%old-ids1792 %%emitter1793) (if (not (%%valid-bound-ids?373 %%old-ids1792)) (syntax-error %%e1741 "invalid parameter list in") ((lambda (%%labels1794 %%new-vars1795) (values %%emitter1793 (if (eq? %%emitter1793 'keyword) (%%gen-var460 'dsssl-args) #f) ((lambda (%%vars1796) (if ((lambda (%%t1797) (if %%t1797 %%t1797 (null? %%vars1796))) (pair? %%vars1796)) (build-source %%old-ids1792 %%vars1796) %%vars1796)) (if (eq? %%emitter1793 'rnrs) (%%reverse*1747 %%new-vars1795) (reverse %%new-vars1795))) (%%emit-formals1749 '() %%formals1791 (%%reverse*1747 %%new-vars1795) %%emitter1793 #f #f) (reverse (map syntax-object->datum %%old-ids1792)) (%%chi-body440 (cons %%e11789 %%e21790) %%e1741 (%%extend-var-env*216 %%labels1794 %%new-vars1795 %%r1743) %%mr1744 (%%make-binding-wrap351 %%old-ids1792 %%labels1794 %%w1745) %%m?1746))) (%%gen-labels284 %%old-ids1792) (map (lambda (%%id1799) (build-source %%id1799 (%%gen-var460 %%id1799))) %%old-ids1792)))))) %%ids1788)) %%tmp1787) ((lambda (%%_1800) (syntax-error %%e1741)) %%tmp1774))) ($syntax-dispatch %%tmp1774 '(any any . each-any))))) ($syntax-dispatch %%tmp1774 '(each-any any . each-any)))) %%c1742)))) (%%chi-local-syntax454 (lambda (%%rec?1801 %%e1802 %%r1803 %%mr1804 %%w1805 %%ae1806) ((lambda (%%tmp1807) ((lambda (%%tmp1808) (if %%tmp1808 (apply (lambda (%%_1809 %%id1810 %%val1811 %%e11812 %%e21813) ((lambda (%%ids1814) (if (not (%%valid-bound-ids?373 %%ids1814)) (%%invalid-ids-error375 (map (lambda (%%x1815) (%%wrap377 %%x1815 %%w1805)) %%ids1814) (%%source-wrap378 %%e1802 %%w1805 %%ae1806) "keyword") ((lambda (%%labels1816) ((lambda (%%new-w1817) ((lambda (%%b*1818) (values (cons %%e11812 %%e21813) (%%extend-env*215 %%labels1816 %%b*1818 %%r1803) (%%extend-env*215 %%labels1816 %%b*1818 %%mr1804) %%new-w1817 %%ae1806)) ((lambda (%%w1820) (map (lambda (%%x1821) (%%defer-or-eval-transformer222 %%local-eval-hook44 (%%chi435 %%x1821 %%mr1804 %%mr1804 %%w1820 #t))) %%val1811)) (if %%rec?1801 %%new-w1817 %%w1805)))) (%%make-binding-wrap351 %%ids1814 %%labels1816 %%w1805))) (%%gen-labels284 %%ids1814)))) %%id1810)) %%tmp1808) ((lambda (%%_1824) (syntax-error (%%source-wrap378 %%e1802 %%w1805 %%ae1806))) %%tmp1807))) ($syntax-dispatch %%tmp1807 '(any #(each (any any)) any . each-any)))) %%e1802))) (%%chi-void455 (lambda () (build-source #f (cons 'void '())))) (%%ellipsis?456 (lambda (%%x1825) (if (%%nonsymbol-id?224 %%x1825) (%%literal-id=?370 %%x1825 '#structure(#4# ... (#5# #structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) #8# . #10#))) #f))) (%%strip-annotation457 (lambda (%%x1826) (if (pair? %%x1826) (cons (%%strip-annotation457 (car %%x1826)) (%%strip-annotation457 (cdr %%x1826))) (if (annotation? %%x1826) (annotation-stripped %%x1826) %%x1826)))) (%%strip*458 (lambda (%%x1827 %%w1828 %%fn1829) (if (memq 'top (%%wrap-marks235 %%w1828)) (%%fn1829 %%x1827) ((letrec ((%%f1830 (lambda (%%x1831) (if (%%syntax-object?40 %%x1831) (%%strip*458 (%%syntax-object-expression41 %%x1831) (%%syntax-object-wrap42 %%x1831) %%fn1829) (if (pair? %%x1831) ((lambda (%%a1832 %%d1833) (if (if (eq? %%a1832 (car %%x1831)) (eq? %%d1833 (cdr %%x1831)) #f) %%x1831 (cons %%a1832 %%d1833))) (%%f1830 (car %%x1831)) (%%f1830 (cdr %%x1831))) (if (vector? %%x1831) ((lambda (%%old1834) ((lambda (%%new1835) (if (andmap eq? %%old1834 %%new1835) %%x1831 (list->vector %%new1835))) (map %%f1830 %%old1834))) (vector->list %%x1831)) %%x1831)))))) %%f1830) %%x1827)))) (%%strip459 (lambda (%%x1836 %%w1837) (%%strip*458 %%x1836 %%w1837 (lambda (%%x1838) (if ((lambda (%%t1839) (if %%t1839 %%t1839 (if (pair? %%x1838) (annotation? (car %%x1838)) #f))) (annotation? %%x1838)) (%%strip-annotation457 %%x1838) %%x1838))))) (%%gen-var460 (lambda (%%id1840) ((lambda (%%id1841) (if (annotation? %%id1841) (gensym (annotation-expression %%id1841)) (gensym %%id1841))) (if (%%syntax-object?40 %%id1840) (%%syntax-object-expression41 %%id1840) %%id1840)))) (%%lambda-var-list461 (lambda (%%vars1842) ((letrec ((%%lvl1843 (lambda (%%vars1844 %%ls1845 %%w1846) (if (pair? %%vars1844) (%%lvl1843 (cdr %%vars1844) (cons (%%wrap377 (car %%vars1844) %%w1846) %%ls1845) %%w1846) (if (%%id?225 %%vars1844) (cons (%%wrap377 %%vars1844 %%w1846) %%ls1845) (if (null? %%vars1844) %%ls1845 (if (%%syntax-object?40 %%vars1844) (%%lvl1843 (%%syntax-object-expression41 %%vars1844) %%ls1845 (%%join-wraps356 %%w1846 (%%syntax-object-wrap42 %%vars1844))) (if (annotation? %%vars1844) (%%lvl1843 (annotation-expression %%vars1844) %%ls1845 %%w1846) (cons %%vars1844 %%ls1845))))))))) %%lvl1843) %%vars1842 '() '(()))))) (begin (set! $sc-put-cte (lambda (%%id1847 %%b1848 %%top-token1849) (letrec ((%%sc-put-module1850 (lambda (%%exports1852 %%token1853 %%new-marks1854) (%%vfor-each425 (lambda (%%id1855) (%%store-import-binding350 %%id1855 %%token1853 %%new-marks1854)) %%exports1852))) (%%put-cte1851 (lambda (%%id1856 %%binding1857 %%token1858) ((lambda (%%sym1859) (begin (%%store-import-binding350 %%id1856 %%token1858 '()) (%%put-global-definition-hook48 %%sym1859 (if (if (eq? (%%binding-type200 %%binding1857) 'global) (eq? (%%binding-value201 %%binding1857) %%sym1859) #f) #f %%binding1857)))) (if (symbol? %%id1856) %%id1856 (%%id-var-name368 %%id1856 '(()))))))) ((lambda (%%binding1860) ((lambda (%%t1861) (if (memv %%t1861 '($module)) (begin ((lambda (%%iface1862) (%%sc-put-module1850 (%%interface-exports390 %%iface1862) (%%interface-token392 %%iface1862) '())) (%%binding-value201 %%binding1860)) (%%put-cte1851 %%id1847 %%binding1860 %%top-token1849)) (if (memv %%t1861 '(do-alias)) (%%store-import-binding350 %%id1847 %%top-token1849 '()) (if (memv %%t1861 '(do-import)) ((lambda (%%token1863) ((lambda (%%b1864) ((lambda (%%t1865) (if (memv %%t1865 '($module)) ((lambda (%%iface1866) ((lambda (%%exports1867) ((lambda () (begin (if (not (eq? (%%interface-token392 %%iface1866) %%token1863)) (syntax-error %%id1847 "import mismatch for module") (void)) (%%sc-put-module1850 (%%interface-exports390 %%iface1866) %%top-token1849 (%%import-mark-delta442 %%id1847 %%iface1866)))))) (%%interface-exports390 %%iface1866))) (%%binding-value201 %%b1864)) (syntax-error %%id1847 "unknown module"))) (%%binding-type200 %%b1864))) (%%lookup220 (%%id-var-name368 %%id1847 '(())) '()))) (%%binding-value201 %%b1848)) (%%put-cte1851 %%id1847 %%binding1860 %%top-token1849))))) (%%binding-type200 %%binding1860))) (%%make-transformer-binding221 %%b1848))))) (%%global-extend223 'core '##c-define-type (lambda (%%e1868 %%r1869 %%mr1870 %%w1871 %%ae1872 %%m?1873) (attach-source %%ae1872 (%%strip459 %%e1868 %%w1871)))) (%%global-extend223 'core '##c-declare (lambda (%%e1874 %%r1875 %%mr1876 %%w1877 %%ae1878 %%m?1879) (attach-source %%ae1878 (%%strip459 %%e1874 %%w1877)))) (%%global-extend223 'core '##c-initialize (lambda (%%e1880 %%r1881 %%mr1882 %%w1883 %%ae1884 %%m?1885) (attach-source %%ae1884 (%%strip459 %%e1880 %%w1883)))) (%%global-extend223 'core '##c-lambda (lambda (%%e1886 %%r1887 %%mr1888 %%w1889 %%ae1890 %%m?1891) (attach-source %%ae1890 (%%strip459 %%e1886 %%w1889)))) (%%global-extend223 'core '##c-define (lambda (%%e1892 %%r1893 %%mr1894 %%w1895 %%ae1896 %%m?1897) (attach-source %%ae1896 (%%strip459 %%e1892 %%w1895)))) (%%global-extend223 'core '##define (lambda (%%e1898 %%r1899 %%mr1900 %%w1901 %%ae1902 %%m?1903) (attach-source %%ae1902 (%%strip459 %%e1898 %%w1901)))) (%%global-extend223 'core '##define-macro (lambda (%%e1904 %%r1905 %%mr1906 %%w1907 %%ae1908 %%m?1909) (attach-source %%ae1908 (%%strip459 %%e1904 %%w1907)))) (%%global-extend223 'core '##define-syntax (lambda (%%e1910 %%r1911 %%mr1912 %%w1913 %%ae1914 %%m?1915) (attach-source %%ae1914 (%%strip459 %%e1910 %%w1913)))) (%%global-extend223 'core '##include (lambda (%%e1916 %%r1917 %%mr1918 %%w1919 %%ae1920 %%m?1921) (attach-source %%ae1920 (%%strip459 %%e1916 %%w1919)))) (%%global-extend223 'core '##declare (lambda (%%e1922 %%r1923 %%mr1924 %%w1925 %%ae1926 %%m?1927) (attach-source %%ae1926 (%%strip459 %%e1922 %%w1925)))) (%%global-extend223 'core '##namespace (lambda (%%e1928 %%r1929 %%mr1930 %%w1931 %%ae1932 %%m?1933) (attach-source %%ae1932 (%%strip459 %%e1928 %%w1931)))) (%%global-extend223 'local-syntax 'letrec-syntax #t) (%%global-extend223 'local-syntax 'let-syntax #f) (%%global-extend223 'core 'fluid-let-syntax (lambda (%%e1934 %%r1935 %%mr1936 %%w1937 %%ae1938 %%m?1939) ((lambda (%%tmp1940) ((lambda (%%tmp1941) (if (if %%tmp1941 (apply (lambda (%%_1942 %%var1943 %%val1944 %%e11945 %%e21946) (%%valid-bound-ids?373 %%var1943)) %%tmp1941) #f) (apply (lambda (%%_1948 %%var1949 %%val1950 %%e11951 %%e21952) ((lambda (%%names1953) (begin (for-each (lambda (%%id1954 %%n1955) ((lambda (%%t1956) (if (memv %%t1956 '(displaced-lexical)) (%%displaced-lexical-error218 (%%wrap377 %%id1954 %%w1937)) (void))) (%%binding-type200 (%%lookup220 %%n1955 %%r1935)))) %%var1949 %%names1953) ((lambda (%%b*1958) (%%chi-body440 (cons %%e11951 %%e21952) (%%source-wrap378 %%e1934 %%w1937 %%ae1938) (%%extend-env*215 %%names1953 %%b*1958 %%r1935) (%%extend-env*215 %%names1953 %%b*1958 %%mr1936) %%w1937 %%m?1939)) (map (lambda (%%x1960) (%%defer-or-eval-transformer222 %%local-eval-hook44 (%%chi435 %%x1960 %%mr1936 %%mr1936 %%w1937 #t))) %%val1950)))) (map (lambda (%%x1962) (%%id-var-name368 %%x1962 %%w1937)) %%var1949))) %%tmp1941) ((lambda (%%_1964) (syntax-error (%%source-wrap378 %%e1934 %%w1937 %%ae1938))) %%tmp1940))) ($syntax-dispatch %%tmp1940 '(any #(each (any any)) any . each-any)))) %%e1934))) (%%global-extend223 'core 'quote (lambda (%%e1965 %%r1966 %%mr1967 %%w1968 %%ae1969 %%m?1970) ((lambda (%%tmp1971) ((lambda (%%tmp1972) (if %%tmp1972 (apply (lambda (%%_1973 %%e1974) ((lambda (%%x1975) (if (self-eval? (%%strip459 %%e1974 %%w1968)) %%x1975 (build-source %%ae1969 (list (build-source %%ae1969 'quote) %%x1975)))) (attach-source %%ae1969 (%%strip459 %%e1974 %%w1968)))) %%tmp1972) ((lambda (%%_1976) (syntax-error (%%source-wrap378 %%e1965 %%w1968 %%ae1969))) %%tmp1971))) ($syntax-dispatch %%tmp1971 '(any any)))) %%e1965))) (%%global-extend223 'core 'syntax ((lambda () (letrec ((%%gen-syntax1977 (lambda (%%src1985 %%e1986 %%r1987 %%maps1988 %%ellipsis?1989 %%vec?1990) (if (%%id?225 %%e1986) ((lambda (%%label1991) ((lambda (%%b1992) (if (eq? (%%binding-type200 %%b1992) 'syntax) (call-with-values (lambda () ((lambda (%%var.lev1993) (%%gen-ref1978 %%src1985 (car %%var.lev1993) (cdr %%var.lev1993) %%maps1988)) (%%binding-value201 %%b1992))) (lambda (%%var1994 %%maps1995) (values (list 'ref %%var1994) %%maps1995))) (if (%%ellipsis?1989 %%e1986) (syntax-error %%src1985 "misplaced ellipsis in syntax form") (values (list 'quote %%e1986) %%maps1988)))) (%%lookup220 %%label1991 %%r1987))) (%%id-var-name368 %%e1986 '(()))) ((lambda (%%tmp1996) ((lambda (%%tmp1997) (if (if %%tmp1997 (apply (lambda (%%dots1998 %%e1999) (%%ellipsis?1989 %%dots1998)) %%tmp1997) #f) (apply (lambda (%%dots2000 %%e2001) (if %%vec?1990 (syntax-error %%src1985 "misplaced ellipsis in syntax template") (%%gen-syntax1977 %%src1985 %%e2001 %%r1987 %%maps1988 (lambda (%%x2002) #f) #f))) %%tmp1997) ((lambda (%%tmp2003) (if (if %%tmp2003 (apply (lambda (%%x2004 %%dots2005 %%y2006) (%%ellipsis?1989 %%dots2005)) %%tmp2003) #f) (apply (lambda (%%x2007 %%dots2008 %%y2009) ((letrec ((%%f2010 (lambda (%%y2011 %%k2012) ((lambda (%%tmp2013) ((lambda (%%tmp2014) (if (if %%tmp2014 (apply (lambda (%%dots2015 %%y2016) (%%ellipsis?1989 %%dots2015)) %%tmp2014) #f) (apply (lambda (%%dots2017 %%y2018) (%%f2010 %%y2018 (lambda (%%maps2019) (call-with-values (lambda () (%%k2012 (cons '() %%maps2019))) (lambda (%%x2020 %%maps2021) (if (null? (car %%maps2021)) (syntax-error %%src1985 "extra ellipsis in syntax form") (values (%%gen-mappend1980 %%x2020 (car %%maps2021)) (cdr %%maps2021)))))))) %%tmp2014) ((lambda (%%_2022) (call-with-values (lambda () (%%gen-syntax1977 %%src1985 %%y2011 %%r1987 %%maps1988 %%ellipsis?1989 %%vec?1990)) (lambda (%%y2023 %%maps2024) (call-with-values (lambda () (%%k2012 %%maps2024)) (lambda (%%x2025 %%maps2026) (values (%%gen-append1979 %%x2025 %%y2023) %%maps2026)))))) %%tmp2013))) ($syntax-dispatch %%tmp2013 '(any . any)))) %%y2011)))) %%f2010) %%y2009 (lambda (%%maps2027) (call-with-values (lambda () (%%gen-syntax1977 %%src1985 %%x2007 %%r1987 (cons '() %%maps2027) %%ellipsis?1989 #f)) (lambda (%%x2028 %%maps2029) (if (null? (car %%maps2029)) (syntax-error %%src1985 "extra ellipsis in syntax form") (values (%%gen-map1981 %%x2028 (car %%maps2029)) (cdr %%maps2029)))))))) %%tmp2003) ((lambda (%%tmp2030) (if %%tmp2030 (apply (lambda (%%x2031 %%y2032) (call-with-values (lambda () (%%gen-syntax1977 %%src1985 %%x2031 %%r1987 %%maps1988 %%ellipsis?1989 #f)) (lambda (%%xnew2033 %%maps2034) (call-with-values (lambda () (%%gen-syntax1977 %%src1985 %%y2032 %%r1987 %%maps2034 %%ellipsis?1989 %%vec?1990)) (lambda (%%ynew2035 %%maps2036) (values (%%gen-cons1982 %%e1986 %%x2031 %%y2032 %%xnew2033 %%ynew2035) %%maps2036)))))) %%tmp2030) ((lambda (%%tmp2037) (if %%tmp2037 (apply (lambda (%%x12038 %%x22039) ((lambda (%%ls2040) (call-with-values (lambda () (%%gen-syntax1977 %%src1985 %%ls2040 %%r1987 %%maps1988 %%ellipsis?1989 #t)) (lambda (%%lsnew2041 %%maps2042) (values (%%gen-vector1983 %%e1986 %%ls2040 %%lsnew2041) %%maps2042)))) (cons %%x12038 %%x22039))) %%tmp2037) ((lambda (%%_2044) (values (list 'quote %%e1986) %%maps1988)) %%tmp1996))) ($syntax-dispatch %%tmp1996 '#(vector (any . each-any)))))) ($syntax-dispatch %%tmp1996 '(any . any))))) ($syntax-dispatch %%tmp1996 '(any any . any))))) ($syntax-dispatch %%tmp1996 '(any any)))) %%e1986)))) (%%gen-ref1978 (lambda (%%src2045 %%var2046 %%level2047 %%maps2048) (if (fx= %%level2047 0) (values %%var2046 %%maps2048) (if (null? %%maps2048) (syntax-error %%src2045 "missing ellipsis in syntax form") (call-with-values (lambda () (%%gen-ref1978 %%src2045 %%var2046 (fx- %%level2047 1) (cdr %%maps2048))) (lambda (%%outer-var2049 %%outer-maps2050) ((lambda (%%b2051) (if %%b2051 (values (cdr %%b2051) %%maps2048) ((lambda (%%inner-var2052) (values %%inner-var2052 (cons (cons (cons %%outer-var2049 %%inner-var2052) (car %%maps2048)) %%outer-maps2050))) (%%gen-var460 'tmp)))) (assq %%outer-var2049 (car %%maps2048))))))))) (%%gen-append1979 (lambda (%%x2053 %%y2054) (if (equal? %%y2054 ''()) %%x2053 (list 'append %%x2053 %%y2054)))) (%%gen-mappend1980 (lambda (%%e2055 %%map-env2056) (list 'apply '(primitive append) (%%gen-map1981 %%e2055 %%map-env2056)))) (%%gen-map1981 (lambda (%%e2057 %%map-env2058) ((lambda (%%formals2059 %%actuals2060) (if (eq? (car %%e2057) 'ref) (car %%actuals2060) (if (andmap (lambda (%%x2061) (if (eq? (car %%x2061) 'ref) (memq (cadr %%x2061) %%formals2059) #f)) (cdr %%e2057)) (cons 'map (cons (list 'primitive (car %%e2057)) (map ((lambda (%%r2062) (lambda (%%x2063) (cdr (assq (cadr %%x2063) %%r2062)))) (map cons %%formals2059 %%actuals2060)) (cdr %%e2057)))) (cons 'map (cons (list 'lambda %%formals2059 %%e2057) %%actuals2060))))) (map cdr %%map-env2058) (map (lambda (%%x2064) (list 'ref (car %%x2064))) %%map-env2058)))) (%%gen-cons1982 (lambda (%%e2065 %%x2066 %%y2067 %%xnew2068 %%ynew2069) ((lambda (%%t2070) (if (memv %%t2070 '(quote)) (if (eq? (car %%xnew2068) 'quote) ((lambda (%%xnew2071 %%ynew2072) (if (if (eq? %%xnew2071 %%x2066) (eq? %%ynew2072 %%y2067) #f) (list 'quote %%e2065) (list 'quote (cons %%xnew2071 %%ynew2072)))) (cadr %%xnew2068) (cadr %%ynew2069)) (if (eq? (cadr %%ynew2069) '()) (list 'list %%xnew2068) (list 'cons %%xnew2068 %%ynew2069))) (if (memv %%t2070 '(list)) (cons 'list (cons %%xnew2068 (cdr %%ynew2069))) (list 'cons %%xnew2068 %%ynew2069)))) (car %%ynew2069)))) (%%gen-vector1983 (lambda (%%e2073 %%ls2074 %%lsnew2075) (if (eq? (car %%lsnew2075) 'quote) (if (eq? (cadr %%lsnew2075) %%ls2074) (list 'quote %%e2073) (list 'quote (list->vector (cadr %%lsnew2075)))) (if (eq? (car %%lsnew2075) 'list) (cons 'vector (cdr %%lsnew2075)) (list 'list->vector %%lsnew2075))))) (%%regen1984 (lambda (%%x2076) ((lambda (%%t2077) (if (memv %%t2077 '(ref)) (cadr %%x2076) (if (memv %%t2077 '(primitive)) (cadr %%x2076) (if (memv %%t2077 '(quote)) ((lambda (%%x2078) (if (self-eval? (cadr %%x2076)) %%x2078 (build-source #f (list (build-source #f 'quote) %%x2078)))) (attach-source #f (cadr %%x2076))) (if (memv %%t2077 '(lambda)) (build-source #f (list (build-source #f 'lambda) (cadr %%x2076) (%%regen1984 (caddr %%x2076)))) (if (memv %%t2077 '(map)) ((lambda (%%ls2079) (build-source #f (cons (if (fx= (length %%ls2079) 2) 'map 'map) %%ls2079))) (map %%regen1984 (cdr %%x2076))) (build-source #f (cons (car %%x2076) (map %%regen1984 (cdr %%x2076)))))))))) (car %%x2076))))) (lambda (%%e2080 %%r2081 %%mr2082 %%w2083 %%ae2084 %%m?2085) ((lambda (%%e2086) ((lambda (%%tmp2087) ((lambda (%%tmp2088) (if %%tmp2088 (apply (lambda (%%_2089 %%x2090) (call-with-values (lambda () (%%gen-syntax1977 %%e2086 %%x2090 %%r2081 '() %%ellipsis?456 #f)) (lambda (%%e2091 %%maps2092) (%%regen1984 %%e2091)))) %%tmp2088) ((lambda (%%_2093) (syntax-error %%e2086)) %%tmp2087))) ($syntax-dispatch %%tmp2087 '(any any)))) %%e2086)) (%%source-wrap378 %%e2080 %%w2083 %%ae2084))))))) (%%global-extend223 'core 'lambda (lambda (%%e2094 %%r2095 %%mr2096 %%w2097 %%ae2098 %%m?2099) ((lambda (%%tmp2100) ((lambda (%%tmp2101) (if %%tmp2101 (apply (lambda (%%_2102 %%c2103) (call-with-values (lambda () (%%chi-lambda-clause453 (%%source-wrap378 %%e2094 %%w2097 %%ae2098) %%c2103 %%r2095 %%mr2096 %%w2097 %%m?2099)) (lambda (%%emitter2104 %%dsssl-args2105 %%vars2106 %%dsssl-formals2107 %%orig-vars2108 %%body2109) ((lambda (%%t2110) (if (memv %%t2110 '(keyword)) (build-source %%ae2098 (list (build-source %%ae2098 'lambda) %%dsssl-args2105 (build-source %%ae2098 (list (build-source %%ae2098 'receive) %%vars2106 (build-source %%ae2098 (list (build-source %%ae2098 'apply) (build-source %%ae2098 (list (build-source %%ae2098 'lambda) %%dsssl-formals2107 (build-source %%ae2098 (cons (build-source %%ae2098 'values) %%orig-vars2108)))) %%dsssl-args2105)) %%body2109)))) (if (memv %%t2110 '(optional/rest)) (build-source %%ae2098 (list (build-source %%ae2098 'lambda) %%dsssl-formals2107 %%body2109)) (if (memv %%t2110 '(rnrs)) (build-source %%ae2098 (list (build-source %%ae2098 'lambda) %%vars2106 %%body2109)) (void))))) %%emitter2104)))) %%tmp2101) (syntax-error %%tmp2100))) ($syntax-dispatch %%tmp2100 '(any . any)))) %%e2094))) (%%global-extend223 'core 'letrec (lambda (%%e2111 %%r2112 %%mr2113 %%w2114 %%ae2115 %%m?2116) ((lambda (%%tmp2117) ((lambda (%%tmp2118) (if %%tmp2118 (apply (lambda (%%_2119 %%id2120 %%val2121 %%e12122 %%e22123) ((lambda (%%ids2124) (if (not (%%valid-bound-ids?373 %%ids2124)) (%%invalid-ids-error375 (map (lambda (%%x2125) (%%wrap377 %%x2125 %%w2114)) %%ids2124) (%%source-wrap378 %%e2111 %%w2114 %%ae2115) "bound variable") ((lambda (%%labels2126 %%new-vars2127) ((lambda (%%w2128 %%r2129) (%%build-letrec155 %%ae2115 %%new-vars2127 (map (lambda (%%x2130) (%%chi435 %%x2130 %%r2129 %%mr2113 %%w2128 %%m?2116)) %%val2121) (%%chi-body440 (cons %%e12122 %%e22123) (%%source-wrap378 %%e2111 %%w2128 %%ae2115) %%r2129 %%mr2113 %%w2128 %%m?2116))) (%%make-binding-wrap351 %%ids2124 %%labels2126 %%w2114) (%%extend-var-env*216 %%labels2126 %%new-vars2127 %%r2112))) (%%gen-labels284 %%ids2124) (map %%gen-var460 %%ids2124)))) %%id2120)) %%tmp2118) ((lambda (%%_2134) (syntax-error (%%source-wrap378 %%e2111 %%w2114 %%ae2115))) %%tmp2117))) ($syntax-dispatch %%tmp2117 '(any #(each (any any)) any . each-any)))) %%e2111))) (%%global-extend223 'core 'if (lambda (%%e2135 %%r2136 %%mr2137 %%w2138 %%ae2139 %%m?2140) ((lambda (%%tmp2141) ((lambda (%%tmp2142) (if %%tmp2142 (apply (lambda (%%_2143 %%test2144 %%then2145) (build-source %%ae2139 (list (build-source %%ae2139 'if) (%%chi435 %%test2144 %%r2136 %%mr2137 %%w2138 %%m?2140) (%%chi435 %%then2145 %%r2136 %%mr2137 %%w2138 %%m?2140) (%%chi-void455)))) %%tmp2142) ((lambda (%%tmp2146) (if %%tmp2146 (apply (lambda (%%_2147 %%test2148 %%then2149 %%else2150) (build-source %%ae2139 (list (build-source %%ae2139 'if) (%%chi435 %%test2148 %%r2136 %%mr2137 %%w2138 %%m?2140) (%%chi435 %%then2149 %%r2136 %%mr2137 %%w2138 %%m?2140) (%%chi435 %%else2150 %%r2136 %%mr2137 %%w2138 %%m?2140)))) %%tmp2146) ((lambda (%%_2151) (syntax-error (%%source-wrap378 %%e2135 %%w2138 %%ae2139))) %%tmp2141))) ($syntax-dispatch %%tmp2141 '(any any any any))))) ($syntax-dispatch %%tmp2141 '(any any any)))) %%e2135))) (%%global-extend223 'set! 'set! '()) (%%global-extend223 'alias 'alias '()) (%%global-extend223 'begin 'begin '()) (%%global-extend223 '$module-key '$module '()) (%%global-extend223 '$import '$import '()) (%%global-extend223 'define 'define '()) (%%global-extend223 'define-syntax 'define-syntax '()) (%%global-extend223 'eval-when 'eval-when '()) (%%global-extend223 'meta 'meta '()) (%%global-extend223 'core 'syntax-case ((lambda () (letrec ((%%convert-pattern2152 (lambda (%%pattern2156 %%keys2157) (letrec ((%%cvt*2158 (lambda (%%p*2160 %%n2161 %%ids2162) (if (null? %%p*2160) (values '() %%ids2162) (call-with-values (lambda () (%%cvt*2158 (cdr %%p*2160) %%n2161 %%ids2162)) (lambda (%%y2163 %%ids2164) (call-with-values (lambda () (%%cvt2159 (car %%p*2160) %%n2161 %%ids2164)) (lambda (%%x2165 %%ids2166) (values (cons %%x2165 %%y2163) %%ids2166)))))))) (%%cvt2159 (lambda (%%p2167 %%n2168 %%ids2169) (if (%%id?225 %%p2167) (if (%%bound-id-member?376 %%p2167 %%keys2157) (values (vector 'free-id %%p2167) %%ids2169) (values 'any (cons (cons %%p2167 %%n2168) %%ids2169))) ((lambda (%%tmp2170) ((lambda (%%tmp2171) (if (if %%tmp2171 (apply (lambda (%%x2172 %%dots2173) (%%ellipsis?456 %%dots2173)) %%tmp2171) #f) (apply (lambda (%%x2174 %%dots2175) (call-with-values (lambda () (%%cvt2159 %%x2174 (fx+ %%n2168 1) %%ids2169)) (lambda (%%p2176 %%ids2177) (values (if (eq? %%p2176 'any) 'each-any (vector 'each %%p2176)) %%ids2177)))) %%tmp2171) ((lambda (%%tmp2178) (if (if %%tmp2178 (apply (lambda (%%x2179 %%dots2180 %%y2181 %%z2182) (%%ellipsis?456 %%dots2180)) %%tmp2178) #f) (apply (lambda (%%x2183 %%dots2184 %%y2185 %%z2186) (call-with-values (lambda () (%%cvt2159 %%z2186 %%n2168 %%ids2169)) (lambda (%%z2187 %%ids2188) (call-with-values (lambda () (%%cvt*2158 %%y2185 %%n2168 %%ids2188)) (lambda (%%y2190 %%ids2191) (call-with-values (lambda () (%%cvt2159 %%x2183 (fx+ %%n2168 1) %%ids2191)) (lambda (%%x2192 %%ids2193) (values (vector 'each+ %%x2192 (reverse %%y2190) %%z2187) %%ids2193)))))))) %%tmp2178) ((lambda (%%tmp2194) (if %%tmp2194 (apply (lambda (%%x2195 %%y2196) (call-with-values (lambda () (%%cvt2159 %%y2196 %%n2168 %%ids2169)) (lambda (%%y2197 %%ids2198) (call-with-values (lambda () (%%cvt2159 %%x2195 %%n2168 %%ids2198)) (lambda (%%x2199 %%ids2200) (values (cons %%x2199 %%y2197) %%ids2200)))))) %%tmp2194) ((lambda (%%tmp2201) (if %%tmp2201 (apply (lambda () (values '() %%ids2169)) %%tmp2201) ((lambda (%%tmp2202) (if %%tmp2202 (apply (lambda (%%x2203) (call-with-values (lambda () (%%cvt2159 %%x2203 %%n2168 %%ids2169)) (lambda (%%p2205 %%ids2206) (values (vector 'vector %%p2205) %%ids2206)))) %%tmp2202) ((lambda (%%x2207) (values (vector 'atom (%%strip459 %%p2167 '(()))) %%ids2169)) %%tmp2170))) ($syntax-dispatch %%tmp2170 '#(vector each-any))))) ($syntax-dispatch %%tmp2170 '())))) ($syntax-dispatch %%tmp2170 '(any . any))))) ($syntax-dispatch %%tmp2170 '(any any . #(each+ any () any)))))) ($syntax-dispatch %%tmp2170 '(any any)))) %%p2167))))) (%%cvt2159 %%pattern2156 0 '())))) (%%build-dispatch-call2153 (lambda (%%pvars2208 %%exp2209 %%y2210 %%r2211 %%mr2212 %%m?2213) ((lambda (%%ids2214 %%levels2215) ((lambda (%%labels2216 %%new-vars2217) (build-source #f (cons 'apply (list (build-source #f (list (build-source #f 'lambda) %%new-vars2217 (%%chi435 %%exp2209 (%%extend-env*215 %%labels2216 (map (lambda (%%var2218 %%level2219) (cons 'syntax (cons %%var2218 %%level2219))) %%new-vars2217 (map cdr %%pvars2208)) %%r2211) %%mr2212 (%%make-binding-wrap351 %%ids2214 %%labels2216 '(())) %%m?2213))) %%y2210)))) (%%gen-labels284 %%ids2214) (map %%gen-var460 %%ids2214))) (map car %%pvars2208) (map cdr %%pvars2208)))) (%%gen-clause2154 (lambda (%%x2220 %%keys2221 %%clauses2222 %%r2223 %%mr2224 %%m?2225 %%pat2226 %%fender2227 %%exp2228) (call-with-values (lambda () (%%convert-pattern2152 %%pat2226 %%keys2221)) (lambda (%%p2229 %%pvars2230) (if (not (%%distinct-bound-ids?374 (map car %%pvars2230))) (%%invalid-ids-error375 (map car %%pvars2230) %%pat2226 "pattern variable") (if (not (andmap (lambda (%%x2231) (not (%%ellipsis?456 (car %%x2231)))) %%pvars2230)) (syntax-error %%pat2226 "misplaced ellipsis in syntax-case pattern") ((lambda (%%y2232) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%y2232) (build-source #f (list (build-source #f 'if) ((lambda (%%tmp2242) ((lambda (%%tmp2243) (if %%tmp2243 (apply (lambda () %%y2232) %%tmp2243) ((lambda (%%_2244) (build-source #f (list (build-source #f 'if) %%y2232 (%%build-dispatch-call2153 %%pvars2230 %%fender2227 %%y2232 %%r2223 %%mr2224 %%m?2225) ((lambda (%%x2245) (if (self-eval? #f) %%x2245 (build-source #f (list (build-source #f 'quote) %%x2245)))) (attach-source #f #f))))) %%tmp2242))) ($syntax-dispatch %%tmp2242 '#(atom #t)))) %%fender2227) (%%build-dispatch-call2153 %%pvars2230 %%exp2228 %%y2232 %%r2223 %%mr2224 %%m?2225) (%%gen-syntax-case2155 %%x2220 %%keys2221 %%clauses2222 %%r2223 %%mr2224 %%m?2225))))) (list (if (eq? %%p2229 'any) (build-source #f (cons 'list (list %%x2220))) (build-source #f (cons '$syntax-dispatch (list %%x2220 ((lambda (%%x2246) (if (self-eval? %%p2229) %%x2246 (build-source #f (list (build-source #f 'quote) %%x2246)))) (attach-source #f %%p2229)))))))))) (%%gen-var460 'tmp)))))))) (%%gen-syntax-case2155 (lambda (%%x2247 %%keys2248 %%clauses2249 %%r2250 %%mr2251 %%m?2252) (if (null? %%clauses2249) (build-source #f (cons 'syntax-error (list %%x2247))) ((lambda (%%tmp2253) ((lambda (%%tmp2254) (if %%tmp2254 (apply (lambda (%%pat2255 %%exp2256) (if (if (%%id?225 %%pat2255) (if (not (%%bound-id-member?376 %%pat2255 %%keys2248)) (not (%%ellipsis?456 %%pat2255)) #f) #f) ((lambda (%%label2257 %%var2258) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%var2258) (%%chi435 %%exp2256 (%%extend-env214 %%label2257 (cons 'syntax (cons %%var2258 0)) %%r2250) %%mr2251 (%%make-binding-wrap351 (list %%pat2255) (list %%label2257) '(())) %%m?2252))) (list %%x2247)))) (%%gen-label282) (%%gen-var460 %%pat2255)) (%%gen-clause2154 %%x2247 %%keys2248 (cdr %%clauses2249) %%r2250 %%mr2251 %%m?2252 %%pat2255 #t %%exp2256))) %%tmp2254) ((lambda (%%tmp2259) (if %%tmp2259 (apply (lambda (%%pat2260 %%fender2261 %%exp2262) (%%gen-clause2154 %%x2247 %%keys2248 (cdr %%clauses2249) %%r2250 %%mr2251 %%m?2252 %%pat2260 %%fender2261 %%exp2262)) %%tmp2259) ((lambda (%%_2263) (syntax-error (car %%clauses2249) "invalid syntax-case clause")) %%tmp2253))) ($syntax-dispatch %%tmp2253 '(any any any))))) ($syntax-dispatch %%tmp2253 '(any any)))) (car %%clauses2249)))))) (lambda (%%e2264 %%r2265 %%mr2266 %%w2267 %%ae2268 %%m?2269) ((lambda (%%e2270) ((lambda (%%tmp2271) ((lambda (%%tmp2272) (if %%tmp2272 (apply (lambda (%%_2273 %%val2274 %%key2275 %%m2276) (if (andmap (lambda (%%x2277) (if (%%id?225 %%x2277) (not (%%ellipsis?456 %%x2277)) #f)) %%key2275) ((lambda (%%x2279) (build-source %%ae2268 (cons (build-source #f (list (build-source #f 'lambda) (list %%x2279) (%%gen-syntax-case2155 %%x2279 %%key2275 %%m2276 %%r2265 %%mr2266 %%m?2269))) (list (%%chi435 %%val2274 %%r2265 %%mr2266 '(()) %%m?2269))))) (%%gen-var460 'tmp)) (syntax-error %%e2270 "invalid literals list in"))) %%tmp2272) (syntax-error %%tmp2271))) ($syntax-dispatch %%tmp2271 '(any any each-any . each-any)))) %%e2270)) (%%source-wrap378 %%e2264 %%w2267 %%ae2268))))))) (%%global-extend223 'macro 'include (lambda (%%x2282) ((lambda (%%tmp2283) ((lambda (%%tmp2284) (if %%tmp2284 (apply (lambda (%%include2285 %%filename2286) (datum->syntax-object %%include2285 (##include-file-as-a-begin-expr (%%syntax-object-expression41 %%x2282)))) %%tmp2284) (syntax-error %%tmp2283))) ($syntax-dispatch %%tmp2283 '(any any)))) %%x2282))) (%%put-cte-hook46 'module (lambda (%%x2287) (letrec ((%%proper-export?2288 (lambda (%%e2289) ((lambda (%%tmp2290) ((lambda (%%tmp2291) (if %%tmp2291 (apply (lambda (%%id2292 %%e2293) (if (identifier? %%id2292) (andmap %%proper-export?2288 %%e2293) #f)) %%tmp2291) ((lambda (%%id2295) (identifier? %%id2295)) %%tmp2290))) ($syntax-dispatch %%tmp2290 '(any . each-any)))) %%e2289)))) ((lambda (%%tmp2296) ((lambda (%%orig2297) ((lambda (%%tmp2298) ((lambda (%%tmp2299) (if %%tmp2299 (apply (lambda (%%_2300 %%e2301 %%d2302) (if (andmap %%proper-export?2288 %%e2301) (list '#structure(#4# begin #12=(#5# #structure(#7# #(_ e d) #(#5# #5# #5#) #("i" "i" "i")) . #13=(#structure(#7# #(orig) #(#5#) #("i")) #structure(#7# (proper-export?) (#5#) ("i")) #structure(#7# #(x) #(#5#) #("i")) #8# . #10#))) (cons '#structure(#4# $module #12#) (cons %%orig2297 (cons '#structure(#4# anon #12#) (cons %%e2301 %%d2302)))) (cons '#structure(#4# $import #12#) (cons %%orig2297 '#structure(#4# (#f anon) #12#)))) (syntax-error %%x2287 "invalid exports list in"))) %%tmp2299) ((lambda (%%tmp2306) (if (if %%tmp2306 (apply (lambda (%%_2307 %%m2308 %%e2309 %%d2310) (identifier? %%m2308)) %%tmp2306) #f) (apply (lambda (%%_2311 %%m2312 %%e2313 %%d2314) (if (andmap %%proper-export?2288 %%e2313) (cons '#structure(#4# $module (#5# #structure(#7# #(_ m e d) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #13#)) (cons %%orig2297 (cons %%m2312 (cons %%e2313 %%d2314)))) (syntax-error %%x2287 "invalid exports list in"))) %%tmp2306) (syntax-error %%tmp2298))) ($syntax-dispatch %%tmp2298 '(any any each-any . each-any))))) ($syntax-dispatch %%tmp2298 '(any each-any . each-any)))) %%x2287)) %%tmp2296)) %%x2287)))) ((lambda () (letrec ((%%$module-exports2318 (lambda (%%m2320 %%r2321) ((lambda (%%b2322) ((lambda (%%t2323) (if (memv %%t2323 '($module)) ((lambda (%%interface2324) ((lambda (%%new-marks2325) ((lambda () (%%vmap424 (lambda (%%x2326) ((lambda (%%id2327) (%%make-syntax-object36 (syntax-object->datum %%id2327) ((lambda (%%marks2328) (%%make-wrap234 %%marks2328 (if (eq? (car %%marks2328) #f) (cons 'shift (%%wrap-subst236 '((top)))) (%%wrap-subst236 '((top)))))) (%%join-marks357 %%new-marks2325 (%%wrap-marks235 (%%syntax-object-wrap42 %%id2327)))))) (if (pair? %%x2326) (car %%x2326) %%x2326))) (%%interface-exports390 %%interface2324))))) (%%import-mark-delta442 %%m2320 %%interface2324))) (%%binding-value201 %%b2322)) (if (memv %%t2323 '(displaced-lexical)) (%%displaced-lexical-error218 %%m2320) (syntax-error %%m2320 "unknown module")))) (%%binding-type200 %%b2322))) (%%r2321 %%m2320)))) (%%$import-help2319 (lambda (%%orig2329 %%import-only?2330) (lambda (%%r2331) (letrec ((%%difference2332 (lambda (%%ls12338 %%ls22339) (if (null? %%ls12338) %%ls12338 (if (%%bound-id-member?376 (car %%ls12338) %%ls22339) (%%difference2332 (cdr %%ls12338) %%ls22339) (cons (car %%ls12338) (%%difference2332 (cdr %%ls12338) %%ls22339)))))) (%%prefix-add2333 (lambda (%%prefix-id2340) ((lambda (%%prefix2341) (lambda (%%id2342) (datum->syntax-object %%id2342 (string->symbol (string-append %%prefix2341 (symbol->string (syntax-object->datum %%id2342))))))) (symbol->string (syntax-object->datum %%prefix-id2340))))) (%%prefix-drop2334 (lambda (%%prefix-id2343) ((lambda (%%prefix2344) (lambda (%%id2345) ((lambda (%%s2346) ((lambda (%%np2347 %%ns2348) (begin (if (not (if (>= %%ns2348 %%np2347) (string=? (substring %%s2346 0 %%np2347) %%prefix2344) #f)) (syntax-error %%id2345 (string-append "missing expected prefix " %%prefix2344)) (void)) (datum->syntax-object %%id2345 (string->symbol (substring %%s2346 %%np2347 %%ns2348))))) (string-length %%prefix2344) (string-length %%s2346))) (symbol->string (syntax-object->datum %%id2345))))) (symbol->string (syntax-object->datum %%prefix-id2343))))) (%%gen-mid2335 (lambda (%%mid2349) (datum->syntax-object %%mid2349 (%%generate-id52 ((lambda (%%x2350) ((lambda (%%e2351) (if (annotation? %%e2351) (annotation-expression %%e2351) %%e2351)) (if (%%syntax-object?40 %%x2350) (%%syntax-object-expression41 %%x2350) %%x2350))) %%mid2349))))) (%%modspec2336 (lambda (%%m2352 %%exports?2353) ((lambda (%%tmp2354) ((lambda (%%tmp2355) (if %%tmp2355 (apply (lambda (%%orig2356 %%import-only?2357) ((lambda (%%tmp2358) ((lambda (%%tmp2359) (if (if %%tmp2359 (apply (lambda (%%m2360 %%id2361) (andmap identifier? %%id2361)) %%tmp2359) #f) (apply (lambda (%%m2363 %%id2364) (call-with-values (lambda () (%%modspec2336 %%m2363 #f)) (lambda (%%mid2365 %%d2366 %%exports2367) ((lambda (%%tmp2368) ((lambda (%%tmp2369) (if %%tmp2369 (apply (lambda (%%d2370 %%tmid2371) (values %%mid2365 (list '#structure(#4# begin #14=(#5# #structure(#7# #(d tmid) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m id) #(#5# #5#) #("i" "i")) . #15=(#structure(#7# #(orig import-only?) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(m exports?) #(#5# #5#) #("i" "i")) . #16=(#structure(#7# (modspec* modspec gen-mid prefix-drop prefix-add difference) (#5# #5# #5# #5# #5# #5#) ("i" "i" "i" "i" "i" "i")) #structure(#7# #(r) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(orig import-only?) #(#5# #5#) #("i" "i")) #structure(#7# ($import-help $module-exports) (#5# #5#) ("i" "i")) #8# . #10#)))) (list '#structure(#4# $module #14#) %%orig2356 %%tmid2371 %%id2364 %%d2370) (list '#structure(#4# $import #14#) %%orig2356 %%import-only?2357 %%tmid2371)) (if %%exports?2353 %%id2364 #f))) %%tmp2369) (syntax-error %%tmp2368))) ($syntax-dispatch %%tmp2368 '(any any)))) (list %%d2366 (%%gen-mid2335 %%mid2365)))))) %%tmp2359) ((lambda (%%tmp2374) (if (if %%tmp2374 (apply (lambda (%%m2375 %%id2376) (andmap identifier? %%id2376)) %%tmp2374) #f) (apply (lambda (%%m2378 %%id2379) (call-with-values (lambda () (%%modspec2336 %%m2378 #t)) (lambda (%%mid2380 %%d2381 %%exports2382) ((lambda (%%tmp2383) ((lambda (%%tmp2384) (if %%tmp2384 (apply (lambda (%%d2385 %%tmid2386 %%id2387) (values %%mid2380 (list '#structure(#4# begin #17=(#5# #structure(#7# #(d tmid id) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m id) #(#5# #5#) #("i" "i")) . #15#)) (list '#structure(#4# $module #17#) %%orig2356 %%tmid2386 %%id2387 %%d2385) (list '#structure(#4# $import #17#) %%orig2356 %%import-only?2357 %%tmid2386)) (if %%exports?2353 %%id2387 #f))) %%tmp2384) (syntax-error %%tmp2383))) ($syntax-dispatch %%tmp2383 '(any any each-any)))) (list %%d2381 (%%gen-mid2335 %%mid2380) (%%difference2332 %%exports2382 %%id2379)))))) %%tmp2374) ((lambda (%%tmp2391) (if (if %%tmp2391 (apply (lambda (%%m2392 %%prefix-id2393) (identifier? %%prefix-id2393)) %%tmp2391) #f) (apply (lambda (%%m2394 %%prefix-id2395) (call-with-values (lambda () (%%modspec2336 %%m2394 #t)) (lambda (%%mid2396 %%d2397 %%exports2398) ((lambda (%%tmp2399) ((lambda (%%tmp2400) (if %%tmp2400 (apply (lambda (%%d2401 %%tmid2402 %%old-id2403 %%tmp2404 %%id2405) (values %%mid2396 (list '#structure(#4# begin #18=(#5# #structure(#7# #(d tmid old-id tmp id) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m prefix-id) #(#5# #5#) #("i" "i")) . #15#)) (cons '#structure(#4# $module #18#) (cons %%orig2356 (cons %%tmid2402 (cons (map list %%id2405 %%tmp2404) (cons (cons '#structure(#4# $module #18#) (cons %%orig2356 (cons %%tmid2402 (cons (map list %%tmp2404 %%old-id2403) (cons %%d2401 (map (lambda (%%tmp2411 %%tmp2410) (list '#structure(#4# alias #18#) %%tmp2410 %%tmp2411)) %%old-id2403 %%tmp2404)))))) (cons (list '#structure(#4# $import #18#) %%orig2356 %%import-only?2357 %%tmid2402) (map (lambda (%%tmp2413 %%tmp2412) (list '#structure(#4# alias #18#) %%tmp2412 %%tmp2413)) %%tmp2404 %%id2405))))))) (list '#structure(#4# $import #18#) %%orig2356 %%import-only?2357 %%tmid2402)) (if %%exports?2353 %%id2405 #f))) %%tmp2400) (syntax-error %%tmp2399))) ($syntax-dispatch %%tmp2399 '(any any each-any each-any each-any)))) (list %%d2397 (%%gen-mid2335 %%mid2396) %%exports2398 (generate-temporaries %%exports2398) (map (%%prefix-add2333 %%prefix-id2395) %%exports2398)))))) %%tmp2391) ((lambda (%%tmp2415) (if (if %%tmp2415 (apply (lambda (%%m2416 %%prefix-id2417) (identifier? %%prefix-id2417)) %%tmp2415) #f) (apply (lambda (%%m2418 %%prefix-id2419) (call-with-values (lambda () (%%modspec2336 %%m2418 #t)) (lambda (%%mid2420 %%d2421 %%exports2422) ((lambda (%%tmp2423) ((lambda (%%tmp2424) (if %%tmp2424 (apply (lambda (%%d2425 %%tmid2426 %%old-id2427 %%tmp2428 %%id2429) (values %%mid2420 (list '#structure(#4# begin #19=(#5# #structure(#7# #(d tmid old-id tmp id) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m prefix-id) #(#5# #5#) #("i" "i")) . #15#)) (cons '#structure(#4# $module #19#) (cons %%orig2356 (cons %%tmid2426 (cons (map list %%id2429 %%tmp2428) (cons (cons '#structure(#4# $module #19#) (cons %%orig2356 (cons %%tmid2426 (cons (map list %%tmp2428 %%old-id2427) (cons %%d2425 (map (lambda (%%tmp2435 %%tmp2434) (list '#structure(#4# alias #19#) %%tmp2434 %%tmp2435)) %%old-id2427 %%tmp2428)))))) (cons (list '#structure(#4# $import #19#) %%orig2356 %%import-only?2357 %%tmid2426) (map (lambda (%%tmp2437 %%tmp2436) (list '#structure(#4# alias #19#) %%tmp2436 %%tmp2437)) %%tmp2428 %%id2429))))))) (list '#structure(#4# $import #19#) %%orig2356 %%import-only?2357 %%tmid2426)) (if %%exports?2353 %%id2429 #f))) %%tmp2424) (syntax-error %%tmp2423))) ($syntax-dispatch %%tmp2423 '(any any each-any each-any each-any)))) (list %%d2421 (%%gen-mid2335 %%mid2420) %%exports2422 (generate-temporaries %%exports2422) (map (%%prefix-drop2334 %%prefix-id2419) %%exports2422)))))) %%tmp2415) ((lambda (%%tmp2439) (if (if %%tmp2439 (apply (lambda (%%m2440 %%new-id2441 %%old-id2442) (if (andmap identifier? %%new-id2441) (andmap identifier? %%old-id2442) #f)) %%tmp2439) #f) (apply (lambda (%%m2445 %%new-id2446 %%old-id2447) (call-with-values (lambda () (%%modspec2336 %%m2445 #t)) (lambda (%%mid2448 %%d2449 %%exports2450) ((lambda (%%tmp2451) ((lambda (%%tmp2452) (if %%tmp2452 (apply (lambda (%%d2453 %%tmid2454 %%tmp2455 %%other-id2456) (values %%mid2448 (list '#structure(#4# begin #20=(#5# #structure(#7# #(d tmid tmp other-id) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m new-id old-id) #(#5# #5# #5#) #("i" "i" "i")) . #15#)) (cons '#structure(#4# $module #20#) (cons %%orig2356 (cons %%tmid2454 (cons (append (map list %%new-id2446 %%tmp2455) %%other-id2456) (cons (cons '#structure(#4# $module #20#) (cons %%orig2356 (cons %%tmid2454 (cons (append %%other-id2456 (map list %%tmp2455 %%old-id2447)) (cons %%d2453 (map (lambda (%%tmp2464 %%tmp2463) (list '#structure(#4# alias #20#) %%tmp2463 %%tmp2464)) %%old-id2447 %%tmp2455)))))) (cons (list '#structure(#4# $import #20#) %%orig2356 %%import-only?2357 %%tmid2454) (map (lambda (%%tmp2466 %%tmp2465) (list '#structure(#4# alias #20#) %%tmp2465 %%tmp2466)) %%tmp2455 %%new-id2446))))))) (list '#structure(#4# $import #20#) %%orig2356 %%import-only?2357 %%tmid2454)) (if %%exports?2353 (append %%new-id2446 %%other-id2456) #f))) %%tmp2452) (syntax-error %%tmp2451))) ($syntax-dispatch %%tmp2451 '(any any each-any each-any)))) (list %%d2449 (%%gen-mid2335 %%mid2448) (generate-temporaries %%old-id2447) (%%difference2332 %%exports2450 %%old-id2447)))))) %%tmp2439) ((lambda (%%tmp2471) (if (if %%tmp2471 (apply (lambda (%%m2472 %%new-id2473 %%old-id2474) (if (andmap identifier? %%new-id2473) (andmap identifier? %%old-id2474) #f)) %%tmp2471) #f) (apply (lambda (%%m2477 %%new-id2478 %%old-id2479) (call-with-values (lambda () (%%modspec2336 %%m2477 #t)) (lambda (%%mid2480 %%d2481 %%exports2482) ((lambda (%%tmp2483) ((lambda (%%tmp2484) (if %%tmp2484 (apply (lambda (%%d2485 %%tmid2486 %%other-id2487) (values %%mid2480 (list '#structure(#4# begin #21=(#5# #structure(#7# #(d tmid other-id) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(mid d exports) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(m new-id old-id) #(#5# #5# #5#) #("i" "i" "i")) . #15#)) (cons '#structure(#4# $module #21#) (cons %%orig2356 (cons %%tmid2486 (cons (append (map list %%new-id2478 %%old-id2479) %%other-id2487) (cons %%d2485 (map (lambda (%%tmp2492 %%tmp2491) (list '#structure(#4# alias #21#) %%tmp2491 %%tmp2492)) %%old-id2479 %%new-id2478)))))) (list '#structure(#4# $import #21#) %%orig2356 %%import-only?2357 %%tmid2486)) (if %%exports?2353 (append %%new-id2478 %%other-id2487) #f))) %%tmp2484) (syntax-error %%tmp2483))) ($syntax-dispatch %%tmp2483 '(any any each-any)))) (list %%d2481 (%%gen-mid2335 %%mid2480) %%exports2482))))) %%tmp2471) ((lambda (%%tmp2495) (if (if %%tmp2495 (apply (lambda (%%mid2496) (identifier? %%mid2496)) %%tmp2495) #f) (apply (lambda (%%mid2497) (values %%mid2497 (list '#structure(#4# $import (#5# #structure(#7# #(mid) #(#5#) #("i")) . #15#)) %%orig2356 %%import-only?2357 %%mid2497) (if %%exports?2353 (%%$module-exports2318 %%mid2497 %%r2331) #f))) %%tmp2495) ((lambda (%%tmp2498) (if (if %%tmp2498 (apply (lambda (%%mid2499) (identifier? %%mid2499)) %%tmp2498) #f) (apply (lambda (%%mid2500) (values %%mid2500 (list '#structure(#4# $import (#5# #structure(#7# #(mid) #(#5#) #("i")) . #15#)) %%orig2356 %%import-only?2357 %%mid2500) (if %%exports?2353 (%%$module-exports2318 %%mid2500 %%r2331) #f))) %%tmp2498) ((lambda (%%_2501) (syntax-error %%m2352 "invalid module specifier")) %%tmp2358))) ($syntax-dispatch %%tmp2358 '(any))))) (list %%tmp2358)))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# alias #22=(#5# . #15#))) any . #(each (any any))))))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# rename #22#)) any . #(each (any any))))))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# drop-prefix #22#)) any any))))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# add-prefix #22#)) any any))))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# except #22#)) any . each-any))))) ($syntax-dispatch %%tmp2358 '(#(free-id #structure(#4# only #22#)) any . each-any)))) %%m2352)) %%tmp2355) (syntax-error %%tmp2354))) ($syntax-dispatch %%tmp2354 '(any any)))) (list %%orig2329 %%import-only?2330)))) (%%modspec*2337 (lambda (%%m2502) (call-with-values (lambda () (%%modspec2336 %%m2502 #f)) (lambda (%%mid2503 %%d2504 %%exports2505) %%d2504))))) ((lambda (%%tmp2506) ((lambda (%%tmp2507) (if %%tmp2507 (apply (lambda (%%_2508 %%m2509) ((lambda (%%tmp2510) ((lambda (%%tmp2511) (if %%tmp2511 (apply (lambda (%%d2512) (cons '#structure(#4# begin (#5# #structure(#7# #(d) #(#5#) #("i")) #structure(#7# #(_ m) #(#5# #5#) #("i" "i")) . #16#)) %%d2512)) %%tmp2511) (syntax-error %%tmp2510))) ($syntax-dispatch %%tmp2510 'each-any))) (map %%modspec*2337 %%m2509))) %%tmp2507) (syntax-error %%tmp2506))) ($syntax-dispatch %%tmp2506 '(any . each-any)))) %%orig2329)))))) (begin (%%put-cte-hook46 'import (lambda (%%orig2515) (%%$import-help2319 %%orig2515 #f))) (%%put-cte-hook46 'import-only (lambda (%%orig2516) (%%$import-help2319 %%orig2516 #t))))))) ((lambda () (letrec ((%%make-sc-expander2517 (lambda (%%ctem2518 %%rtem2519) (lambda (%%x2520) ((lambda (%%env2521) (if (if (pair? %%x2520) (equal? (car %%x2520) %%noexpand35) #f) (cadr %%x2520) (%%chi-top*381 %%x2520 '() (%%env-wrap323 %%env2521) %%ctem2518 %%rtem2519 #f (%%env-top-ribcage321 %%env2521)))) (interaction-environment)))))) (begin (set! sc-expand ((lambda (%%ctem2522 %%rtem2523) (%%make-sc-expander2517 %%ctem2522 %%rtem2523)) '(E) '(E))) (set! sc-compile-expand ((lambda (%%ctem2524 %%rtem2525) (%%make-sc-expander2517 %%ctem2524 %%rtem2525)) '(L C) '(L))))))) (set! $make-environment (lambda (%%token2526 %%mutable?2527) ((lambda (%%top-ribcage2528) (%%make-env319 %%top-ribcage2528 (%%make-wrap234 (%%wrap-marks235 '((top))) (cons %%top-ribcage2528 (%%wrap-subst236 '((top))))))) (%%make-top-ribcage300 %%token2526 %%mutable?2527)))) (set! environment? (lambda (%%x2529) (%%env?320 %%x2529))) (set! interaction-environment ((lambda (%%e2530) (lambda () %%e2530)) ($make-environment '*top* #t))) (set! identifier? (lambda (%%x2531) (%%nonsymbol-id?224 %%x2531))) (set! datum->syntax-object (lambda (%%id2532 %%datum2533) (begin ((lambda (%%x2534) (if (not (%%nonsymbol-id?224 %%x2534)) (error (string-append #23="(in " (symbol->string 'datum->syntax-object) #24=") invalid argument") %%x2534) (void))) %%id2532) (%%make-syntax-object36 %%datum2533 (%%syntax-object-wrap42 %%id2532))))) (set! syntax->list (lambda (%%orig-ls2535) ((letrec ((%%f2536 (lambda (%%ls2537) ((lambda (%%tmp2538) ((lambda (%%tmp2539) (if %%tmp2539 (apply (lambda () '()) %%tmp2539) ((lambda (%%tmp2540) (if %%tmp2540 (apply (lambda (%%x2541 %%r2542) (cons %%x2541 (%%f2536 %%r2542))) %%tmp2540) ((lambda (%%_2543) (error "(in syntax->list) invalid argument" %%orig-ls2535)) %%tmp2538))) ($syntax-dispatch %%tmp2538 '(any . any))))) ($syntax-dispatch %%tmp2538 '()))) %%ls2537)))) %%f2536) %%orig-ls2535))) (set! syntax->vector (lambda (%%v2544) ((lambda (%%tmp2545) ((lambda (%%tmp2546) (if %%tmp2546 (apply (lambda (%%x2547) (list->vector (syntax->list %%x2547))) %%tmp2546) ((lambda (%%_2549) (error "(in syntax->vector) invalid argument" %%v2544)) %%tmp2545))) ($syntax-dispatch %%tmp2545 '#(vector each-any)))) %%v2544))) (set! syntax-object->datum (lambda (%%x2550) (%%strip459 %%x2550 '(())))) (set! generate-temporaries ((lambda (%%n2551) (lambda (%%ls2552) (begin ((lambda (%%x2553) (if (not (list? %%x2553)) (error (string-append #23# (symbol->string 'generate-temporaries) #24#) %%x2553) (void))) %%ls2552) (map (lambda (%%x2554) (begin (set! %%n2551 (+ %%n2551 1)) (%%wrap377 (string->symbol (string-append "t" (number->string %%n2551))) '((tmp))))) %%ls2552)))) 0)) (set! free-identifier=? (lambda (%%x2555 %%y2556) (begin ((lambda (%%x2557) (if (not (%%nonsymbol-id?224 %%x2557)) (error (string-append #23# (symbol->string 'free-identifier=?) #24#) %%x2557) (void))) %%x2555) ((lambda (%%x2558) (if (not (%%nonsymbol-id?224 %%x2558)) (error (string-append #23# (symbol->string 'free-identifier=?) #24#) %%x2558) (void))) %%y2556) (%%free-id=?369 %%x2555 %%y2556)))) (set! bound-identifier=? (lambda (%%x2559 %%y2560) (begin ((lambda (%%x2561) (if (not (%%nonsymbol-id?224 %%x2561)) (error (string-append #23# (symbol->string 'bound-identifier=?) #24#) %%x2561) (void))) %%x2559) ((lambda (%%x2562) (if (not (%%nonsymbol-id?224 %%x2562)) (error (string-append #23# (symbol->string 'bound-identifier=?) #24#) %%x2562) (void))) %%y2560) (%%bound-id=?372 %%x2559 %%y2560)))) (set! literal-identifier=? (lambda (%%x2563 %%y2564) (begin ((lambda (%%x2565) (if (not (%%nonsymbol-id?224 %%x2565)) (error (string-append #23# (symbol->string 'literal-identifier=?) #24#) %%x2565) (void))) %%x2563) ((lambda (%%x2566) (if (not (%%nonsymbol-id?224 %%x2566)) (error (string-append #23# (symbol->string 'literal-identifier=?) #24#) %%x2566) (void))) %%y2564) (%%literal-id=?370 %%x2563 %%y2564)))) (set! syntax-error (lambda (%%object2568 . %%messages2567) (begin (for-each (lambda (%%x2569) ((lambda (%%x2570) (if (not (string? %%x2570)) (error (string-append #23# (symbol->string 'syntax-error) #24#) %%x2570) (void))) %%x2569)) %%messages2567) ((lambda (%%messages2571 %%locat2572) (apply ##raise-expression-parsing-exception (cons 'psyntax-error (cons %%locat2572 (append %%messages2571 (list (%%strip459 %%object2568 '(())))))))) (if (null? %%messages2567) '(invalid syntax) %%messages2567) ((lambda (%%t2573) (if %%t2573 %%t2573 (if (if (%%syntax-object?40 %%object2568) (annotation? (%%syntax-object-expression41 %%object2568)) #f) (%%syntax-object-expression41 %%object2568) #f))) (annotation? %%object2568)))))) ((lambda () (letrec ((%%match-each2574 (lambda (%%e2581 %%p2582 %%w2583) (if (annotation? %%e2581) (%%match-each2574 (annotation-expression %%e2581) %%p2582 %%w2583) (if (pair? %%e2581) ((lambda (%%first2584) (if %%first2584 ((lambda (%%rest2585) (if %%rest2585 (cons %%first2584 %%rest2585) #f)) (%%match-each2574 (cdr %%e2581) %%p2582 %%w2583)) #f)) (%%match2580 (car %%e2581) %%p2582 %%w2583 '())) (if (null? %%e2581) '() (if (%%syntax-object?40 %%e2581) (%%match-each2574 (%%syntax-object-expression41 %%e2581) %%p2582 (%%join-wraps356 %%w2583 (%%syntax-object-wrap42 %%e2581))) #f)))))) (%%match-each+2575 (lambda (%%e2586 %%x-pat2587 %%y-pat2588 %%z-pat2589 %%w2590 %%r2591) ((letrec ((%%f2592 (lambda (%%e2593 %%w2594) (if (pair? %%e2593) (call-with-values (lambda () (%%f2592 (cdr %%e2593) %%w2594)) (lambda (%%xr*2595 %%y-pat2596 %%r2597) (if %%r2597 (if (null? %%y-pat2596) ((lambda (%%xr2598) (if %%xr2598 (values (cons %%xr2598 %%xr*2595) %%y-pat2596 %%r2597) (values #f #f #f))) (%%match2580 (car %%e2593) %%x-pat2587 %%w2594 '())) (values '() (cdr %%y-pat2596) (%%match2580 (car %%e2593) (car %%y-pat2596) %%w2594 %%r2597))) (values #f #f #f)))) (if (annotation? %%e2593) (%%f2592 (annotation-expression %%e2593) %%w2594) (if (%%syntax-object?40 %%e2593) (%%f2592 (%%syntax-object-expression41 %%e2593) (%%join-wraps356 %%w2594 (%%syntax-object-wrap42 %%e2593))) (values '() %%y-pat2588 (%%match2580 %%e2593 %%z-pat2589 %%w2594 %%r2591)))))))) %%f2592) %%e2586 %%w2590))) (%%match-each-any2576 (lambda (%%e2599 %%w2600) (if (annotation? %%e2599) (%%match-each-any2576 (annotation-expression %%e2599) %%w2600) (if (pair? %%e2599) ((lambda (%%l2601) (if %%l2601 (cons (%%wrap377 (car %%e2599) %%w2600) %%l2601) #f)) (%%match-each-any2576 (cdr %%e2599) %%w2600)) (if (null? %%e2599) '() (if (%%syntax-object?40 %%e2599) (%%match-each-any2576 (%%syntax-object-expression41 %%e2599) (%%join-wraps356 %%w2600 (%%syntax-object-wrap42 %%e2599))) #f)))))) (%%match-empty2577 (lambda (%%p2602 %%r2603) (if (null? %%p2602) %%r2603 (if (eq? %%p2602 'any) (cons '() %%r2603) (if (pair? %%p2602) (%%match-empty2577 (car %%p2602) (%%match-empty2577 (cdr %%p2602) %%r2603)) (if (eq? %%p2602 'each-any) (cons '() %%r2603) ((lambda (%%t2604) (if (memv %%t2604 '(each)) (%%match-empty2577 (vector-ref %%p2602 1) %%r2603) (if (memv %%t2604 '(each+)) (%%match-empty2577 (vector-ref %%p2602 1) (%%match-empty2577 (reverse (vector-ref %%p2602 2)) (%%match-empty2577 (vector-ref %%p2602 3) %%r2603))) (if (memv %%t2604 '(free-id atom)) %%r2603 (if (memv %%t2604 '(vector)) (%%match-empty2577 (vector-ref %%p2602 1) %%r2603) (void)))))) (vector-ref %%p2602 0)))))))) (%%combine2578 (lambda (%%r*2605 %%r2606) (if (null? (car %%r*2605)) %%r2606 (cons (map car %%r*2605) (%%combine2578 (map cdr %%r*2605) %%r2606))))) (%%match*2579 (lambda (%%e2607 %%p2608 %%w2609 %%r2610) (if (null? %%p2608) (if (null? %%e2607) %%r2610 #f) (if (pair? %%p2608) (if (pair? %%e2607) (%%match2580 (car %%e2607) (car %%p2608) %%w2609 (%%match2580 (cdr %%e2607) (cdr %%p2608) %%w2609 %%r2610)) #f) (if (eq? %%p2608 'each-any) ((lambda (%%l2611) (if %%l2611 (cons %%l2611 %%r2610) #f)) (%%match-each-any2576 %%e2607 %%w2609)) ((lambda (%%t2612) (if (memv %%t2612 '(each)) (if (null? %%e2607) (%%match-empty2577 (vector-ref %%p2608 1) %%r2610) ((lambda (%%r*2613) (if %%r*2613 (%%combine2578 %%r*2613 %%r2610) #f)) (%%match-each2574 %%e2607 (vector-ref %%p2608 1) %%w2609))) (if (memv %%t2612 '(free-id)) (if (%%id?225 %%e2607) (if (%%literal-id=?370 (%%wrap377 %%e2607 %%w2609) (vector-ref %%p2608 1)) %%r2610 #f) #f) (if (memv %%t2612 '(each+)) (call-with-values (lambda () (%%match-each+2575 %%e2607 (vector-ref %%p2608 1) (vector-ref %%p2608 2) (vector-ref %%p2608 3) %%w2609 %%r2610)) (lambda (%%xr*2614 %%y-pat2615 %%r2616) (if %%r2616 (if (null? %%y-pat2615) (if (null? %%xr*2614) (%%match-empty2577 (vector-ref %%p2608 1) %%r2616) (%%combine2578 %%xr*2614 %%r2616)) #f) #f))) (if (memv %%t2612 '(atom)) (if (equal? (vector-ref %%p2608 1) (%%strip459 %%e2607 %%w2609)) %%r2610 #f) (if (memv %%t2612 '(vector)) (if (vector? %%e2607) (%%match2580 (vector->list %%e2607) (vector-ref %%p2608 1) %%w2609 %%r2610) #f) (void))))))) (vector-ref %%p2608 0))))))) (%%match2580 (lambda (%%e2617 %%p2618 %%w2619 %%r2620) (if (not %%r2620) #f (if (eq? %%p2618 'any) (cons (%%wrap377 %%e2617 %%w2619) %%r2620) (if (%%syntax-object?40 %%e2617) (%%match*2579 ((lambda (%%e2621) (if (annotation? %%e2621) (annotation-expression %%e2621) %%e2621)) (%%syntax-object-expression41 %%e2617)) %%p2618 (%%join-wraps356 %%w2619 (%%syntax-object-wrap42 %%e2617)) %%r2620) (%%match*2579 ((lambda (%%e2622) (if (annotation? %%e2622) (annotation-expression %%e2622) %%e2622)) %%e2617) %%p2618 %%w2619 %%r2620))))))) (set! $syntax-dispatch (lambda (%%e2623 %%p2624) (if (eq? %%p2624 'any) (list %%e2623) (if (%%syntax-object?40 %%e2623) (%%match*2579 ((lambda (%%e2625) (if (annotation? %%e2625) (annotation-expression %%e2625) %%e2625)) (%%syntax-object-expression41 %%e2623)) %%p2624 (%%syntax-object-wrap42 %%e2623) '()) (%%match*2579 ((lambda (%%e2626) (if (annotation? %%e2626) (annotation-expression %%e2626) %%e2626)) %%e2623) %%p2624 '(()) '())))))))))))) ($sc-put-cte '#structure(#4# with-syntax (#5# #structure(#7# #(with-syntax) #(#5#) #(with-syntax)))) (lambda (%%x2627) ((lambda (%%tmp2628) ((lambda (%%tmp2629) (if %%tmp2629 (apply (lambda (%%_2630 %%e12631 %%e22632) (cons '#structure(#4# begin (#5# #structure(#7# #(_ e1 e2) #(#5# #5# #5#) #("i" "i" "i")) . #25=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (cons %%e12631 %%e22632))) %%tmp2629) ((lambda (%%tmp2634) (if %%tmp2634 (apply (lambda (%%_2635 %%out2636 %%in2637 %%e12638 %%e22639) (list '#structure(#4# syntax-case #26=(#5# #structure(#7# #(_ out in e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) . #25#)) %%in2637 '() (list %%out2636 (cons '#structure(#4# begin #26#) (cons %%e12638 %%e22639))))) %%tmp2634) ((lambda (%%tmp2641) (if %%tmp2641 (apply (lambda (%%_2642 %%out2643 %%in2644 %%e12645 %%e22646) (list '#structure(#4# syntax-case #27=(#5# #structure(#7# #(_ out in e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) . #25#)) (cons '#structure(#4# list #27#) %%in2644) '() (list %%out2643 (cons '#structure(#4# begin #27#) (cons %%e12645 %%e22646))))) %%tmp2641) (syntax-error %%tmp2628))) ($syntax-dispatch %%tmp2628 '(any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2628 '(any ((any any)) any . each-any))))) ($syntax-dispatch %%tmp2628 '(any () any . each-any)))) %%x2627)) '*top*) ($sc-put-cte '#structure(#4# with-implicit (#5# #structure(#7# #(with-implicit) #(#5#) #(with-implicit)))) (lambda (%%x2650) ((lambda (%%tmp2651) ((lambda (%%tmp2652) (if (if %%tmp2652 (apply (lambda (%%dummy2653 %%tid2654 %%id2655 %%e12656 %%e22657) (andmap identifier? (cons %%tid2654 %%id2655))) %%tmp2652) #f) (apply (lambda (%%dummy2659 %%tid2660 %%id2661 %%e12662 %%e22663) (list '#structure(#4# begin #28=(#5# #structure(#7# #(dummy tid id e1 e2) #((#29="m" . #9#) #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#29# . #9#)) #("i")) . #10#)) (list '#structure(#4# unless #28#) (list '#structure(#4# identifier? #28#) (list '#structure(#4# syntax #28#) %%tid2660)) (cons '#structure(#4# syntax-error #28#) (cons (list '#structure(#4# syntax #28#) %%tid2660) '#structure(#4# ("non-identifier with-implicit template") #28#)))) (cons '#structure(#4# with-syntax #28#) (cons (map (lambda (%%tmp2664) (list %%tmp2664 (list '#structure(#4# datum->syntax-object #28#) (list '#structure(#4# syntax #28#) %%tid2660) (list '#structure(#4# quote #28#) %%tmp2664)))) %%id2661) (cons %%e12662 %%e22663))))) %%tmp2652) (syntax-error %%tmp2651))) ($syntax-dispatch %%tmp2651 '(any (any . each-any) any . each-any)))) %%x2650)) '*top*) ($sc-put-cte '#structure(#4# datum (#5# #structure(#7# #(datum) #(#5#) #(datum)))) (lambda (%%x2666) ((lambda (%%tmp2667) ((lambda (%%tmp2668) (if %%tmp2668 (apply (lambda (%%dummy2669 %%x2670) (list '#structure(#4# syntax-object->datum #30=(#5# #structure(#7# #(dummy x) #((#31="m" . #9#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#31# . #9#)) #("i")) . #10#)) (list '#structure(#4# syntax #30#) %%x2670))) %%tmp2668) (syntax-error %%tmp2667))) ($syntax-dispatch %%tmp2667 '(any any)))) %%x2666)) '*top*) ($sc-put-cte '#structure(#4# syntax-rules (#5# #structure(#7# #(syntax-rules) #(#5#) #(syntax-rules)))) (lambda (%%x2671) (letrec ((%%clause2672 (lambda (%%y2673) ((lambda (%%tmp2674) ((lambda (%%tmp2675) (if %%tmp2675 (apply (lambda (%%keyword2676 %%pattern2677 %%template2678) (list (cons '#structure(#4# dummy #32=(#5# #structure(#7# #(keyword pattern template) #(#5# #5# #5#) #("i" "i" "i")) . #33=(#structure(#7# () () ()) #structure(#7# #(y) #(#5#) #("i")) . #34=(#structure(#7# (clause) (#5#) ("i")) #structure(#7# #(x) #(#5#) #("i")) . #10#)))) %%pattern2677) (list '#structure(#4# syntax #32#) %%template2678))) %%tmp2675) ((lambda (%%tmp2679) (if %%tmp2679 (apply (lambda (%%keyword2680 %%pattern2681 %%fender2682 %%template2683) (list (cons '#structure(#4# dummy #35=(#5# #structure(#7# #(keyword pattern fender template) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #33#)) %%pattern2681) %%fender2682 (list '#structure(#4# syntax #35#) %%template2683))) %%tmp2679) ((lambda (%%_2684) (syntax-error %%x2671)) %%tmp2674))) ($syntax-dispatch %%tmp2674 '((any . any) any any))))) ($syntax-dispatch %%tmp2674 '((any . any) any)))) %%y2673)))) ((lambda (%%tmp2685) ((lambda (%%tmp2686) (if (if %%tmp2686 (apply (lambda (%%_2687 %%k2688 %%cl2689) (andmap identifier? %%k2688)) %%tmp2686) #f) (apply (lambda (%%_2691 %%k2692 %%cl2693) ((lambda (%%tmp2694) ((lambda (%%tmp2695) (if %%tmp2695 (apply (lambda (%%cl2696) (list '#structure(#4# lambda #36=(#5# #structure(#7# #(cl) #(#5#) #("i")) #structure(#7# #(_ k cl) #(#5# #5# #5#) #("i" "i" "i")) . #34#)) '#structure(#4# (x) #36#) (cons '#structure(#4# syntax-case #36#) (cons '#structure(#4# x #36#) (cons %%k2692 %%cl2696))))) %%tmp2695) (syntax-error %%tmp2694))) ($syntax-dispatch %%tmp2694 'each-any))) (map %%clause2672 %%cl2693))) %%tmp2686) (syntax-error %%tmp2685))) ($syntax-dispatch %%tmp2685 '(any each-any . each-any)))) %%x2671))) '*top*) ($sc-put-cte '#structure(#4# or (#5# #structure(#7# #(or) #(#5#) #(or)))) (lambda (%%x2700) ((lambda (%%tmp2701) ((lambda (%%tmp2702) (if %%tmp2702 (apply (lambda (%%_2703) '#structure(#4# #f (#5# #structure(#7# #(_) #(#5#) #("i")) . #37=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#)))) %%tmp2702) ((lambda (%%tmp2704) (if %%tmp2704 (apply (lambda (%%_2705 %%e2706) %%e2706) %%tmp2704) ((lambda (%%tmp2707) (if %%tmp2707 (apply (lambda (%%_2708 %%e12709 %%e22710 %%e32711) (list '#structure(#4# let #38=(#5# #structure(#7# #(_ e1 e2 e3) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #37#)) (list (list '#structure(#4# t #38#) %%e12709)) (list '#structure(#4# if #38#) '#structure(#4# t #38#) '#structure(#4# t #38#) (cons '#structure(#4# or #38#) (cons %%e22710 %%e32711))))) %%tmp2707) (syntax-error %%tmp2701))) ($syntax-dispatch %%tmp2701 '(any any any . each-any))))) ($syntax-dispatch %%tmp2701 '(any any))))) ($syntax-dispatch %%tmp2701 '(any)))) %%x2700)) '*top*) ($sc-put-cte '#structure(#4# and (#5# #structure(#7# #(and) #(#5#) #(and)))) (lambda (%%x2713) ((lambda (%%tmp2714) ((lambda (%%tmp2715) (if %%tmp2715 (apply (lambda (%%_2716 %%e12717 %%e22718 %%e32719) (cons '#structure(#4# if #39=(#5# #structure(#7# #(_ e1 e2 e3) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #40=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (cons %%e12717 (cons (cons '#structure(#4# and #39#) (cons %%e22718 %%e32719)) '#structure(#4# (#f) #39#))))) %%tmp2715) ((lambda (%%tmp2721) (if %%tmp2721 (apply (lambda (%%_2722 %%e2723) %%e2723) %%tmp2721) ((lambda (%%tmp2724) (if %%tmp2724 (apply (lambda (%%_2725) '#structure(#4# #t (#5# #structure(#7# #(_) #(#5#) #("i")) . #40#))) %%tmp2724) (syntax-error %%tmp2714))) ($syntax-dispatch %%tmp2714 '(any))))) ($syntax-dispatch %%tmp2714 '(any any))))) ($syntax-dispatch %%tmp2714 '(any any any . each-any)))) %%x2713)) '*top*) ($sc-put-cte '#structure(#4# let (#5# #structure(#7# #(let) #(#5#) #(let)))) (lambda (%%x2726) ((lambda (%%tmp2727) ((lambda (%%tmp2728) (if (if %%tmp2728 (apply (lambda (%%_2729 %%x2730 %%v2731 %%e12732 %%e22733) (andmap identifier? %%x2730)) %%tmp2728) #f) (apply (lambda (%%_2735 %%x2736 %%v2737 %%e12738 %%e22739) (cons (cons '#structure(#4# lambda (#5# #structure(#7# #(_ x v e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) . #41=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (cons %%x2736 (cons %%e12738 %%e22739))) %%v2737)) %%tmp2728) ((lambda (%%tmp2743) (if (if %%tmp2743 (apply (lambda (%%_2744 %%f2745 %%x2746 %%v2747 %%e12748 %%e22749) (andmap identifier? (cons %%f2745 %%x2746))) %%tmp2743) #f) (apply (lambda (%%_2751 %%f2752 %%x2753 %%v2754 %%e12755 %%e22756) (cons (list '#structure(#4# letrec #42=(#5# #structure(#7# #(_ f x v e1 e2) #(#5# #5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i" "i")) . #41#)) (list (list %%f2752 (cons '#structure(#4# lambda #42#) (cons %%x2753 (cons %%e12755 %%e22756))))) %%f2752) %%v2754)) %%tmp2743) (syntax-error %%tmp2727))) ($syntax-dispatch %%tmp2727 '(any any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2727 '(any #(each (any any)) any . each-any)))) %%x2726)) '*top*) ($sc-put-cte '#structure(#4# let* (#5# #structure(#7# #(let*) #(#5#) #(let*)))) (lambda (%%x2760) ((lambda (%%tmp2761) ((lambda (%%tmp2762) (if (if %%tmp2762 (apply (lambda (%%let*2763 %%x2764 %%v2765 %%e12766 %%e22767) (andmap identifier? %%x2764)) %%tmp2762) #f) (apply (lambda (%%let*2769 %%x2770 %%v2771 %%e12772 %%e22773) ((letrec ((%%f2774 (lambda (%%bindings2775) (if (null? %%bindings2775) (cons '#structure(#4# let (#5# . #43=(#structure(#7# () () ()) #structure(#7# #(bindings) #(#5#) #("i")) #structure(#7# #(f) #(#5#) #("i")) #structure(#7# #(let* x v e1 e2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (cons '() (cons %%e12772 %%e22773))) ((lambda (%%tmp2777) ((lambda (%%tmp2778) (if %%tmp2778 (apply (lambda (%%body2779 %%binding2780) (list '#structure(#4# let (#5# #structure(#7# #(body binding) #(#5# #5#) #("i" "i")) . #43#)) (list %%binding2780) %%body2779)) %%tmp2778) (syntax-error %%tmp2777))) ($syntax-dispatch %%tmp2777 '(any any)))) (list (%%f2774 (cdr %%bindings2775)) (car %%bindings2775))))))) %%f2774) (map list %%x2770 %%v2771))) %%tmp2762) (syntax-error %%tmp2761))) ($syntax-dispatch %%tmp2761 '(any #(each (any any)) any . each-any)))) %%x2760)) '*top*) ($sc-put-cte '#structure(#4# cond (#5# #structure(#7# #(cond) #(#5#) #(cond)))) (lambda (%%x2783) ((lambda (%%tmp2784) ((lambda (%%tmp2785) (if %%tmp2785 (apply (lambda (%%_2786 %%m12787 %%m22788) ((letrec ((%%f2789 (lambda (%%clause2790 %%clauses2791) (if (null? %%clauses2791) ((lambda (%%tmp2792) ((lambda (%%tmp2793) (if %%tmp2793 (apply (lambda (%%e12794 %%e22795) (cons '#structure(#4# begin (#5# #structure(#7# #(e1 e2) #(#5# #5#) #("i" "i")) . #44=(#structure(#7# () () ()) #structure(#7# #(clause clauses) #(#5# #5#) #("i" "i")) #structure(#7# #(f) #(#5#) #("i")) #structure(#7# #(_ m1 m2) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (cons %%e12794 %%e22795))) %%tmp2793) ((lambda (%%tmp2797) (if %%tmp2797 (apply (lambda (%%e02798) (cons '#structure(#4# let #45=(#5# #structure(#7# #(e0) #(#5#) #("i")) . #44#)) (cons (list (list '#structure(#4# t #45#) %%e02798)) '#structure(#4# ((if t t)) #45#)))) %%tmp2797) ((lambda (%%tmp2799) (if %%tmp2799 (apply (lambda (%%e02800 %%e12801) (list '#structure(#4# let #46=(#5# #structure(#7# #(e0 e1) #(#5# #5#) #("i" "i")) . #44#)) (list (list '#structure(#4# t #46#) %%e02800)) (list '#structure(#4# if #46#) '#structure(#4# t #46#) (cons %%e12801 '#structure(#4# (t) #46#))))) %%tmp2799) ((lambda (%%tmp2802) (if %%tmp2802 (apply (lambda (%%e02803 %%e12804 %%e22805) (list '#structure(#4# if #47=(#5# #structure(#7# #(e0 e1 e2) #(#5# #5# #5#) #("i" "i" "i")) . #44#)) %%e02803 (cons '#structure(#4# begin #47#) (cons %%e12804 %%e22805)))) %%tmp2802) ((lambda (%%_2807) (syntax-error %%x2783)) %%tmp2792))) ($syntax-dispatch %%tmp2792 '(any any . each-any))))) ($syntax-dispatch %%tmp2792 '(any #(free-id #structure(#4# => #48=(#5# . #44#))) any))))) ($syntax-dispatch %%tmp2792 '(any))))) ($syntax-dispatch %%tmp2792 '(#(free-id #structure(#4# else #48#)) any . each-any)))) %%clause2790) ((lambda (%%tmp2808) ((lambda (%%rest2809) ((lambda (%%tmp2810) ((lambda (%%tmp2811) (if %%tmp2811 (apply (lambda (%%e02812) (list '#structure(#4# let #49=(#5# #structure(#7# #(e0) #(#5#) #("i")) . #50=(#structure(#7# #(rest) #(#5#) #("i")) . #44#))) (list (list '#structure(#4# t #49#) %%e02812)) (list '#structure(#4# if #49#) '#structure(#4# t #49#) '#structure(#4# t #49#) %%rest2809))) %%tmp2811) ((lambda (%%tmp2813) (if %%tmp2813 (apply (lambda (%%e02814 %%e12815) (list '#structure(#4# let #51=(#5# #structure(#7# #(e0 e1) #(#5# #5#) #("i" "i")) . #50#)) (list (list '#structure(#4# t #51#) %%e02814)) (list '#structure(#4# if #51#) '#structure(#4# t #51#) (cons %%e12815 '#structure(#4# (t) #51#)) %%rest2809))) %%tmp2813) ((lambda (%%tmp2816) (if %%tmp2816 (apply (lambda (%%e02817 %%e12818 %%e22819) (list '#structure(#4# if #52=(#5# #structure(#7# #(e0 e1 e2) #(#5# #5# #5#) #("i" "i" "i")) . #50#)) %%e02817 (cons '#structure(#4# begin #52#) (cons %%e12818 %%e22819)) %%rest2809)) %%tmp2816) ((lambda (%%_2821) (syntax-error %%x2783)) %%tmp2810))) ($syntax-dispatch %%tmp2810 '(any any . each-any))))) ($syntax-dispatch %%tmp2810 '(any #(free-id #structure(#4# => (#5# . #50#))) any))))) ($syntax-dispatch %%tmp2810 '(any)))) %%clause2790)) %%tmp2808)) (%%f2789 (car %%clauses2791) (cdr %%clauses2791))))))) %%f2789) %%m12787 %%m22788)) %%tmp2785) (syntax-error %%tmp2784))) ($syntax-dispatch %%tmp2784 '(any any . each-any)))) %%x2783)) '*top*) ($sc-put-cte '#structure(#4# do (#5# #structure(#7# #(do) #(#5#) #(do)))) (lambda (%%orig-x2823) ((lambda (%%tmp2824) ((lambda (%%tmp2825) (if %%tmp2825 (apply (lambda (%%_2826 %%var2827 %%init2828 %%step2829 %%e02830 %%e12831 %%c2832) ((lambda (%%tmp2833) ((lambda (%%tmp2834) (if %%tmp2834 (apply (lambda (%%step2835) ((lambda (%%tmp2836) ((lambda (%%tmp2837) (if %%tmp2837 (apply (lambda () (list '#structure(#4# let #53=(#5# . #54=(#structure(#7# #(step) #(#5#) #("i")) #structure(#7# #(_ var init step e0 e1 c) #(#5# #5# #5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(orig-x) #(#5#) #("i")) . #10#))) '#structure(#4# do #53#) (map list %%var2827 %%init2828) (list '#structure(#4# if #53#) (list '#structure(#4# not #53#) %%e02830) (cons '#structure(#4# begin #53#) (append %%c2832 (list (cons '#structure(#4# do #53#) %%step2835))))))) %%tmp2837) ((lambda (%%tmp2842) (if %%tmp2842 (apply (lambda (%%e12843 %%e22844) (list '#structure(#4# let #55=(#5# #structure(#7# #(e1 e2) #(#5# #5#) #("i" "i")) . #54#)) '#structure(#4# do #55#) (map list %%var2827 %%init2828) (list '#structure(#4# if #55#) %%e02830 (cons '#structure(#4# begin #55#) (cons %%e12843 %%e22844)) (cons '#structure(#4# begin #55#) (append %%c2832 (list (cons '#structure(#4# do #55#) %%step2835))))))) %%tmp2842) (syntax-error %%tmp2836))) ($syntax-dispatch %%tmp2836 '(any . each-any))))) ($syntax-dispatch %%tmp2836 '()))) %%e12831)) %%tmp2834) (syntax-error %%tmp2833))) ($syntax-dispatch %%tmp2833 'each-any))) (map (lambda (%%v2851 %%s2852) ((lambda (%%tmp2853) ((lambda (%%tmp2854) (if %%tmp2854 (apply (lambda () %%v2851) %%tmp2854) ((lambda (%%tmp2855) (if %%tmp2855 (apply (lambda (%%e2856) %%e2856) %%tmp2855) ((lambda (%%_2857) (syntax-error %%orig-x2823)) %%tmp2853))) ($syntax-dispatch %%tmp2853 '(any))))) ($syntax-dispatch %%tmp2853 '()))) %%s2852)) %%var2827 %%step2829))) %%tmp2825) (syntax-error %%tmp2824))) ($syntax-dispatch %%tmp2824 '(any #(each (any any . any)) (any . each-any) . each-any)))) %%orig-x2823)) '*top*) ($sc-put-cte '#structure(#4# quasiquote (#5# #structure(#7# #(quasiquote) #(#5#) #(quasiquote)))) ((lambda () (letrec ((%%quasi2860 (lambda (%%p2867 %%lev2868) ((lambda (%%tmp2869) ((lambda (%%tmp2870) (if %%tmp2870 (apply (lambda (%%p2871) (if (= %%lev2868 0) (list '#structure(#4# "value" #56=(#5# #structure(#7# #(p) #(#5#) #("i")) . #57=(#structure(#7# () () ()) #structure(#7# #(p lev) #(#5# #5#) #("i" "i")) #58=#structure(#7# (emit quasivector quasilist* quasiappend quasicons vquasi quasi) (#5# #5# #5# #5# #5# #5# #5#) ("i" "i" "i" "i" "i" "i" "i")) . #10#))) %%p2871) (%%quasicons2862 '#structure(#4# ("quote" unquote) #56#) (%%quasi2860 (list %%p2871) (- %%lev2868 1))))) %%tmp2870) ((lambda (%%tmp2872) (if %%tmp2872 (apply (lambda (%%p2873) (%%quasicons2862 '#structure(#4# ("quote" quasiquote) (#5# #structure(#7# #(p) #(#5#) #("i")) . #57#)) (%%quasi2860 (list %%p2873) (+ %%lev2868 1)))) %%tmp2872) ((lambda (%%tmp2874) (if %%tmp2874 (apply (lambda (%%p2875 %%q2876) ((lambda (%%tmp2877) ((lambda (%%tmp2878) (if %%tmp2878 (apply (lambda (%%p2879) (if (= %%lev2868 0) (%%quasilist*2864 (map (lambda (%%tmp2880) (list '#structure(#4# "value" #59=(#5# #structure(#7# #(p) #(#5#) #("i")) . #60=(#structure(#7# #(p q) #(#5# #5#) #("i" "i")) . #57#))) %%tmp2880)) %%p2879) (%%quasi2860 %%q2876 %%lev2868)) (%%quasicons2862 (%%quasicons2862 '#structure(#4# ("quote" unquote) #59#) (%%quasi2860 %%p2879 (- %%lev2868 1))) (%%quasi2860 %%q2876 %%lev2868)))) %%tmp2878) ((lambda (%%tmp2882) (if %%tmp2882 (apply (lambda (%%p2883) (if (= %%lev2868 0) (%%quasiappend2863 (map (lambda (%%tmp2884) (list '#structure(#4# "value" #61=(#5# #structure(#7# #(p) #(#5#) #("i")) . #60#)) %%tmp2884)) %%p2883) (%%quasi2860 %%q2876 %%lev2868)) (%%quasicons2862 (%%quasicons2862 '#structure(#4# ("quote" unquote-splicing) #61#) (%%quasi2860 %%p2883 (- %%lev2868 1))) (%%quasi2860 %%q2876 %%lev2868)))) %%tmp2882) ((lambda (%%_2886) (%%quasicons2862 (%%quasi2860 %%p2875 %%lev2868) (%%quasi2860 %%q2876 %%lev2868))) %%tmp2877))) ($syntax-dispatch %%tmp2877 '(#(free-id #structure(#4# unquote-splicing #62=(#5# . #60#))) . each-any))))) ($syntax-dispatch %%tmp2877 '(#(free-id #structure(#4# unquote #62#)) . each-any)))) %%p2875)) %%tmp2874) ((lambda (%%tmp2887) (if %%tmp2887 (apply (lambda (%%x2888) (%%quasivector2865 (%%vquasi2861 %%x2888 %%lev2868))) %%tmp2887) ((lambda (%%p2890) (list '#structure(#4# "quote" (#5# #structure(#7# #(p) #(#5#) #("i")) . #57#)) %%p2890)) %%tmp2869))) ($syntax-dispatch %%tmp2869 '#(vector each-any))))) ($syntax-dispatch %%tmp2869 '(any . any))))) ($syntax-dispatch %%tmp2869 '(#(free-id #structure(#4# quasiquote #63=(#5# . #57#))) any))))) ($syntax-dispatch %%tmp2869 '(#(free-id #structure(#4# unquote #63#)) any)))) %%p2867))) (%%vquasi2861 (lambda (%%p2891 %%lev2892) ((lambda (%%tmp2893) ((lambda (%%tmp2894) (if %%tmp2894 (apply (lambda (%%p2895 %%q2896) ((lambda (%%tmp2897) ((lambda (%%tmp2898) (if %%tmp2898 (apply (lambda (%%p2899) (if (= %%lev2892 0) (%%quasilist*2864 (map (lambda (%%tmp2900) (list '#structure(#4# "value" #64=(#5# #structure(#7# #(p) #(#5#) #("i")) . #65=(#structure(#7# #(p q) #(#5# #5#) #("i" "i")) . #66=(#structure(#7# () () ()) #structure(#7# #(p lev) #(#5# #5#) #("i" "i")) #58# . #10#)))) %%tmp2900)) %%p2899) (%%vquasi2861 %%q2896 %%lev2892)) (%%quasicons2862 (%%quasicons2862 '#structure(#4# ("quote" unquote) #64#) (%%quasi2860 %%p2899 (- %%lev2892 1))) (%%vquasi2861 %%q2896 %%lev2892)))) %%tmp2898) ((lambda (%%tmp2902) (if %%tmp2902 (apply (lambda (%%p2903) (if (= %%lev2892 0) (%%quasiappend2863 (map (lambda (%%tmp2904) (list '#structure(#4# "value" #67=(#5# #structure(#7# #(p) #(#5#) #("i")) . #65#)) %%tmp2904)) %%p2903) (%%vquasi2861 %%q2896 %%lev2892)) (%%quasicons2862 (%%quasicons2862 '#structure(#4# ("quote" unquote-splicing) #67#) (%%quasi2860 %%p2903 (- %%lev2892 1))) (%%vquasi2861 %%q2896 %%lev2892)))) %%tmp2902) ((lambda (%%_2906) (%%quasicons2862 (%%quasi2860 %%p2895 %%lev2892) (%%vquasi2861 %%q2896 %%lev2892))) %%tmp2897))) ($syntax-dispatch %%tmp2897 '(#(free-id #structure(#4# unquote-splicing #68=(#5# . #65#))) . each-any))))) ($syntax-dispatch %%tmp2897 '(#(free-id #structure(#4# unquote #68#)) . each-any)))) %%p2895)) %%tmp2894) ((lambda (%%tmp2907) (if %%tmp2907 (apply (lambda () '#structure(#4# ("quote" ()) (#5# . #66#))) %%tmp2907) (syntax-error %%tmp2893))) ($syntax-dispatch %%tmp2893 '())))) ($syntax-dispatch %%tmp2893 '(any . any)))) %%p2891))) (%%quasicons2862 (lambda (%%x2908 %%y2909) ((lambda (%%tmp2910) ((lambda (%%tmp2911) (if %%tmp2911 (apply (lambda (%%x2912 %%y2913) ((lambda (%%tmp2914) ((lambda (%%tmp2915) (if %%tmp2915 (apply (lambda (%%dy2916) ((lambda (%%tmp2917) ((lambda (%%tmp2918) (if %%tmp2918 (apply (lambda (%%dx2919) (list '#structure(#4# "quote" (#5# #structure(#7# #(dx) #(#5#) #("i")) . #69=(#structure(#7# #(dy) #(#5#) #("i")) . #70=(#structure(#7# #(x y) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x y) #(#5# #5#) #("i" "i")) #58# . #10#)))) (cons %%dx2919 %%dy2916))) %%tmp2918) ((lambda (%%_2920) (if (null? %%dy2916) (list '#structure(#4# "list" #71=(#5# #structure(#7# #(_) #(#5#) #("i")) . #69#)) %%x2912) (list '#structure(#4# "list*" #71#) %%x2912 %%y2913))) %%tmp2917))) ($syntax-dispatch %%tmp2917 '(#(atom "quote") any)))) %%x2912)) %%tmp2915) ((lambda (%%tmp2921) (if %%tmp2921 (apply (lambda (%%stuff2922) (cons '#structure(#4# "list" (#5# #structure(#7# #(stuff) #(#5#) #("i")) . #70#)) (cons %%x2912 %%stuff2922))) %%tmp2921) ((lambda (%%tmp2923) (if %%tmp2923 (apply (lambda (%%stuff2924) (cons '#structure(#4# "list*" (#5# #structure(#7# #(stuff) #(#5#) #("i")) . #70#)) (cons %%x2912 %%stuff2924))) %%tmp2923) ((lambda (%%_2925) (list '#structure(#4# "list*" (#5# #structure(#7# #(_) #(#5#) #("i")) . #70#)) %%x2912 %%y2913)) %%tmp2914))) ($syntax-dispatch %%tmp2914 '(#(atom "list*") . any))))) ($syntax-dispatch %%tmp2914 '(#(atom "list") . any))))) ($syntax-dispatch %%tmp2914 '(#(atom "quote") any)))) %%y2913)) %%tmp2911) (syntax-error %%tmp2910))) ($syntax-dispatch %%tmp2910 '(any any)))) (list %%x2908 %%y2909)))) (%%quasiappend2863 (lambda (%%x2926 %%y2927) ((lambda (%%tmp2928) ((lambda (%%tmp2929) (if %%tmp2929 (apply (lambda () (if (null? %%x2926) '#structure(#4# ("quote" ()) (#5# . #72=(#structure(#7# () () ()) #structure(#7# #(x y) #(#5# #5#) #("i" "i")) #58# . #10#))) (if (null? (cdr %%x2926)) (car %%x2926) ((lambda (%%tmp2930) ((lambda (%%tmp2931) (if %%tmp2931 (apply (lambda (%%p2932) (cons '#structure(#4# "append" (#5# #structure(#7# #(p) #(#5#) #("i")) . #72#)) %%p2932)) %%tmp2931) (syntax-error %%tmp2930))) ($syntax-dispatch %%tmp2930 'each-any))) %%x2926)))) %%tmp2929) ((lambda (%%_2934) (if (null? %%x2926) %%y2927 ((lambda (%%tmp2935) ((lambda (%%tmp2936) (if %%tmp2936 (apply (lambda (%%p2937 %%y2938) (cons '#structure(#4# "append" (#5# #structure(#7# #(p y) #(#5# #5#) #("i" "i")) #structure(#7# #(_) #(#5#) #("i")) . #72#)) (append %%p2937 (list %%y2938)))) %%tmp2936) (syntax-error %%tmp2935))) ($syntax-dispatch %%tmp2935 '(each-any any)))) (list %%x2926 %%y2927)))) %%tmp2928))) ($syntax-dispatch %%tmp2928 '(#(atom "quote") ())))) %%y2927))) (%%quasilist*2864 (lambda (%%x2940 %%y2941) ((letrec ((%%f2942 (lambda (%%x2943) (if (null? %%x2943) %%y2941 (%%quasicons2862 (car %%x2943) (%%f2942 (cdr %%x2943))))))) %%f2942) %%x2940))) (%%quasivector2865 (lambda (%%x2944) ((lambda (%%tmp2945) ((lambda (%%tmp2946) (if %%tmp2946 (apply (lambda (%%x2947) (list '#structure(#4# "quote" (#5# #structure(#7# #(x) #(#5#) #("i")) . #73=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) #58# . #10#))) (list->vector %%x2947))) %%tmp2946) ((lambda (%%_2949) ((letrec ((%%f2950 (lambda (%%y2951 %%k2952) ((lambda (%%tmp2953) ((lambda (%%tmp2954) (if %%tmp2954 (apply (lambda (%%y2955) (%%k2952 (map (lambda (%%tmp2956) (list '#structure(#4# "quote" (#5# #structure(#7# #(y) #(#5#) #("i")) . #74=(#structure(#7# () () ()) #structure(#7# #(y k) #(#5# #5#) #("i" "i")) #structure(#7# #(f) #(#5#) #("i")) . #75=(#structure(#7# #(_) #(#5#) #("i")) . #73#)))) %%tmp2956)) %%y2955))) %%tmp2954) ((lambda (%%tmp2957) (if %%tmp2957 (apply (lambda (%%y2958) (%%k2952 %%y2958)) %%tmp2957) ((lambda (%%tmp2960) (if %%tmp2960 (apply (lambda (%%y2961 %%z2962) (%%f2950 %%z2962 (lambda (%%ls2963) (%%k2952 (append %%y2961 %%ls2963))))) %%tmp2960) ((lambda (%%else2965) ((lambda (%%tmp2966) ((lambda (%%t12967) (list '#structure(#4# "list->vector" (#5# #structure(#7# #(t1) #(("m" . #76=(tmp))) #("i")) #structure(#7# #(else) #(#5#) #("i")) . #74#)) %%t12967)) %%tmp2966)) %%x2944)) %%tmp2953))) ($syntax-dispatch %%tmp2953 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2953 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2953 '(#(atom "quote") each-any)))) %%y2951)))) %%f2950) %%x2944 (lambda (%%ls2968) ((lambda (%%tmp2969) ((lambda (%%tmp2970) (if %%tmp2970 (apply (lambda (%%t22971) (cons '#structure(#4# "vector" (#5# #structure(#7# #(t2) #(("m" . #76#)) #("i")) #structure(#7# () () ()) #structure(#7# #(ls) #(#5#) #("i")) . #75#)) %%t22971)) %%tmp2970) (syntax-error %%tmp2969))) ($syntax-dispatch %%tmp2969 'each-any))) %%ls2968)))) %%tmp2945))) ($syntax-dispatch %%tmp2945 '(#(atom "quote") each-any)))) %%x2944))) (%%emit2866 (lambda (%%x2973) ((lambda (%%tmp2974) ((lambda (%%tmp2975) (if %%tmp2975 (apply (lambda (%%x2976) (list '#structure(#4# quote (#5# #structure(#7# #(x) #(#5#) #("i")) . #77=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) #58# . #10#))) %%x2976)) %%tmp2975) ((lambda (%%tmp2977) (if %%tmp2977 (apply (lambda (%%x2978) ((lambda (%%tmp2979) ((lambda (%%tmp2980) (if %%tmp2980 (apply (lambda (%%t32981) (cons '#structure(#4# list (#5# #structure(#7# #(t3) #(("m" . #76#)) #("i")) #structure(#7# #(x) #(#5#) #("i")) . #77#)) %%t32981)) %%tmp2980) (syntax-error %%tmp2979))) ($syntax-dispatch %%tmp2979 'each-any))) (map %%emit2866 %%x2978))) %%tmp2977) ((lambda (%%tmp2984) (if %%tmp2984 (apply (lambda (%%x2985 %%y2986) ((letrec ((%%f2987 (lambda (%%x*2988) (if (null? %%x*2988) (%%emit2866 %%y2986) ((lambda (%%tmp2989) ((lambda (%%tmp2990) (if %%tmp2990 (apply (lambda (%%t52991 %%t42992) (list '#structure(#4# cons (#5# #structure(#7# #(t5 t4) #((#78="m" . #76#) (#78# . #76#)) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x*) #(#5#) #("i")) #structure(#7# #(f) #(#5#) #("i")) #structure(#7# #(x y) #(#5# #5#) #("i" "i")) . #77#)) %%t52991 %%t42992)) %%tmp2990) (syntax-error %%tmp2989))) ($syntax-dispatch %%tmp2989 '(any any)))) (list (%%emit2866 (car %%x*2988)) (%%f2987 (cdr %%x*2988)))))))) %%f2987) %%x2985)) %%tmp2984) ((lambda (%%tmp2994) (if %%tmp2994 (apply (lambda (%%x2995) ((lambda (%%tmp2996) ((lambda (%%tmp2997) (if %%tmp2997 (apply (lambda (%%t62998) (cons '#structure(#4# append (#5# #structure(#7# #(t6) #(("m" . #76#)) #("i")) #structure(#7# #(x) #(#5#) #("i")) . #77#)) %%t62998)) %%tmp2997) (syntax-error %%tmp2996))) ($syntax-dispatch %%tmp2996 'each-any))) (map %%emit2866 %%x2995))) %%tmp2994) ((lambda (%%tmp3001) (if %%tmp3001 (apply (lambda (%%x3002) ((lambda (%%tmp3003) ((lambda (%%tmp3004) (if %%tmp3004 (apply (lambda (%%t73005) (cons '#structure(#4# vector (#5# #structure(#7# #(t7) #(("m" . #76#)) #("i")) #structure(#7# #(x) #(#5#) #("i")) . #77#)) %%t73005)) %%tmp3004) (syntax-error %%tmp3003))) ($syntax-dispatch %%tmp3003 'each-any))) (map %%emit2866 %%x3002))) %%tmp3001) ((lambda (%%tmp3008) (if %%tmp3008 (apply (lambda (%%x3009) ((lambda (%%tmp3010) ((lambda (%%t83011) (list '#structure(#4# list->vector (#5# #structure(#7# #(t8) #(("m" . #76#)) #("i")) #structure(#7# #(x) #(#5#) #("i")) . #77#)) %%t83011)) %%tmp3010)) (%%emit2866 %%x3009))) %%tmp3008) ((lambda (%%tmp3012) (if %%tmp3012 (apply (lambda (%%x3013) %%x3013) %%tmp3012) (syntax-error %%tmp2974))) ($syntax-dispatch %%tmp2974 '(#(atom "value") any))))) ($syntax-dispatch %%tmp2974 '(#(atom "list->vector") any))))) ($syntax-dispatch %%tmp2974 '(#(atom "vector") . each-any))))) ($syntax-dispatch %%tmp2974 '(#(atom "append") . each-any))))) ($syntax-dispatch %%tmp2974 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2974 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2974 '(#(atom "quote") any)))) %%x2973)))) (lambda (%%x3014) ((lambda (%%tmp3015) ((lambda (%%tmp3016) (if %%tmp3016 (apply (lambda (%%_3017 %%e3018) (%%emit2866 (%%quasi2860 %%e3018 0))) %%tmp3016) (syntax-error %%tmp3015))) ($syntax-dispatch %%tmp3015 '(any any)))) %%x3014))))) '*top*) ($sc-put-cte '#structure(#4# quasisyntax (#5# #structure(#7# #(quasisyntax) #(#5#) #(quasisyntax)))) (lambda (%%x3019) (letrec ((%%qs3020 (lambda (%%q3022 %%n3023 %%b*3024 %%k3025) ((lambda (%%tmp3026) ((lambda (%%tmp3027) (if %%tmp3027 (apply (lambda (%%d3028) (%%qs3020 %%d3028 (+ %%n3023 1) %%b*3024 (lambda (%%b*3029 %%dnew3030) (%%k3025 %%b*3029 (if (eq? %%dnew3030 %%d3028) %%q3022 ((lambda (%%tmp3031) ((lambda (%%d3032) (cons '#structure(#4# quasisyntax (#5# #structure(#7# #(d) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(b* dnew) #(#5# #5#) #("i" "i")) #structure(#7# #(d) #(#5#) #("i")) . #79=(#structure(#7# () () ()) #structure(#7# #(q n b* k) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #80=(#structure(#7# (vqs qs) (#5# #5#) ("i" "i")) #structure(#7# #(x) #(#5#) #("i")) . #10#)))) %%d3032)) %%tmp3031)) %%dnew3030)))))) %%tmp3027) ((lambda (%%tmp3033) (if (if %%tmp3033 (apply (lambda (%%d3034) (not (= %%n3023 0))) %%tmp3033) #f) (apply (lambda (%%d3035) (%%qs3020 %%d3035 (- %%n3023 1) %%b*3024 (lambda (%%b*3036 %%dnew3037) (%%k3025 %%b*3036 (if (eq? %%dnew3037 %%d3035) %%q3022 ((lambda (%%tmp3038) ((lambda (%%d3039) (cons '#structure(#4# unsyntax (#5# #structure(#7# #(d) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(b* dnew) #(#5# #5#) #("i" "i")) #structure(#7# #(d) #(#5#) #("i")) . #79#)) %%d3039)) %%tmp3038)) %%dnew3037)))))) %%tmp3033) ((lambda (%%tmp3040) (if (if %%tmp3040 (apply (lambda (%%d3041) (not (= %%n3023 0))) %%tmp3040) #f) (apply (lambda (%%d3042) (%%qs3020 %%d3042 (- %%n3023 1) %%b*3024 (lambda (%%b*3043 %%dnew3044) (%%k3025 %%b*3043 (if (eq? %%dnew3044 %%d3042) %%q3022 ((lambda (%%tmp3045) ((lambda (%%d3046) (cons '#structure(#4# unsyntax-splicing (#5# #structure(#7# #(d) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(b* dnew) #(#5# #5#) #("i" "i")) #structure(#7# #(d) #(#5#) #("i")) . #79#)) %%d3046)) %%tmp3045)) %%dnew3044)))))) %%tmp3040) ((lambda (%%tmp3047) (if (if %%tmp3047 (apply (lambda (%%q3048) (= %%n3023 0)) %%tmp3047) #f) (apply (lambda (%%q3049) ((lambda (%%tmp3050) ((lambda (%%tmp3051) (if %%tmp3051 (apply (lambda (%%t3052) (%%k3025 (cons (list %%t3052 %%q3049) %%b*3024) %%t3052)) %%tmp3051) (syntax-error %%tmp3050))) ($syntax-dispatch %%tmp3050 '(any)))) (generate-temporaries (list %%q3049)))) %%tmp3047) ((lambda (%%tmp3053) (if (if %%tmp3053 (apply (lambda (%%q3054 %%d3055) (= %%n3023 0)) %%tmp3053) #f) (apply (lambda (%%q3056 %%d3057) (%%qs3020 %%d3057 %%n3023 %%b*3024 (lambda (%%b*3058 %%dnew3059) ((lambda (%%tmp3060) ((lambda (%%tmp3061) (if %%tmp3061 (apply (lambda (%%t3062) (%%k3025 (append (map list %%t3062 %%q3056) %%b*3058) ((lambda (%%tmp3065) ((lambda (%%d3066) (append %%t3062 %%d3066)) %%tmp3065)) %%dnew3059))) %%tmp3061) (syntax-error %%tmp3060))) ($syntax-dispatch %%tmp3060 'each-any))) (generate-temporaries %%q3056))))) %%tmp3053) ((lambda (%%tmp3069) (if (if %%tmp3069 (apply (lambda (%%q3070 %%d3071) (= %%n3023 0)) %%tmp3069) #f) (apply (lambda (%%q3072 %%d3073) (%%qs3020 %%d3073 %%n3023 %%b*3024 (lambda (%%b*3074 %%dnew3075) ((lambda (%%tmp3076) ((lambda (%%tmp3077) (if %%tmp3077 (apply (lambda (%%t3078) (%%k3025 (append (map (lambda (%%tmp3080 %%tmp3079) (list (cons %%tmp3079 '(#structure(#4# ... (#5# . #81=(#structure(#7# #(t) #(#5#) #("i")) #structure(#7# () () ()) #structure(#7# #(b* dnew) #(#5# #5#) #("i" "i")) #structure(#7# #(q d) #(#5# #5#) #("i" "i")) . #79#))))) %%tmp3080)) %%q3072 %%t3078) %%b*3074) ((lambda (%%tmp3081) ((lambda (%%tmp3082) (if %%tmp3082 (apply (lambda (%%m3083) ((lambda (%%tmp3084) ((lambda (%%d3085) (append (apply append %%m3083) %%d3085)) %%tmp3084)) %%dnew3075)) %%tmp3082) (syntax-error %%tmp3081))) ($syntax-dispatch %%tmp3081 '#(each each-any)))) (map (lambda (%%tmp3088) (cons %%tmp3088 '(#structure(#4# ... (#5# . #81#))))) %%t3078)))) %%tmp3077) (syntax-error %%tmp3076))) ($syntax-dispatch %%tmp3076 'each-any))) (generate-temporaries %%q3072))))) %%tmp3069) ((lambda (%%tmp3090) (if %%tmp3090 (apply (lambda (%%a3091 %%d3092) (%%qs3020 %%a3091 %%n3023 %%b*3024 (lambda (%%b*3093 %%anew3094) (%%qs3020 %%d3092 %%n3023 %%b*3093 (lambda (%%b*3095 %%dnew3096) (%%k3025 %%b*3095 (if (if (eq? %%anew3094 %%a3091) (eq? %%dnew3096 %%d3092) #f) %%q3022 ((lambda (%%tmp3097) ((lambda (%%tmp3098) (if %%tmp3098 (apply (lambda (%%a3099 %%d3100) (cons %%a3099 %%d3100)) %%tmp3098) (syntax-error %%tmp3097))) ($syntax-dispatch %%tmp3097 '(any any)))) (list %%anew3094 %%dnew3096))))))))) %%tmp3090) ((lambda (%%tmp3101) (if %%tmp3101 (apply (lambda (%%x3102) (%%vqs3021 %%x3102 %%n3023 %%b*3024 (lambda (%%b*3104 %%xnew*3105) (%%k3025 %%b*3104 (if ((letrec ((%%same?3106 (lambda (%%x*3107 %%xnew*3108) (if (null? %%x*3107) (null? %%xnew*3108) (if (not (null? %%xnew*3108)) (if (eq? (car %%x*3107) (car %%xnew*3108)) (%%same?3106 (cdr %%x*3107) (cdr %%xnew*3108)) #f) #f))))) %%same?3106) %%x3102 %%xnew*3105) %%q3022 ((lambda (%%tmp3110) ((lambda (%%tmp3111) (if %%tmp3111 (apply (lambda (%%x3112) (list->vector %%x3112)) %%tmp3111) (syntax-error %%tmp3110))) ($syntax-dispatch %%tmp3110 'each-any))) %%xnew*3105)))))) %%tmp3101) ((lambda (%%_3114) (%%k3025 %%b*3024 %%q3022)) %%tmp3026))) ($syntax-dispatch %%tmp3026 '#(vector each-any))))) ($syntax-dispatch %%tmp3026 '(any . any))))) ($syntax-dispatch %%tmp3026 '((#(free-id #structure(#4# unsyntax-splicing #82=(#5# . #79#))) . each-any) . any))))) ($syntax-dispatch %%tmp3026 '((#(free-id #structure(#4# unsyntax #82#)) . each-any) . any))))) ($syntax-dispatch %%tmp3026 '(#(free-id #structure(#4# unsyntax #82#)) any))))) ($syntax-dispatch %%tmp3026 '(#(free-id #structure(#4# unsyntax-splicing #82#)) . any))))) ($syntax-dispatch %%tmp3026 '(#(free-id #structure(#4# unsyntax #82#)) . any))))) ($syntax-dispatch %%tmp3026 '(#(free-id #structure(#4# quasisyntax #82#)) . any)))) %%q3022))) (%%vqs3021 (lambda (%%x*3115 %%n3116 %%b*3117 %%k3118) (if (null? %%x*3115) (%%k3118 %%b*3117 '()) (%%vqs3021 (cdr %%x*3115) %%n3116 %%b*3117 (lambda (%%b*3119 %%xnew*3120) ((lambda (%%tmp3121) ((lambda (%%tmp3122) (if (if %%tmp3122 (apply (lambda (%%q3123) (= %%n3116 0)) %%tmp3122) #f) (apply (lambda (%%q3124) ((lambda (%%tmp3125) ((lambda (%%tmp3126) (if %%tmp3126 (apply (lambda (%%t3127) (%%k3118 (append (map list %%t3127 %%q3124) %%b*3119) (append %%t3127 %%xnew*3120))) %%tmp3126) (syntax-error %%tmp3125))) ($syntax-dispatch %%tmp3125 'each-any))) (generate-temporaries %%q3124))) %%tmp3122) ((lambda (%%tmp3132) (if (if %%tmp3132 (apply (lambda (%%q3133) (= %%n3116 0)) %%tmp3132) #f) (apply (lambda (%%q3134) ((lambda (%%tmp3135) ((lambda (%%tmp3136) (if %%tmp3136 (apply (lambda (%%t3137) (%%k3118 (append (map (lambda (%%tmp3139 %%tmp3138) (list (cons %%tmp3138 '(#structure(#4# ... (#5# . #83=(#structure(#7# #(t) #(#5#) #("i")) #structure(#7# #(q) #(#5#) #("i")) . #84=(#structure(#7# () () ()) #structure(#7# #(b* xnew*) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x* n b* k) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) . #80#)))))) %%tmp3139)) %%q3134 %%t3137) %%b*3119) ((lambda (%%tmp3140) ((lambda (%%tmp3141) (if %%tmp3141 (apply (lambda (%%m3142) (append (apply append %%m3142) %%xnew*3120)) %%tmp3141) (syntax-error %%tmp3140))) ($syntax-dispatch %%tmp3140 '#(each each-any)))) (map (lambda (%%tmp3145) (cons %%tmp3145 '(#structure(#4# ... (#5# . #83#))))) %%t3137)))) %%tmp3136) (syntax-error %%tmp3135))) ($syntax-dispatch %%tmp3135 'each-any))) (generate-temporaries %%q3134))) %%tmp3132) ((lambda (%%_3147) (%%qs3020 (car %%x*3115) %%n3116 %%b*3119 (lambda (%%b*3148 %%xnew3149) (%%k3118 %%b*3148 (cons %%xnew3149 %%xnew*3120))))) %%tmp3121))) ($syntax-dispatch %%tmp3121 '(#(free-id #structure(#4# unsyntax-splicing #85=(#5# . #84#))) . each-any))))) ($syntax-dispatch %%tmp3121 '(#(free-id #structure(#4# unsyntax #85#)) . each-any)))) (car %%x*3115)))))))) ((lambda (%%tmp3150) ((lambda (%%tmp3151) (if %%tmp3151 (apply (lambda (%%_3152 %%x3153) (%%qs3020 %%x3153 0 '() (lambda (%%b*3154 %%xnew3155) (if (eq? %%xnew3155 %%x3153) (list '#structure(#4# syntax (#5# . #86=(#structure(#7# () () ()) #structure(#7# #(b* xnew) #(#5# #5#) #("i" "i")) #structure(#7# #(_ x) #(#5# #5#) #("i" "i")) . #80#))) %%x3153) ((lambda (%%tmp3156) ((lambda (%%tmp3157) (if %%tmp3157 (apply (lambda (%%b3158 %%x3159) (list '#structure(#4# with-syntax #87=(#5# #structure(#7# #(b x) #(#5# #5#) #("i" "i")) . #86#)) %%b3158 (list '#structure(#4# syntax #87#) %%x3159))) %%tmp3157) (syntax-error %%tmp3156))) ($syntax-dispatch %%tmp3156 '(each-any any)))) (list %%b*3154 %%xnew3155)))))) %%tmp3151) (syntax-error %%tmp3150))) ($syntax-dispatch %%tmp3150 '(any any)))) %%x3019))) '*top*) ($sc-put-cte '#structure(#4# case (#5# #structure(#7# #(case) #(#5#) #(case)))) (lambda (%%x3161) ((lambda (%%tmp3162) ((lambda (%%tmp3163) (if %%tmp3163 (apply (lambda (%%_3164 %%e3165 %%m13166 %%m23167) ((lambda (%%tmp3168) ((lambda (%%body3169) (list '#structure(#4# let #88=(#5# #structure(#7# #(body) #(#5#) #("i")) . #89=(#structure(#7# #(_ e m1 m2) #(#5# #5# #5# #5#) #("i" "i" "i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) (list (list '#structure(#4# t #88#) %%e3165)) %%body3169)) %%tmp3168)) ((letrec ((%%f3170 (lambda (%%clause3171 %%clauses3172) (if (null? %%clauses3172) ((lambda (%%tmp3173) ((lambda (%%tmp3174) (if %%tmp3174 (apply (lambda (%%e13175 %%e23176) (cons '#structure(#4# begin (#5# #structure(#7# #(e1 e2) #(#5# #5#) #("i" "i")) . #90=(#structure(#7# () () ()) #structure(#7# #(clause clauses) #(#5# #5#) #("i" "i")) #structure(#7# #(f) #(#5#) #("i")) . #89#))) (cons %%e13175 %%e23176))) %%tmp3174) ((lambda (%%tmp3178) (if %%tmp3178 (apply (lambda (%%k3179 %%e13180 %%e23181) (list '#structure(#4# if #91=(#5# #structure(#7# #(k e1 e2) #(#5# #5# #5#) #("i" "i" "i")) . #90#)) (list '#structure(#4# memv #91#) '#structure(#4# t #91#) (list '#structure(#4# quote #91#) %%k3179)) (cons '#structure(#4# begin #91#) (cons %%e13180 %%e23181)))) %%tmp3178) ((lambda (%%_3184) (syntax-error %%x3161)) %%tmp3173))) ($syntax-dispatch %%tmp3173 '(each-any any . each-any))))) ($syntax-dispatch %%tmp3173 '(#(free-id #structure(#4# else (#5# . #90#))) any . each-any)))) %%clause3171) ((lambda (%%tmp3185) ((lambda (%%rest3186) ((lambda (%%tmp3187) ((lambda (%%tmp3188) (if %%tmp3188 (apply (lambda (%%k3189 %%e13190 %%e23191) (list '#structure(#4# if #92=(#5# #structure(#7# #(k e1 e2) #(#5# #5# #5#) #("i" "i" "i")) #structure(#7# #(rest) #(#5#) #("i")) . #90#)) (list '#structure(#4# memv #92#) '#structure(#4# t #92#) (list '#structure(#4# quote #92#) %%k3189)) (cons '#structure(#4# begin #92#) (cons %%e13190 %%e23191)) %%rest3186)) %%tmp3188) ((lambda (%%_3194) (syntax-error %%x3161)) %%tmp3187))) ($syntax-dispatch %%tmp3187 '(each-any any . each-any)))) %%clause3171)) %%tmp3185)) (%%f3170 (car %%clauses3172) (cdr %%clauses3172))))))) %%f3170) %%m13166 %%m23167))) %%tmp3163) (syntax-error %%tmp3162))) ($syntax-dispatch %%tmp3162 '(any any any . each-any)))) %%x3161)) '*top*) ($sc-put-cte '#structure(#4# identifier-syntax (#5# #structure(#7# #(identifier-syntax) #(#5#) #(identifier-syntax)))) (lambda (%%x3196) ((lambda (%%tmp3197) ((lambda (%%tmp3198) (if %%tmp3198 (apply (lambda (%%dummy3199 %%e3200) (list '#structure(#4# lambda #93=(#5# #structure(#7# #(dummy e) #((#94="m" . #5#) #5#) #("i" "i")) #95=#structure(#7# () () ()) #96=#structure(#7# #(x) #((#94# . #5#)) #("i")) . #10#)) '#structure(#4# (x) #93#) (list '#structure(#4# syntax-case #93#) '#structure(#4# x #93#) '() (list '#structure(#4# id #93#) '#structure(#4# (identifier? (syntax id)) #93#) (list '#structure(#4# syntax #93#) %%e3200)) (list '(#structure(#4# _ #93#) #structure(#4# x #93#) #structure(#4# ... #93#)) (list '#structure(#4# syntax #93#) (cons %%e3200 '(#structure(#4# x #93#) #structure(#4# ... #93#)))))))) %%tmp3198) ((lambda (%%tmp3201) (if (if %%tmp3201 (apply (lambda (%%dummy3202 %%id3203 %%exp13204 %%var3205 %%val3206 %%exp23207) (if (identifier? %%id3203) (identifier? %%var3205) #f)) %%tmp3201) #f) (apply (lambda (%%dummy3208 %%id3209 %%exp13210 %%var3211 %%val3212 %%exp23213) (list '#structure(#4# cons #97=(#5# #structure(#7# #(dummy id exp1 var val exp2) #((#94# . #5#) #5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i" "i")) #95# #96# . #10#)) '#structure(#4# 'macro! #97#) (list '#structure(#4# lambda #97#) '#structure(#4# (x) #97#) (list '#structure(#4# syntax-case #97#) '#structure(#4# x #97#) '#structure(#4# (set!) #97#) (list (list '#structure(#4# set! #97#) %%var3211 %%val3212) (list '#structure(#4# syntax #97#) %%exp23213)) (list (cons %%id3209 '(#structure(#4# x #97#) #structure(#4# ... #97#))) (list '#structure(#4# syntax #97#) (cons %%exp13210 '(#structure(#4# x #97#) #structure(#4# ... #97#))))) (list %%id3209 (list '#structure(#4# identifier? #97#) (list '#structure(#4# syntax #97#) %%id3209)) (list '#structure(#4# syntax #97#) %%exp13210)))))) %%tmp3201) (syntax-error %%tmp3197))) ($syntax-dispatch %%tmp3197 '(any (any any) ((#(free-id #structure(#4# set! (#5# #95# #96# . #10#))) any any) any)))))) ($syntax-dispatch %%tmp3197 '(any any)))) %%x3196)) '*top*) ($sc-put-cte '#structure(#4# cond-expand (#5# #structure(#7# #(cond-expand) #(#5#) #(cond-expand)))) (lambda (%%x3214) ((lambda (%%tmp3215) ((lambda (%%tmp3216) (if %%tmp3216 (apply (lambda (%%dummy3217) '#structure(#4# (syntax-error "Unfulfilled cond-expand") (#5# #structure(#7# #(dummy) #((#98="m" . #5#)) #("i")) #99=#structure(#7# () () ()) #100=#structure(#7# #(x) #((#98# . #5#)) #("i")) . #10#))) %%tmp3216) ((lambda (%%tmp3218) (if %%tmp3218 (apply (lambda (%%dummy3219 %%body3220) (cons '#structure(#4# begin (#5# #structure(#7# #(dummy body) #((#98# . #5#) #5#) #("i" "i")) #99# #100# . #10#)) %%body3220)) %%tmp3218) ((lambda (%%tmp3222) (if %%tmp3222 (apply (lambda (%%dummy3223 %%body3224 %%more-clauses3225) (cons '#structure(#4# begin (#5# #structure(#7# #(dummy body more-clauses) #((#98# . #5#) #5# #5#) #("i" "i" "i")) #99# #100# . #10#)) %%body3224)) %%tmp3222) ((lambda (%%tmp3227) (if %%tmp3227 (apply (lambda (%%dummy3228 %%req13229 %%req23230 %%body3231 %%more-clauses3232) (cons '#structure(#4# cond-expand #101=(#5# #structure(#7# #(dummy req1 req2 body more-clauses) #((#98# . #5#) #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #99# #100# . #10#)) (cons (list %%req13229 (cons '#structure(#4# cond-expand #101#) (cons (cons (cons '#structure(#4# and #101#) %%req23230) %%body3231) %%more-clauses3232))) %%more-clauses3232))) %%tmp3227) ((lambda (%%tmp3237) (if %%tmp3237 (apply (lambda (%%dummy3238 %%body3239 %%more-clauses3240) (cons '#structure(#4# cond-expand (#5# #structure(#7# #(dummy body more-clauses) #((#98# . #5#) #5# #5#) #("i" "i" "i")) #99# #100# . #10#)) %%more-clauses3240)) %%tmp3237) ((lambda (%%tmp3242) (if %%tmp3242 (apply (lambda (%%dummy3243 %%req13244 %%req23245 %%body3246 %%more-clauses3247) (list '#structure(#4# cond-expand #102=(#5# #structure(#7# #(dummy req1 req2 body more-clauses) #((#98# . #5#) #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) #99# #100# . #10#)) (list %%req13244 (cons '#structure(#4# begin #102#) %%body3246)) (list '#structure(#4# else #102#) (cons '#structure(#4# cond-expand #102#) (cons (cons (cons '#structure(#4# or #102#) %%req23245) %%body3246) %%more-clauses3247))))) %%tmp3242) ((lambda (%%tmp3252) (if %%tmp3252 (apply (lambda (%%dummy3253 %%req3254 %%body3255 %%more-clauses3256) (list '#structure(#4# cond-expand #103=(#5# #structure(#7# #(dummy req body more-clauses) #((#98# . #5#) #5# #5# #5#) #("i" "i" "i" "i")) #99# #100# . #10#)) (list %%req3254 (cons '#structure(#4# cond-expand #103#) %%more-clauses3256)) (cons '#structure(#4# else #103#) %%body3255))) %%tmp3252) ((lambda (%%tmp3259) (if %%tmp3259 (apply (lambda (%%dummy3260 %%body3261 %%more-clauses3262) (cons '#structure(#4# begin (#5# #structure(#7# #(dummy body more-clauses) #((#98# . #5#) #5# #5#) #("i" "i" "i")) #99# #100# . #10#)) %%body3261)) %%tmp3259) ((lambda (%%tmp3264) (if %%tmp3264 (apply (lambda (%%dummy3265 %%body3266 %%more-clauses3267) (cons '#structure(#4# begin (#5# #structure(#7# #(dummy body more-clauses) #((#98# . #5#) #5# #5#) #("i" "i" "i")) #99# #100# . #10#)) %%body3266)) %%tmp3264) ((lambda (%%tmp3269) (if %%tmp3269 (apply (lambda (%%dummy3270 %%feature-id3271 %%body3272 %%more-clauses3273) (cons '#structure(#4# cond-expand (#5# #structure(#7# #(dummy feature-id body more-clauses) #((#98# . #5#) #5# #5# #5#) #("i" "i" "i" "i")) #99# #100# . #10#)) %%more-clauses3273)) %%tmp3269) (syntax-error %%tmp3215))) ($syntax-dispatch %%tmp3215 '(any (any . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any (#(free-id #structure(#4# gambit (#5# #99# #100# . #10#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any (#(free-id #structure(#4# srfi-0 (#5# #99# #100# . #10#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any ((#(free-id #structure(#4# not (#5# #99# #100# . #10#))) any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any ((#(free-id #structure(#4# or (#5# #99# #100# . #10#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any ((#(free-id #structure(#4# or (#5# #99# #100# . #10#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any ((#(free-id #structure(#4# and (#5# #99# #100# . #10#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any ((#(free-id #structure(#4# and (#5# #99# #100# . #10#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3215 '(any (#(free-id #structure(#4# else (#5# #99# #100# . #10#))) . each-any)))))) ($syntax-dispatch %%tmp3215 '(any)))) %%x3214)) '*top*) ($sc-put-cte '#structure(#4# define-macro (#5# #structure(#7# #(define-macro) #(#5#) #(define-macro)))) (lambda (%%x3275) ((lambda (%%tmp3276) ((lambda (%%tmp3277) (if %%tmp3277 (apply (lambda (%%_3278 %%name3279 %%params3280 %%body13281 %%body23282) (list '#structure(#4# define-macro #104=(#5# #structure(#7# #(_ name params body1 body2) #(#5# #5# #5# #5# #5#) #("i" "i" "i" "i" "i")) . #105=(#structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#))) %%name3279 (cons '#structure(#4# lambda #104#) (cons %%params3280 (cons %%body13281 %%body23282))))) %%tmp3277) ((lambda (%%tmp3284) (if %%tmp3284 (apply (lambda (%%_3285 %%name3286 %%expander3287) (list '#structure(#4# define-syntax #106=(#5# #structure(#7# #(_ name expander) #(#5# #5# #5#) #("i" "i" "i")) . #105#)) %%name3286 (list '#structure(#4# lambda #106#) '#structure(#4# (y) #106#) (list '#structure(#4# syntax-case #106#) '#structure(#4# y #106#) '() (list '#structure(#4# (k . args) #106#) (list '#structure(#4# let #106#) '#structure(#4# ((lst (syntax-object->datum (syntax args)))) #106#) (list '#structure(#4# datum->syntax-object #106#) '#structure(#4# (syntax k) #106#) (cons '#structure(#4# apply #106#) (cons %%expander3287 '#structure(#4# (lst) #106#)))))))))) %%tmp3284) (syntax-error %%tmp3276))) ($syntax-dispatch %%tmp3276 '(any any any))))) ($syntax-dispatch %%tmp3276 '(any (any . any) any . each-any)))) %%x3275)) '*top*) ($sc-put-cte '#structure(#4# ##begin (#5# #structure(#7# #(##begin) #(#5#) #(##begin)))) (lambda (%%x3288) ((lambda (%%tmp3289) ((lambda (%%tmp3290) (if %%tmp3290 (apply (lambda (%%_3291 %%body13292) (cons '#structure(#4# begin (#5# #structure(#7# #(_ body1) #(#5# #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #(#5#) #("i")) . #10#)) %%body13292)) %%tmp3290) (syntax-error %%tmp3289))) ($syntax-dispatch %%tmp3289 '(any . each-any)))) %%x3288)) '*top*) ($sc-put-cte '#structure(#4# future (#5# #structure(#7# #(future) #(#5#) #(future)))) (lambda (%%x3294) ((lambda (%%tmp3295) ((lambda (%%tmp3296) (if %%tmp3296 (apply (lambda (%%dummy3297 %%rest3298) (cons '#structure(#4# ##future (#5# #structure(#7# #(dummy rest) #((#107="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#107# . #5#)) #("i")) . #10#)) %%rest3298)) %%tmp3296) (syntax-error %%tmp3295))) ($syntax-dispatch %%tmp3295 '(any . each-any)))) %%x3294)) '*top*) ($sc-put-cte '#structure(#4# c-define-type (#5# #structure(#7# #(c-define-type) #(#5#) #(c-define-type)))) (lambda (%%x3300) ((lambda (%%tmp3301) ((lambda (%%tmp3302) (if %%tmp3302 (apply (lambda (%%dummy3303 %%rest3304) (cons '#structure(#4# ##c-define-type (#5# #structure(#7# #(dummy rest) #((#108="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#108# . #5#)) #("i")) . #10#)) %%rest3304)) %%tmp3302) (syntax-error %%tmp3301))) ($syntax-dispatch %%tmp3301 '(any . each-any)))) %%x3300)) '*top*) ($sc-put-cte '#structure(#4# c-declare (#5# #structure(#7# #(c-declare) #(#5#) #(c-declare)))) (lambda (%%x3306) ((lambda (%%tmp3307) ((lambda (%%tmp3308) (if %%tmp3308 (apply (lambda (%%dummy3309 %%rest3310) (cons '#structure(#4# ##c-declare (#5# #structure(#7# #(dummy rest) #((#109="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#109# . #5#)) #("i")) . #10#)) %%rest3310)) %%tmp3308) (syntax-error %%tmp3307))) ($syntax-dispatch %%tmp3307 '(any . each-any)))) %%x3306)) '*top*) ($sc-put-cte '#structure(#4# c-initialize (#5# #structure(#7# #(c-initialize) #(#5#) #(c-initialize)))) (lambda (%%x3312) ((lambda (%%tmp3313) ((lambda (%%tmp3314) (if %%tmp3314 (apply (lambda (%%dummy3315 %%rest3316) (cons '#structure(#4# ##c-initialize (#5# #structure(#7# #(dummy rest) #((#110="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#110# . #5#)) #("i")) . #10#)) %%rest3316)) %%tmp3314) (syntax-error %%tmp3313))) ($syntax-dispatch %%tmp3313 '(any . each-any)))) %%x3312)) '*top*) ($sc-put-cte '#structure(#4# c-lambda (#5# #structure(#7# #(c-lambda) #(#5#) #(c-lambda)))) (lambda (%%x3318) ((lambda (%%tmp3319) ((lambda (%%tmp3320) (if %%tmp3320 (apply (lambda (%%dummy3321 %%rest3322) (cons '#structure(#4# ##c-lambda (#5# #structure(#7# #(dummy rest) #((#111="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#111# . #5#)) #("i")) . #10#)) %%rest3322)) %%tmp3320) (syntax-error %%tmp3319))) ($syntax-dispatch %%tmp3319 '(any . each-any)))) %%x3318)) '*top*) ($sc-put-cte '#structure(#4# c-define (#5# #structure(#7# #(c-define) #(#5#) #(c-define)))) (lambda (%%x3324) ((lambda (%%tmp3325) ((lambda (%%tmp3326) (if %%tmp3326 (apply (lambda (%%dummy3327 %%rest3328) (cons '#structure(#4# ##c-define (#5# #structure(#7# #(dummy rest) #((#112="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#112# . #5#)) #("i")) . #10#)) %%rest3328)) %%tmp3326) (syntax-error %%tmp3325))) ($syntax-dispatch %%tmp3325 '(any . each-any)))) %%x3324)) '*top*) ($sc-put-cte '#structure(#4# declare (#5# #structure(#7# #(declare) #(#5#) #(declare)))) (lambda (%%x3330) ((lambda (%%tmp3331) ((lambda (%%tmp3332) (if %%tmp3332 (apply (lambda (%%dummy3333 %%rest3334) (cons '#structure(#4# ##declare (#5# #structure(#7# #(dummy rest) #((#113="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#113# . #5#)) #("i")) . #10#)) %%rest3334)) %%tmp3332) (syntax-error %%tmp3331))) ($syntax-dispatch %%tmp3331 '(any . each-any)))) %%x3330)) '*top*) ($sc-put-cte '#structure(#4# namespace (#5# #structure(#7# #(namespace) #(#5#) #(namespace)))) (lambda (%%x3336) ((lambda (%%tmp3337) ((lambda (%%tmp3338) (if %%tmp3338 (apply (lambda (%%dummy3339 %%rest3340) (cons '#structure(#4# ##namespace (#5# #structure(#7# #(dummy rest) #((#114="m" . #5#) #5#) #("i" "i")) #structure(#7# () () ()) #structure(#7# #(x) #((#114# . #5#)) #("i")) . #10#)) %%rest3340)) %%tmp3338) (syntax-error %%tmp3337))) ($syntax-dispatch %%tmp3337 '(any . each-any)))) %%x3336)) '*top*));;;============================================================================

;;; Install the syntax-case expander.

(define c#expand-source
  (lambda (src)
    src))

(set! c#expand-source ;; setup compiler's expander
  (lambda (src)
    (sc-compile-expand src)))

(set! ##expand-source ;; setup interpreter's expander
  (lambda (src)
    (sc-expand src)))

;;;============================================================================
