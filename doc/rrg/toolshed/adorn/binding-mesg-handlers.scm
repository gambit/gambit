;; Copyright (c) 2024 by Macon Gambill, all rights reserved.

(define (^handle~bind! sym ~sym)
  (let ((beginning-kinds (append atmosphere-kinds binding-compounds))
        (inert-compound-sym (->compound (->inert sym)))
        (ident-sym (->ident sym))
        (inert-sym (->inert sym))
        (tested-delims
         (append abbrev-chars whitespace-chars compound-begin-chars '(#\|)))
        (unquote? (lambda (ac) (and (eq? (get-kind ac) 'abbrev)
                                    (memc (get-char ac) '(#\, #\@))))))
    (let ((inert-ident-sym (->ident inert-sym))
          (untested-delims (char-complement tested-delims delim-chars)))
      (lambda (ac-list nc pac)
        (cond ((memc nc whitespace-chars) (adorn-char nc 'whitespace ~sym))
              ((char=? nc #\|) (begin-symmetric ac-list nc (if (unquote? pac)
                                                               inert-ident-sym
                                                               ident-sym)))
              ((memc nc compound-begin-chars)
               (if (unquote? pac)
                   (begin-compound! ac-list nc inert-compound-sym)
                   (try-nc! ac-list nc)))
              ((memc nc abbrev-chars) (adorn-char nc 'abbrev ~sym))
              ((and (char=? nc #\@) (char=? (get-char pac)) #\,)
               (adorn-char nc 'abbrev ~sym))
              ((memc nc untested-delims) (try-nc! ac-list nc))
              ((and (char=? nc #\#)
                    (or (memq (get-kind pac) beginning-kinds)
                        (and (char=? (get-char pac) #\|)
                             (memq (get-kind pac) ident-base-mesgs))))
               (adorn-char nc sym 'binding#))
              (else (cond ((unquote? pac) (adorn-char nc inert-sym inert-sym))
                          (else (adorn-char nc sym sym)))))))))

(define ^handle~sv-define! (^handle~bind! 'sv-define '~sv-define))
(define (handle~sv-define! ac-list nc pac)
  (cond ((memc nc compound-begin-chars) (begin-compound! ac-list nc 'defun))
        (else (^handle~sv-define! ac-list nc pac))))

(define ^handle~named/sv-let! (^handle~bind! 'named-let '~named/sv-let))
(define (handle~named/sv-let! ac-list nc pac)
  (cond ((memc nc compound-begin-chars)
         (begin-compound! ac-list nc 'let-sv-outer))
        (else (^handle~named/sv-let! ac-list nc pac))))

(define ^handle~~lambda-bind! (^handle~bind! 'lambda-rest '~~lambda-bind))
(define (handle~~lambda-bind! ac-list nc pac)
  (cond ((memc nc compound-begin-chars)
         (begin-compound! ac-list nc 'lambda-bind-list))
        (else (^handle~~lambda-bind! ac-list nc pac))))

(define ^handle~defproc-param! (^handle~bind! 'defproc-param '~defproc-param))
(define (handle~defproc-param! ac-list nc pac)
  (cond ((memc nc compound-begin-chars)
         (begin-compound! ac-list nc 'defproc-inner))
        (else (^handle~defproc-param! ac-list nc pac))))

(define ^handle~~mv-define! (^handle~bind! 'mv-define-rest '~~mv-define))
(define (handle~~mv-define! ac-list nc pac)
  (cond ((memc nc compound-begin-chars)
         (begin-compound! ac-list nc 'define-mv-list))
        ((memc nc whitespace-chars) (adorn-char nc 'whitespace '~~mv-define))
        (else (^handle~~mv-define! ac-list nc pac))))

(define handle~lambda-bind!  (^handle~bind! 'lambda-bind      '~lambda-bind))
(define handle~defun-proc!   (^handle~bind! 'defun-proc       '~defun-proc))
(define handle~defun-param!  (^handle~bind! 'defun-param      '~defun-param))
(define handle~defproc-proc! (^handle~bind! 'defproc-proc     '~defproc-proc))
(define handle~defproc-spec! (^handle~bind! 'defproc-spec     '~defproc-spec))
(define handle~rest-spec!    (^handle~bind! 'rest-spec        '~rest-spec))
(define handle~sv-let!       (^handle~bind! 'sv-let           '~sv-let))
(define handle~mv-let!       (^handle~bind! 'mv-let           '~mv-let))
(define handle~mv-define!    (^handle~bind! 'mv-define        '~mv-define))
(define handle~case-lambda!  (^handle~bind! 'case-lambda-bind '~case-lambda))
(define handle~rest-bind!    (^handle~bind! 'rest-bind        '~rest-bind))
(define handle~key!          (^handle~bind! 'key-init         '~key-init))
(define handle~opt!          (^handle~bind! 'opt-init         '~opt-init))

(define ^handle~rest! (^handle~bind! 'rest-bind '~rest))
(define (handle~rest! ac-list nc pac)
  (cond ((memc nc compound-begin-chars)
         (begin-compound! ac-list nc 'rest-spec-list))
        (else (^handle~rest! ac-list nc pac))))

(define (^handle~outer! next-compound-sym mesg)
  (lambda (ac-list nc pac)
    (cond ((memc nc compound-begin-chars)
           (begin-compound! ac-list nc next-compound-sym))
          ((memc nc whitespace-chars) (adorn-char nc 'whitespace mesg))
          ((memc nc abbrev-chars) (adorn-char nc 'abbrev mesg))
          ((and (char=? nc #\@) (char=? (get-char pac)) #\,)
           (adorn-char nc 'abbrev mesg))
          (else (try-nc! ac-list nc)))))

(define handle~~~let-sv!  (^handle~outer! 'let-sv-outer     '~~~let-sv))
(define handle~~let-sv!   (^handle~outer! 'let-sv-inner     '~~let-sv))
(define handle~~~~let-mv! (^handle~outer! 'let-mv-outermost '~~~~let-mv))
(define handle~~~let-mv!  (^handle~outer! 'let-mv-outer     '~~~let-mv))
(define handle~~defproc!  (^handle~outer! 'defproc          '~~defproc))

(define ^handle~~let-mv! (^handle~outer! 'let-mv-inner '~~let-mv))
(define (handle~~let-mv! ac-list nc pac)
  (cond ((char=? nc #\|) (begin-symmetric ac-list nc 'mv-let-rest-ident))
        ((memc nc delim-chars) (^handle~~let-mv! ac-list nc pac))
        ((and (char=? nc #\@) (char=? (get-char pac) #\,))
         (^handle~~let-mv! ac-list nc pac))
        (else (adorn-char nc 'mv-let-rest 'mv-let-rest))))

(define handle~~~case-lambda!
  (^handle~outer! 'case-lambda-outer '~~~case-lambda))
(define handle~~case-lambda!
  (^handle~outer! 'case-lambda-inner '~~case-lambda))
;==============================================================================
(define (^handle:bind! sym ~next-mesg)
  (let ((inert-sym (->inert sym))
        (tested-delims (append abbrev-chars whitespace-chars)))
    (let ((untested-delims (char-complement tested-delims delim-chars)))
      (lambda (ac-list nc pac)
        (let ((pc (get-char pac)) (pk (get-kind pac)))
          (cond ((memc nc whitespace-chars)
                 (if (char=? pc #\.)
                     (let ((ppac (cadr ac-list)))
                       (cond ((memq (get-kind ppac) atmosphere-kinds)
                              (set-kind! pac 'dot)
                              (adorn-char nc 'whitespace '~rest))
                             (else (adorn-char nc 'whitespace ~next-mesg))))
                     (adorn-char nc 'whitespace ~next-mesg)))
                ((memc nc abbrev-chars) (adorn-char nc 'abbrev ~next-mesg))
                ((memc nc untested-delims) (try-nc! ac-list nc))
                ((or (eq? pk inert-sym) (and (eq? pk 'abbrev)
                                             (memc pc '(#\, #\@))))
                 (adorn-char nc inert-sym inert-sym))
                (else (adorn-char nc sym sym))))))))

(define handle:sv-define!      (^handle:bind! 'sv-define      #f))
(define handle:defun-proc!     (^handle:bind! 'defun-proc     '~defun-param))
(define handle:defun-param!    (^handle:bind! 'defun-param    '~defun-param))
(define handle:named-let!      (^handle:bind! 'named-let      '~~~let-sv))
(define handle:sv-let!         (^handle:bind! 'sv-let         #f))
(define handle:lambda-bind!    (^handle:bind! 'lambda-bind    '~lambda-bind))
(define handle:lambda-rest!    (^handle:bind! 'lambda-rest    #f))
(define handle:mv-let!         (^handle:bind! 'mv-let         '~mv-let))
(define handle:mv-let-rest!    (^handle:bind! 'mv-let-rest    #f))
(define handle:mv-define!      (^handle:bind! 'mv-define      '~mv-define))
(define handle:mv-define-rest! (^handle:bind! 'mv-define-rest #f))
(define handle:defproc-proc!   (^handle:bind! 'defproc-proc   '~defproc-param))
(define handle:defproc-param!  (^handle:bind! 'defproc-param  '~defproc-param))
(define handle:defproc-spec!   (^handle:bind! 'defproc-spec   #f))
(define handle:rest-spec!      (^handle:bind! 'rest-spec      #f))
(define handle:case-lambda-bind!
  (^handle:bind! 'case-lambda-bind '~case-lambda))
;==============================================================================
(define (handle:binding#! ac-list nc pac)
  (cond ((char=? nc #\!)
         (adorn-char nc (get-kind pac) '~dsssl))
        ((char=? nc #\|)
         (set-mesg! pac 'octothorpe)
         (begin-nestc! ac-list nc pac))
        ((char=? nc #\;)
         (set-mesg! pac 'octothorpe)
         (set-kind! pac 'datumc)
         (set-hop! pac 0)
         (set-stack! pac (list ac-list))
         (adorn-char nc 'datumc '~datumc))
        ((memc nc compound-begin-chars)
         (set-mesg! pac 'octothorpe)
         (car (adorn! (list nc) ac-list)))
        (else (let* ((rest (cdr ac-list)) ;; run it back
                     (alternate-pac (car (adorn! '(#\a) rest))))
                (set-mesg! pac (get-mesg alternate-pac))
                (let* ((alternate-ac-list (cons alternate-pac rest))
                       (new-ac (car (adorn! (list nc) alternate-ac-list))))
                  (unless (or (char=? nc #\#) (memc nc delim-chars))
                    (set-kind! new-ac 'invalid))
                  new-ac)))))

(define (handle~dsssl! ac-list nc pac)
  (let ((kind (get-kind pac)))
    (cond ((char=? nc #\k) (adorn-char nc kind '~dsssl/key))
          ((char=? nc #\o) (adorn-char nc kind '~dsssl/opt))
          ((char=? nc #\r) (adorn-char nc kind '~dsssl/rest))
          (else (adorn-char nc 'invalid kind)))))

(define (^handle~dsssl! sym ~sym target)
  (lambda (ac-list nc pac)
    (let ((kind (get-kind pac)) (recents (chars-until ac-list 'binding#)))
      (let ((tested (append recents (list nc))))
        (cond ((matches? target tested)
               (revise-until! ac-list 'dsssl 'binding#)
               (adorn-char nc 'dsssl sym))
              ((could-match? target tested)
               (adorn-char nc kind ~sym))
              (else (adorn-char nc 'invalid kind)))))))

(define handle~dsssl/key!
  (^handle~dsssl! 'dsssl/key '~dsssl/key (string->list "#!key")))
(define handle~dsssl/opt!
  (^handle~dsssl! 'dsssl/opt '~dsssl/opt (string->list "#!optional")))
(define handle~dsssl/rest!
  (^handle~dsssl! 'dsssl/rest '~dsssl/rest (string->list "#!rest")))

(define (^handle~dsssl-key/opt! sym ~sym compound-kind)
  (lambda (ac-list nc pac)
    (cond ((memc nc compound-begin-chars)
           (begin-compound! ac-list nc compound-kind))
          ((memc nc whitespace-chars) (adorn-char nc 'whitespace ~sym))
          ((memc nc abbrev-chars) (adorn-char nc 'abbrev ~sym))
          ((and (char=? nc #\@) (char=? (get-char pac)) #\,)
           (adorn-char nc 'abbrev ~sym))
          ((memc nc delim-chars) (try-nc! ac-list nc))
          ((char=? nc #\#) (adorn-char nc sym 'binding#))
          (else (adorn-char nc sym sym)))))

(define handle~~key-bind!
  (^handle~dsssl-key/opt! 'key-bind '~~key-bind 'compound-key))
(define handle~~opt-bind!
  (^handle~dsssl-key/opt! 'opt-bind '~~opt-bind 'compound-opt))

(define (handle:dsssl/key! ac-list nc pac)
  (cond ((memc nc delim-chars) (handle~~key-bind! ac-list nc pac))
        (else (adorn-char nc 'invalid '~~key-bind))))

(define (handle:dsssl/opt! ac-list nc pac)
  (cond ((memc nc delim-chars) (handle~~opt-bind! ac-list nc pac))
        (else (adorn-char nc 'invalid '~~opt-bind))))

(define (handle:dsssl/rest! ac-list nc pac)
  (cond ((memc nc delim-chars) (handle~rest-bind! ac-list nc pac))
        (else (adorn-char nc 'invalid '~rest-bind))))

(define handle:key-bind!  (^handle:bind! 'key-bind  '~~key-bind))
(define handle:opt-bind!  (^handle:bind! 'opt-bind  '~~opt-bind))
(define handle:rest-bind! (^handle:bind! 'rest-bind '~rest-bind))

(define handle:key-init! (^handle:bind! 'key-bind #f))
(define handle:opt-init! (^handle:bind! 'opt-bind #f))
(define handle:key-init! (^handle:bind! 'key-init #f))
(define handle:opt-init! (^handle:bind! 'opt-init #f))
;==============================================================================
(define try-bind-pm!
  (let ((ends (lambda (sym) (list (->end (->ident sym))
                                  (->end (->ident (->inert sym)))
                                  (->sub-end (->compound (->inert sym))))))
        (bind-mesgs (lambda (sym) (list sym (->inert sym)))))
    (let ((~defun-param-mesgs
           (append '(~defun-param) (ends 'defun-proc)
                   (ends 'defun-param)))
          (~defun-proc-mesgs '(~defun-proc subdefun-unmatched))
          (~sv-let-outer-mesgs (cons '~~~let-sv (ends 'named-let)))
          (~sv-let-mesgs '(~sv-let sublet-sv-inner-unmatched))
          (~case-lambda-outermost-mesgs
           '(~~~case-lambda subcase-lambda-outer-end))
          (~case-lambda-outer-mesgs
           '(~~case-lambda subcase-lambda-outer-unmatched))
          (~key-init-mesgs '(~key subcompound-key-unmatched))
          (~opt-init-mesgs '(~opt subcompound-opt-unmatched))
          (~key-bind-mesgs '(~~key-bind subcompound-key-end))
          (~opt-bind-mesgs '(~~opt-bind subcompound-opt-end))
          (~lambda-bind-mesgs
           (append '(sublambda-bind-list-unmatched ~lambda-bind)
                   (ends 'lambda-bind)))
          (~sv-let-inner-mesgs
           '(~~let-sv sublet-sv-outer-unmatched sublet-sv-inner-end))
          (~mv-let-outer-mesgs
           '(~~~let-mv sublet-mv-outermost-unmatched sublet-mv-outer-end))
          (~mv-let-inner-mesgs '(~~let-mv sublet-mv-outer-unmatched))
          (~mv-let-mesgs
           (append '(~mv-let sublet-mv-inner-unmatched) (ends 'mv-let)))
          (~mv-define-mesgs
           (append '(subdefine-mv-list-unmatched ~mv-define)
                   (ends 'mv-define)))
          (~case-lambda-bind-mesgs
           (append '(subcase-lambda-inner-unmatched ~case-lambda)
                   (ends 'case-lambda-bind)))
          (~defproc-param-mesgs
           (append '(subdefproc-inner-end ~defproc-param)
                   (ends 'defproc-param)
                   (ends 'defproc-proc)))
          (~defproc-proc-mesgs '(~defproc-proc subdefproc-unmatched))
          (~defproc-spec-mesgs '(subdefproc-inner-unmatched ~defproc-spec))
          (~rest-spec-mesgs '(subrest-spec-list-unmatched ~rest-spec))
          (sv-define-mesgs (bind-mesgs 'sv-define))
          (lambda-bind-mesgs (bind-mesgs 'lambda-bind))
          (lambda-rest-mesgs (bind-mesgs 'lambda-rest))
          (sv-let-mesgs (bind-mesgs 'sv-let))
          (named-let-mesgs (bind-mesgs 'named-let))
          (defun-proc-mesgs (bind-mesgs 'defun-proc))
          (defun-param-mesgs (bind-mesgs 'defun-param))
          (mv-let-mesgs (bind-mesgs 'mv-let))
          (mv-let-rest-mesgs (bind-mesgs 'mv-let-rest))
          (mv-define-mesgs (bind-mesgs 'mv-define))
          (mv-define-rest-mesgs (bind-mesgs 'mv-define-rest))
          (case-lambda-bind-mesgs (bind-mesgs 'case-lambda-bind))
          (defproc-param-mesgs (bind-mesgs 'defproc-param))
          (defproc-proc-mesgs (bind-mesgs 'defproc-proc))
          (defproc-spec-mesgs (bind-mesgs 'defproc-spec))
          (rest-spec-mesgs (bind-mesgs 'rest-spec))
          (binding#-mesgs (bind-mesgs 'binding#))
          (key-bind-mesgs (bind-mesgs 'key-bind))
          (opt-bind-mesgs (bind-mesgs 'opt-bind))
          (rest-bind-mesgs (bind-mesgs 'rest-bind))
          (key-init-mesgs (bind-mesgs 'key-init))
          (opt-init-mesgs (bind-mesgs 'opt-init))
          (dsssl/key-mesgs (bind-mesgs 'dsssl/key))
          (dsssl/opt-mesgs (bind-mesgs 'dsssl/opt))
          (dsssl/rest-mesgs (bind-mesgs 'dsssl/rest)))
      (lambda (ac-list nc pac pm)
        (cond
         ((memq pm sv-define-mesgs)     (handle:sv-define!     ac-list nc pac))
         ((memq pm lambda-bind-mesgs)   (handle:lambda-bind!   ac-list nc pac))
         ((memq pm lambda-rest-mesgs)   (handle:lambda-rest!   ac-list nc pac))
         ((memq pm sv-let-mesgs)        (handle:sv-let!        ac-list nc pac))
         ((memq pm named-let-mesgs)     (handle:named-let!     ac-list nc pac))
         ((memq pm defun-proc-mesgs)    (handle:defun-proc!    ac-list nc pac))
         ((memq pm defun-param-mesgs)   (handle:defun-param!   ac-list nc pac))
         ((memq pm mv-let-mesgs)        (handle:mv-let!        ac-list nc pac))
         ((memq pm mv-let-rest-mesgs)   (handle:mv-let-rest!   ac-list nc pac))
         ((memq pm mv-define-mesgs)     (handle:mv-define!     ac-list nc pac))
         ((memq pm mv-define-rest-mesgs)
          (handle:mv-define-rest! ac-list nc pac))
         ((memq pm case-lambda-bind-mesgs)
          (handle:case-lambda-bind! ac-list nc pac))
         ((memq pm defproc-param-mesgs) (handle:defproc-param! ac-list nc pac))
         ((memq pm defproc-proc-mesgs)  (handle:defproc-proc!  ac-list nc pac))
         ((memq pm defproc-spec-mesgs)  (handle:defproc-spec!  ac-list nc pac))
         ((memq pm rest-spec-mesgs)     (handle:rest-spec!     ac-list nc pac))
         ((memq pm binding#-mesgs)      (handle:binding#!      ac-list nc pac))
         ((memq pm key-bind-mesgs)      (handle:key-bind!      ac-list nc pac))
         ((memq pm opt-bind-mesgs)      (handle:opt-bind!      ac-list nc pac))
         ((memq pm rest-bind-mesgs)     (handle:rest-bind!     ac-list nc pac))
         ((memq pm key-init-mesgs)      (handle:key-init!      ac-list nc pac))
         ((memq pm opt-init-mesgs)      (handle:opt-init!      ac-list nc pac))
         ((memq pm dsssl/key-mesgs)     (handle:dsssl/key!     ac-list nc pac))
         ((memq pm dsssl/opt-mesgs)     (handle:dsssl/opt!     ac-list nc pac))
         ((memq pm dsssl/rest-mesgs)    (handle:dsssl/rest!    ac-list nc pac))
         ((eq? pm '~rest)               (handle~rest!          ac-list nc pac))
         ((eq? pm '~dsssl)              (handle~dsssl!         ac-list nc pac))
         ((eq? pm '~dsssl/key)          (handle~dsssl/key!     ac-list nc pac))
         ((eq? pm '~dsssl/opt)          (handle~dsssl/opt!     ac-list nc pac))
         ((eq? pm '~dsssl/rest)         (handle~dsssl/rest!    ac-list nc pac))
         ((eq? pm '~rest-bind)          (handle~rest-bind!     ac-list nc pac))
         ((eq? pm '~~lambda-bind)       (handle~~lambda-bind!  ac-list nc pac))
         ((eq? pm '~sv-define)          (handle~sv-define!     ac-list nc pac))
         ((eq? pm '~named/sv-let)       (handle~named/sv-let!  ac-list nc pac))
         ((eq? pm '~~~~let-mv)          (handle~~~~let-mv!     ac-list nc pac))
         ((eq? pm '~~defproc)           (handle~~defproc!      ac-list nc pac))
         ((eq? pm '~~mv-define)         (handle~~mv-define!    ac-list nc pac))
         ((memq pm ~defun-param-mesgs)  (handle~defun-param!   ac-list nc pac))
         ((memq pm ~sv-let-outer-mesgs) (handle~~~let-sv!      ac-list nc pac))
         ((memq pm ~sv-let-inner-mesgs) (handle~~let-sv!       ac-list nc pac))
         ((memq pm ~sv-let-mesgs)       (handle~sv-let!        ac-list nc pac))
         ((memq pm ~key-init-mesgs)     (handle~key!           ac-list nc pac))
         ((memq pm ~opt-init-mesgs)     (handle~opt!           ac-list nc pac))
         ((memq pm ~key-bind-mesgs)     (handle~~key-bind!     ac-list nc pac))
         ((memq pm ~opt-bind-mesgs)     (handle~~opt-bind!     ac-list nc pac))
         ((memq pm ~lambda-bind-mesgs)  (handle~lambda-bind!   ac-list nc pac))
         ((memq pm ~defun-proc-mesgs)   (handle~defun-proc!    ac-list nc pac))
         ((memq pm ~mv-let-outer-mesgs) (handle~~~let-mv!      ac-list nc pac))
         ((memq pm ~mv-let-inner-mesgs) (handle~~let-mv!       ac-list nc pac))
         ((memq pm ~mv-let-mesgs)       (handle~mv-let!        ac-list nc pac))
         ((memq pm ~mv-define-mesgs)    (handle~mv-define!     ac-list nc pac))
         ((memq pm ~defproc-param-mesgs)(handle~defproc-param! ac-list nc pac))
         ((memq pm ~defproc-proc-mesgs) (handle~defproc-proc!  ac-list nc pac))
         ((memq pm ~defproc-spec-mesgs) (handle~defproc-spec!  ac-list nc pac))
         ((memq pm ~rest-spec-mesgs)    (handle~rest-spec!     ac-list nc pac))
         ((memq pm ~case-lambda-outermost-mesgs)
          (handle~~case-lambda! ac-list nc pac))
         ((memq pm ~case-lambda-outer-mesgs)
          (handle~~case-lambda!  ac-list nc pac))
         ((memq pm ~case-lambda-bind-mesgs)
          (handle~case-lambda! ac-list nc pac))
         (else #f))))))
