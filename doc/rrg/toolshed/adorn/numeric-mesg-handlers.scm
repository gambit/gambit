;; Copyright (c) 2024 by Macon Gambill, all rights reserved.

(define (revise-numeric/maybe-invalidate! ac-list nc)
  (let loop ((rest ac-list) (previous-ac #f))
    (if (null? rest)
        (cond ((and previous-ac (char=? (get-char previous-ac) #\#))
               (if (memc nc delim-chars)
                   (try-nc! ac-list nc)
                   (adorn-char nc 'invalid 'invalid)))
              ((memc nc delim-chars) (try-nc! ac-list nc))
              (else (adorn-char nc 'default #f)))
        (let ((ac (car rest)))
          (cond ((eq? (get-kind ac) 'number)
                 (set-kind! ac 'default)
                 (loop (cdr rest) ac))
                (else (loop '() previous-ac)))))))

(define (^try-radix-pm! radix-chars mesg# +/-mesg mesg)
  (lambda (ac-list nc)
    (cond ((memc nc radix-chars) (adorn-char nc 'number mesg))
          ((char=? nc #\#) (adorn-char nc 'number mesg#))
          ((memc nc '(#\+ #\-)) (adorn-char nc 'number +/-mesg))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try-bin-pm! (^try-radix-pm! binary-chars 'bin# 'bin-num+/- 'bin-num))
(define try-oct-pm! (^try-radix-pm! octal-chars 'oct# 'oct-num+/- 'oct-num))
(define try-hex-pm!
  (^try-radix-pm! hexadecimal-chars 'hex# 'hex-num+/- 'hex-num))

(define (try-dec-pm! ac-list nc)
  (if (char=? nc #\.)
      (adorn-char nc 'number 'dec-num)
      ((^try-radix-pm! decimal-chars 'dec# 'dec.num+/- 'dec.num) ac-list nc)))

(define (^try-radix#pm! ~mesg i~mesg)
  (lambda (ac-list nc)
    (cond ((char-ci=? nc #\e) (adorn-char nc 'number ~mesg))
          ((char-ci=? nc #\i) (adorn-char nc 'number i~mesg))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try-bin#pm! (^try-radix#pm! '~bin-num 'i~bin-num))
(define try-dec#pm! (^try-radix#pm! '~dec.num 'i~dec.num))
(define try-oct#pm! (^try-radix#pm! '~oct-num 'i~oct-num))
(define try-hex#pm! (^try-radix#pm! '~hex-num 'i~hex-num))

(define (^try-num-pm! radix-chars num-mesg)
  (lambda (ac-list nc)
    (cond ((memc-ci nc radix-chars) (adorn-char nc 'number num-mesg))
          ((memc nc delim-chars) (try-nc! ac-list nc))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try-bin-num-pm! (^try-num-pm! binary-chars 'bin-num))
(define try-oct-num-pm! (^try-num-pm! octal-chars 'oct-num))
(define try-hex-num-pm! (^try-num-pm! hexadecimal-chars 'hex-num))
(define try~bin-num-pm!
  (^try-num-pm! (append '(#\+ #\-) binary-chars) 'bin-num))
(define try~oct-num-pm!
  (^try-num-pm! (append '(#\+ #\-) octal-chars) 'oct-num))
(define try~hex-num-pm!
  (^try-num-pm! (append '(#\+ #\-) hexadecimal-chars) 'hex-num))

(define (try~dec.num-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec.num))
        ((memc nc '(#\+ #\-)) (adorn-char nc 'number 'dec.num+/-))
        ((char=? nc #\.) (adorn-char nc 'number '~dec-num))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-dec.num+/-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec.num))
        ((char=? nc #\.) (adorn-char nc 'number '~dec-num))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (^try-exactness-pm! mesg# +/-mesg)
  (lambda (ac-list nc)
    (cond ((char=? nc #\#) (adorn-char nc 'number mesg#))
          ((char=? nc #\.) (adorn-char nc 'number 'dec-num))
          ((memc nc '(#\+ #\-)) (adorn-char nc 'number +/-mesg))
          ((memc nc decimal-chars) (adorn-char nc 'number 'dec.num))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try-exact-pm! (^try-exactness-pm! 'exact# '~dec.num))
(define try-inexact-pm! (^try-exactness-pm! 'inexact# '~inf/nan/dec.num))

(define (try-exact#pm! ac-list nc)
  (cond ((char-ci=? nc #\b) (adorn-char nc 'number '~bin-num))
        ((char-ci=? nc #\d) (adorn-char nc 'number '~dec.num))
        ((char-ci=? nc #\o) (adorn-char nc 'number '~oct-num))
        ((char-ci=? nc #\x) (adorn-char nc 'number '~hex-num))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-inexact#pm! ac-list nc)
  (cond ((char-ci=? nc #\b) (adorn-char nc 'number 'i~bin-num))
        ((char-ci=? nc #\d) (adorn-char nc 'number 'i~dec.num))
        ((char-ci=? nc #\o) (adorn-char nc 'number 'i~oct-num))
        ((char-ci=? nc #\x) (adorn-char nc 'number 'i~hex-num))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (^try-i~num-pm! radix-chars num-mesg +/-mesg)
  (lambda (ac-list nc)
    (cond ((memc-ci nc radix-chars) (adorn-char nc 'number num-mesg))
          ((memc nc '(#\+ #\-)) (adorn-char nc 'number +/-mesg))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try-i~bin-num-pm!
  (^try-i~num-pm! binary-chars 'bin-num '~inf/nan/bin-num))
(define try-i~oct-num-pm!
  (^try-i~num-pm! octal-chars 'oct-num '~inf/nan/oct-num))
(define try-i~hex-num-pm!
  (^try-i~num-pm! hexadecimal-chars 'hex-num '~inf/nan/hex-num))

(define (try-i~dec.num-pm! ac-list nc)
  (if (char=? nc #\.)
      (adorn-char nc 'number '~dec-num)
      ((^try-i~num-pm! decimal-chars 'dec.num '~inf/nan/dec.num) ac-list nc)))

(define (^try~inf/nan/num-pm! radix-chars num-mesg)
  (lambda (ac-list nc)
    (cond ((char-ci=? nc #\i)
           (revise-until! ac-list 'number 1)
           (adorn-char nc 'number '~inf))
          ((char-ci=? nc #\n)
           (revise-until! ac-list 'number 1)
           (adorn-char nc 'number '~nan))
          ((memc-ci nc radix-chars)
           (revise-until! ac-list 'number 1)
           (adorn-char nc 'number num-mesg))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define try~inf/nan/bin-pm! (^try~inf/nan/num-pm! binary-chars 'bin-num))
(define try~inf/nan/oct-pm! (^try~inf/nan/num-pm! octal-chars 'oct-num))
(define try~inf/nan/hex-pm! (^try~inf/nan/num-pm! hexadecimal-chars 'hex-num))

(define (try~inf/nan/dec-pm! ac-list nc)
  (cond ((char=? nc #\.)
         (revise-until! ac-list 'number 1)
         (adorn-char nc 'number '~dec-num))
        (else ((^try~inf/nan/num-pm! decimal-chars 'dec.num) ac-list nc))))

(define (try~dec-num-pm! ac-list nc)
  (cond ((memc nc decimal-chars)
         (revise-until! ac-list 'number 1)
         (adorn-char nc 'number 'dec-num))
        ((memc nc whitespace-chars)
         (let ((rest (cdr ac-list)))
           (if (null? rest)
               (revise-numeric/maybe-invalidate! ac-list nc)
               (cond ((atmosphere? (car rest))
                      (revise-until! ac-list 'dot 1)
                      (try-nc! ac-list nc))
                     (else (revise-numeric/maybe-invalidate! ac-list nc))))))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (^try~inf/nan-pm! ~mesg mesg goal-string)
  (lambda (ac-list nc)
    (let* ((recents (chars-while ac-list ~mesg))
           (tested (map char-downcase (append recents (list nc)))))
      (cond ((matches? goal-string tested) (adorn-char nc 'number mesg))
            ((could-match? goal-string tested) (adorn-char nc 'number ~mesg))
            (else (revise-numeric/maybe-invalidate! ac-list nc))))))

(define try~inf-pm! (^try~inf/nan-pm! '~inf 'inf "inf.0"))
(define try~nan-pm! (^try~inf/nan-pm! '~nan 'nan "nan.0"))

(define (try~inf-pm! ac-list nc)
  (let* ((recents (chars-while ac-list '~inf))
         (tested (map char-downcase (append recents (list nc)))))
    (cond ((matches? "inf.0" tested) (adorn-char nc 'number 'inf))
          ((could-match? "inf.0" tested) (adorn-char nc 'number '~inf))
          (else (revise-numeric/maybe-invalidate! ac-list nc)))))

(define (try-dec.num-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec.num))
        ((memc nc delim-chars) (try-nc! ac-list nc))
        ((char=? nc #\.) (adorn-char nc 'number 'dec-num))
        ((memc-ci nc '(#\e #\s #\f #\d #\l)) (adorn-char nc 'number '~dec-end))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-dec-num-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec-num))
        ((memc nc delim-chars) (try-nc! ac-list nc))
        ((memc-ci nc '(#\e #\s #\f #\d #\l)) (adorn-char nc 'number '~dec-end))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try~dec-end-pm! ac-list nc)
  (cond ((memc nc '(#\+ #\-)) (adorn-char nc 'number 'dec-end+/-))
        ((memc nc decimal-chars) (adorn-char nc 'number 'dec-end))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-dec-end+/-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec-end))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-dec-end-pm! ac-list nc)
  (cond ((memc nc decimal-chars) (adorn-char nc 'number 'dec-end))
        ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (revise-numeric/maybe-invalidate! ac-list nc))))

(define (try-numeric-pm! ac-list nc pm)
  (cond ((eq? pm 'exact) (try-exact-pm! ac-list nc))
        ((eq? pm 'exact#) (try-exact#pm! ac-list nc))
        ((eq? pm 'inexact) (try-inexact-pm! ac-list nc))
        ((eq? pm 'inexact#) (try-inexact#pm! ac-list nc))
        ((eq? pm 'bin) (try-bin-pm! ac-list nc))
        ((eq? pm 'bin#) (try-bin#pm! ac-list nc))
        ((eq? pm '~bin-num) (try~bin-num-pm! ac-list nc))
        ((eq? pm 'bin-num) (try-bin-num-pm! ac-list nc))
        ((eq? pm 'i~bin-num) (try-i~bin-num-pm! ac-list nc))
        ((eq? pm '~inf/nan/bin-num) (try~inf/nan/bin-pm! ac-list nc))
        ((eq? pm 'oct) (try-oct-pm! ac-list nc))
        ((eq? pm 'oct#) (try-oct#pm! ac-list nc))
        ((eq? pm '~oct-num) (try~oct-num-pm! ac-list nc))
        ((eq? pm 'oct-num) (try-oct-num-pm! ac-list nc))
        ((eq? pm 'i~oct-num) (try-i~oct-num-pm! ac-list nc))
        ((eq? pm '~inf/nan/oct-num) (try~inf/nan/oct-pm! ac-list nc))
        ((eq? pm 'dec) (try-dec-pm! ac-list nc))
        ((eq? pm 'dec#) (try-dec#pm! ac-list nc))
        ((eq? pm '~dec.num) (try~dec.num-pm! ac-list nc))
        ((eq? pm 'dec.num+/-) (try-dec.num+/-pm! ac-list nc))
        ((eq? pm '~dec-num) (try~dec-num-pm! ac-list nc))
        ((eq? pm 'dec.num) (try-dec.num-pm! ac-list nc))
        ((eq? pm 'dec-num) (try-dec-num-pm! ac-list nc))
        ((eq? pm '~dec-end) (try~dec-end-pm! ac-list nc))
        ((eq? pm 'dec-end+/-) (try-dec-end+/-pm! ac-list nc))
        ((eq? pm 'dec-end) (try-dec-end-pm! ac-list nc))
        ((eq? pm 'i~dec.num) (try-i~dec.num-pm! ac-list nc))
        ((eq? pm '~inf/nan/dec.num) (try~inf/nan/dec-pm! ac-list nc))
        ((eq? pm 'hex) (try-hex-pm! ac-list nc))
        ((eq? pm 'hex#) (try-hex#pm! ac-list nc))
        ((eq? pm '~hex-num) (try~hex-num-pm! ac-list nc))
        ((eq? pm 'hex-num) (try-hex-num-pm! ac-list nc))
        ((eq? pm 'i~hex-num) (try-i~hex-num-pm! ac-list nc))
        ((eq? pm '~inf/nan/hex-num) (try~inf/nan/hex-pm! ac-list nc))
        ((eq? pm '~inf) (try~inf-pm! ac-list nc))
        ((eq? pm '~nan) (try~nan-pm! ac-list nc))
        ((memq pm '(inf nan))
         (cond ((memc nc delim-chars) (try-nc! ac-list nc))
               (else (revise-numeric/maybe-invalidate! ac-list nc))))
        (else #f)))
