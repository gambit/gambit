;; Copyright (c) 2024 by Macon Gambill, all rights reserved.

(define (rt-syntax? ac) (memq (get-kind ac) '(rt-syntax aux-syntax)))

(define try~rt-syntax-pm!
  (let ((etc-delims (char-complement (cons #\| whitespace-chars) delim-chars)))
    (lambda (ac-list nc pac pm)
      (and (eq? pm '~rt-syntax)
           (if (char=? nc #\|)
               (let ((mesg (get-mesg (cadr ac-list))))
                 (if (memq mesg '(~rt-syntax ~~rt-syntax))
                     (begin-symmetric ac-list nc 'ident)
                     (begin (set-mesg! pac mesg)
                            (try-pm! ac-list nc pac))))
               (let ((recents (chars-until ac-list '~~rt-syntax)))
                 (cond ((memc nc whitespace-chars)
                        (cond ((matches? '(#\# #\#) recents)
                               (revise-until! ac-list 'repl-ref 2)
                               (adorn-char nc 'whitespace #f))
                              (else (let ((mesg (get-mesg (cadr ac-list))))
                                      (if (memq mesg '(~rt-syntax
                                                       ~~rt-syntax
                                                       rt-aux-active))
                                          (adorn-char nc 'whitespace #f)
                                          (adorn-char nc 'whitespace mesg))))))
                       ((and (char=? nc #\#) (matches? '(#\# #\#) recents))
                        (set-mesg! pac '~repl-ref)
                        (set-mesg! (cadr ac-list) 'octothorpe)
                        (revise-until! ac-list 'repl-ref 'octothorpe)
                        (adorn-char nc 'repl-ref '~repl-ref))
                       ((memc nc etc-delims)
                        (when (matches? '(#\# #\#) recents)
                          (revise-until! ac-list 'repl-ref '2))
                        (try-nc! ac-list nc))
                       ((and (char=? nc #\e) (matches? '(#\e #\l #\s) recents))
                        (let ((syntax-mesg (rt-syntax-mesg (up-list ac-list))))
                          (cond ((eq? syntax-mesg 'rt-aux-active)
                                 (revise-until! ac-list 'aux-syntax 3)
                                 (adorn-char nc 'aux-syntax '~rt-syntax))
                                (else (adorn-char nc 'default '~rt-syntax)))))
                       (else (let ((tested (append recents (list nc))))
                               (cond
                                ((matches-one-of? runtime-syntax tested)
                                 (revise-until!
                                  ac-list 'rt-syntax '~~rt-syntax)
                                 (set-mesg! (car ac-list)
                                            (syntax->mesg tested))
                                 (adorn-char nc 'rt-syntax '~rt-syntax))
                                ((could-match-one-of? runtime-syntax tested)
                                 (revise-while! ac-list 'default rt-syntax?)
                                 (adorn-char nc 'default '~rt-syntax))
                                (else
                                 (revise-while! ac-list 'default rt-syntax?)
                                 (adorn-char nc 'default #f))))))))))))

(define (try-rt-syntax-ident-end-pm! ac-list nc pac pm)
  (and (eq? pm 'rt-syntax-ident-end)
       (cond ((memc nc whitespace-chars)
              (adorn-char nc 'whitespace (get-mesg (cadr ac-list))))
             (else (set-mesg! pac (get-mesg (cadr ac-list)))
                   (let ((ac (try-pm! ac-list nc pac)))
                     (set-mesg! pac 'rt-syntax-ident-end)
                     ac)))))

(define try~~rt-syntax-pm!
  (let ((non-whitespace-delims (char-complement whitespace-chars delim-chars))
        (ac->mesg (lambda (ac) (syntax->mesg (list (get-char ac))))))
    (lambda (ac-list nc pac pm)
      (and (eq? pm '~~rt-syntax)
           (cond ((memc nc whitespace-chars)
                  (adorn-char nc 'whitespace (ac->mesg pac)))
                 ((memc nc non-whitespace-delims)
                  (set-mesg! pac (ac->mesg pac))
                  (let ((ac (try-pm! ac-list nc pac)))
                    (set-mesg! pac '~~rt-syntax)
                    ac))
                 (else (let ((tested (list (get-char pac) nc)))
                         (cond
                          ((matches-one-of? runtime-syntax tested)
                           (set-kind! pac 'rt-syntax)
                           (let ((syntax-mesg (syntax->mesg tested)))
                             (when syntax-mesg (set-mesg! pac syntax-mesg)))
                           (adorn-char nc 'rt-syntax '~rt-syntax))
                          ((could-match-one-of? runtime-syntax tested)
                           (revise-while! ac-list 'default rt-syntax?)
                           (adorn-char nc 'default '~rt-syntax))
                          (else (revise-while! ac-list 'default rt-syntax?)
                                (adorn-char nc 'default #f))))))))))
