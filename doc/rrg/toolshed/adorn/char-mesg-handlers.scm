;; Copyright (c) 2024 by Macon Gambill, all rights reserved.

(define (char-body? ac) (eq? (get-kind ac) 'char-body))

(define (handle:char-1! ac-list nc)
  (adorn-char nc 'char-body (cond ((char=? nc #\x) 'char-x)
                                  ((char=? nc #\U) 'char-U)
                                  ((char=? nc #\u) 'char-u)
                                  (else 'char-2))))

(define (handle:char-2! ac-list nc)
  (cond ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (let ((tested (append (chars-until ac-list 1) (list nc))))
                (cond ((could-match-one-of? named-chars tested)
                       (revise-until! ac-list 'char 1)
                       (adorn-char nc 'char 'char-3))
                      (else (revise-until! ac-list 'char 1)
                            (adorn-char nc 'invalid 'invalid)))))))

(define (handle:char-3! ac-list nc)
  (cond ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (let ((tested (append (chars-until ac-list 2) (list nc))))
                (cond ((matches-one-of? short-named-chars tested)
                       (revise-until! ac-list 'char-body 2)
                       (adorn-char nc 'char-body 'char-4+))
                      ((could-match-one-of? named-chars tested)
                       (adorn-char nc 'char 'char-4+))
                      (else (adorn-char nc 'invalid 'invalid)))))))

(define (char-kind+not-char-1? ac)
  (and (eq? (get-kind ac) 'char) (not (eq? (get-mesg ac) 'char-1))))

(define (handle:char-4+! ac-list nc)
  (cond ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (let ((tested (append (chars-until ac-list 'char-2) (list nc))))
                (cond ((matches-one-of? long-named-chars tested)
                       (revise-while! ac-list 'char-body char-kind+not-char-1?)
                       (adorn-char nc 'char-body 'char-4+))
                      ((could-match-one-of? long-named-chars tested)
                       (revise-while! ac-list 'char char-body?)
                       (adorn-char nc 'char 'char-4+))
                      (else (revise-while! ac-list 'char char-body?)
                            (adorn-char nc 'invalid 'invalid)))))))

(define (handle:char-x! ac-list nc)
  (cond ((memc-ci nc hexadecimal-chars) (adorn-char nc 'char-body 'char-x))
        ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (revise-while! ac-list 'char char-body?)
              (adorn-char nc 'invalid 'invalid))))

(define (^handle:char-Uu-init! next-mesg)
  (lambda (ac-list nc)
    (cond ((memc-ci nc hexadecimal-chars)
           (revise-until! ac-list 'char 1)
           (adorn-char nc 'char next-mesg))
          ((memc nc delim-chars) (try-nc! ac-list nc))
          (else (revise-until! ac-list 'char 1)
                (adorn-char nc 'invalid 'invalid)))))

(define handle:char-u! (^handle:char-Uu-init! 'char-u0))
(define handle:char-U! (^handle:char-Uu-init! 'char-U0))

(define (^handle:char-Uu! next-mesg)
  (lambda (ac-list nc)
    (cond ((memc-ci nc hexadecimal-chars) (adorn-char nc 'char next-mesg))
          ((memc nc delim-chars) (try-nc! ac-list nc))
          (else (adorn-char nc 'invalid 'invalid)))))

(define handle:char-u0! (^handle:char-Uu! 'char-u1))
(define handle:char-u1! (^handle:char-Uu! 'char-u2))
(define handle:char-U0! (^handle:char-Uu! 'char-U1))
(define handle:char-U1! (^handle:char-Uu! 'char-U2))
(define handle:char-U2! (^handle:char-Uu! 'char-U3))
(define handle:char-U3! (^handle:char-Uu! 'char-U4))
(define handle:char-U4! (^handle:char-Uu! 'char-U5))
(define handle:char-U5! (^handle:char-Uu! 'char-U6))

(define (^handle:char-Uu-penultimate! next-mesg distance)
  (lambda (ac-list nc)
    (cond ((memc-ci nc hexadecimal-chars)
           (revise-until! ac-list 'char-body distance)
           (adorn-char nc 'char-body next-mesg))
          ((memc nc delim-chars) (try-nc! ac-list nc))
          (else (adorn-char nc 'invalid 'invalid)))))

(define handle:char-u2! (^handle:char-Uu-penultimate! 'char-u3 4))
(define handle:char-U6! (^handle:char-Uu-penultimate! 'char-U7 9))

(define (handle:char-Uu-last! ac-list nc)
  (cond ((memc nc delim-chars) (try-nc! ac-list nc))
        (else (revise-while! ac-list 'char char-body?)
              (adorn-char nc 'invalid 'invalid))))

(define handle:char-u3! handle:char-Uu-last!)
(define handle:char-U7! handle:char-Uu-last!)

(define (try-char-pm! ac-list nc pac pm)
  (cond ((eq? pm 'char-1)  (handle:char-1!  ac-list nc))
        ((eq? pm 'char-2)  (handle:char-2!  ac-list nc))
        ((eq? pm 'char-3)  (handle:char-3!  ac-list nc))
        ((eq? pm 'char-4+) (handle:char-4+! ac-list nc))
        ((eq? pm 'char-x)  (handle:char-x!  ac-list nc))
        ((eq? pm 'char-u)  (handle:char-u!  ac-list nc))
        ((eq? pm 'char-u0) (handle:char-u0! ac-list nc))
        ((eq? pm 'char-u1) (handle:char-u1! ac-list nc))
        ((eq? pm 'char-u2) (handle:char-u2! ac-list nc))
        ((eq? pm 'char-u3) (handle:char-u3! ac-list nc))
        ((eq? pm 'char-U)  (handle:char-U!  ac-list nc))
        ((eq? pm 'char-U0) (handle:char-U0! ac-list nc))
        ((eq? pm 'char-U1) (handle:char-U1! ac-list nc))
        ((eq? pm 'char-U2) (handle:char-U2! ac-list nc))
        ((eq? pm 'char-U3) (handle:char-U3! ac-list nc))
        ((eq? pm 'char-U4) (handle:char-U4! ac-list nc))
        ((eq? pm 'char-U5) (handle:char-U5! ac-list nc))
        ((eq? pm 'char-U6) (handle:char-U6! ac-list nc))
        ((eq? pm 'char-U7) (handle:char-U7! ac-list nc))
        (else #f)))
