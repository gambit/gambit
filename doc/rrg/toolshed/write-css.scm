#!/usr/bin/env gsi-script
;; Copyright (c) 2024 by Macon Gambill, all rights reserved.

(define (main . args)
  (let ((values (let loop ((rest (cdr (command-line)))
                           (examples-only? #f)
                           (dark 'modus-vivendi)
                           (light 'modus-operandi))
                  (if (null? rest)
                      (list examples-only? dark light)
                      (let ((opt (car rest)))
                        (cond ((member opt '("-c" "--codemirror") string=?)
                               (loop (cdr rest)
                                     examples-only?
                                     'codemirror
                                     'codemirror))
                              ((member opt '("-d" "--dark-theme") string=?)
                               (loop (cddr rest)
                                     examples-only?
                                     (string->symbol (cadr rest))
                                     light))
                              ((member opt '("-e" "--examples-only") string=?)
                               (loop (cdr rest)
                                     #t
                                     dark
                                     light))
                              ((member opt '("-l" "--light-theme") string=?)
                               (loop (cddr rest)
                                     examples-only?
                                     dark
                                     (string->symbol (cadr rest))))
                              ((member opt '("-m" "--modus") string=?)
                               (loop (cdr rest)
                                     examples-only?
                                     'modus-vivendi
                                     'modus-operandi))
                              ((member opt '("-t" "--theme") string=?)
                               (cond ((string=? "modus" (cadr rest))
                                      (loop (cddr rest)
                                            examples-only?
                                            'modus-vivendi
                                            'modus-operandi))
                                     ((string=? "codemirror" (cadr rest))
                                      (loop (cddr rest)
                                            examples-only?
                                            'codemirror
                                            'codemirror))
                                     (else (error "Unknown theme"))))
                              (else (error "Unknown argument" opt))))))))
    (let ((examples-only? (car values))
          (dark-theme (cadr values))
          (light-theme (caddr values)))
      (write-string "/* CSS generated by write-css.scm */\n\n")
      (if examples-only?
          (write-examples-only-css light-theme dark-theme)
          (write-full-css light-theme dark-theme)))))

(define (write-examples-only-css light-theme dark-theme)
  (define (write-light-theme)
    (write-from-template light-theme examples-color-template))
  (define (write-dark-theme)
    (write-from-template dark-theme examples-color-template))
  (write-string examples-noncolor-css)
  (write-light-theme)
  (write-string "@media (prefers-color-scheme: dark) {\n")
  (indent+write 4 write-dark-theme)
  (write-string "}\n"))

(define (write-full-css light-theme dark-theme)
  (define (write-light-theme)
    (write-from-template light-theme general-color-template)
    (write-from-template light-theme examples-color-template))
  (define (write-dark-theme)
    (write-from-template dark-theme general-color-template)
    (write-from-template dark-theme examples-color-template))
  (write-string general-noncolor-css)
  (write-string examples-noncolor-css)
  (write-light-theme)
  (write-string "@media (prefers-color-scheme: dark) {\n")
  (indent+write 4 write-dark-theme)
  (write-string "}\n"))

(define (write-from-template |th\x65;m\u0065| template)
  (let ((char-list (call-with-input-string
                    template (lambda (p) (read-all p read-char)))))
    (let loop ((buffer '()) (rest char-list))
      (if (null? rest)
          (newline)
          (let ((char (car rest)))
            (if (null? buffer)
                (if (char=? char #\<)
                    (loop (cons char buffer) (cdr rest))
                    (begin (write-char char)
                           (loop '() (cdr rest))))
                (if (char=? char #\>)
                    (let ((color-string (list->string (cdr (reverse buffer)))))
                      (write-string (get-color theme color-string))
                      (loop '() (cdr rest)))
                    (loop (cons char buffer) (cdr rest)))))))))

(define (indent+write spaces thunk-that-writes)
  (let ((indentation (make-string spaces #\space))
        (out-string (open-output-string)))
    (parameterize ((current-output-port out-string))
      (thunk-that-writes))
    (for-each (lambda (line)
                (if (positive? (string-length line))
                    (write-string (string-append indentation line "\n"))
                    (newline)))
              (call-with-input-string (get-output-string out-string)
                                      (lambda (p) (read-all p read-line))))))

(define examples-color-template #<<END
body {
    color: <fg-main>;
    background-color: <bg-main>;
}

pre.lisp-preformatted {
    span.abbrev {color: <abbrev>}
    span.boolean {color: <boolean>}
    span.box {color: <box>}
    span.char, span.char-body {color: <char>}
    span.atmosphere {color: <atmosphere>}
    span.compound {color: <compound>}
    span.compound-empty {color: <compound-empty>}
    span.datum-label {color: <datum-label>}
    span.datum-ref {color: <datum-ref>}
    span.def-like-bind, span.def-like-esc {color: <def-like-bind>}
    span.dot {color: <dot>}
    span.dsssl, span.sharp {color: <sharp>}
    span.ident, span.ident-esc {color: <ident>}
    span.hs-begin {color: <hs-begin>}
    span.hs-key {color: <hs-key>}
    span.invalid {color: <invalid>}
    span.keyword, span.key-bind, span.key-init {color: <keyword>}
    span.let-like-bind, span.let-like-esc {color: <let-like-bind>}
    span.number {color: <number>}
    span.problem {background-color: <problem>}
    span.repl-ref {color: <repl-ref>}
    span.serial-ref {color: <serial-ref>}
    span.shebang {color: <shebang>}
    span.string, span.string-esc {color: <string>}
    span.syntax, span.syntax-esc {color: <syntax>}
}

END
)

(define examples-noncolor-css #<<END
pre.lisp-preformatted {
    font-size: 1.1em;
    span.atmosphere, span.dsssl { font-style: oblique }
    span.char-body, span.def-like-esc, span.ident-esc, span.let-like-esc,
      span.string-esc, span.syntax-esc {
        font-weight: bold
    }
}

END
)

(define general-color-template #<<END
a:link {color: <link>}
a:visited {color: <link-visited>}
hr {color: <border>}
span.todo {background-color: <todo>}
.chapter-level-extent pre {border-left-color: <fg-main>}

dl.first-deftp, dl.first-deftypefn, dl.first-deftypevr {
    border-top-color: <border>;
    dt {
        code.def-code-arguments {color: <let-like-bind>}
        span.category-def {color: <category-def>}
        span.def-bracket {color: <def-bracket>}
        span.def-dots {color: <def-dots>}
    }
    dt.deftypefn, dt.deftypefnx {
                  strong.def-name {color: <def-like-bind>}
    }
    dd {
        background-color: <bg-main>;
    }
}

dl.first-deftp {
    background-color: <bg-deftp>;
    background-image: linear-gradient(90deg, <deftp-l>, <deftp-r> 35%);
}

dl.first-deftypefn {
    background-color: <bg-deftypefn>;
    background-image: linear-gradient(90deg, <deftypefn-l>, <deftypefn-r> 35%);
    span.def-paren {color: <compound>}
    dd pre span.exception {color: <exception>}
}

dl.first-deftypevr {
    background-color: <bg-deftypevr>;
    background-image: linear-gradient(90deg, <deftypevr-l>, <deftypevr-r> 35%);
}

END
)

(define general-noncolor-css #<<END
strong.def-name {font-size: large}

.top-level-extent, .chapter-level-extent, .appendix-level-extent {
    dd, .center, li, p:not(.nav-panel p) {width: 40rem}
}

.chapter-level-extent {
    dd p:not(.nav-panel p), p:not(.nav-panel p) {text-align: justify}
}

dl.first-deftp, dl.first-deftypefn, dl.first-deftypevr {
    border-top-style: solid;
    border-top-width: thin;
    padding-top: 0.1rem;
    width: 44rem;
    dt.deftp, dt.deftypefn, dt.deftypefnx, dt.deftypevr {
        align-content: center;
        padding-left: 0.3em;
        strong.def-name {font-weight: normal}
    }
    dt.deftp, dt.deftypevr {
        span, code, strong {font-family: inherit}
    }
    dt.deftypefn, dt.deftypefnx {font-family: monospace}
    dd {
        align-content: start;
        margin-left: 0;
        margin-top: 0.1rem;
        padding-left: 2rem;
        width: 100%;
        div.example {
            margin-left: 1.6rem;
            pre {
                border-left-style: dotted;
                border-left-width: thin;
                padding-left: 0.4rem;
            }
        }
    }
}

END
)

(define modus-operandi-colors ;; based on Protesilaos Stavrou's modus-themes
  '((bg-active           . "#c4c4c4") (bg-added            . "#c1f2d1")
    (bg-added-faint      . "#d8f8e1") (bg-added-fringe     . "#6cc06c")
    (bg-added-refine     . "#aee5be") (bg-blue-intense     . "#bfc9ff")
    (bg-blue-nuanced     . "#ecedff") (bg-blue-subtle      . "#ccdfff")
    (bg-changed          . "#ffdfa9") (bg-changed-faint    . "#ffefbf")
    (bg-changed-fringe   . "#d7c20a") (bg-changed-refine   . "#fac090")
    (bg-char-0           . "#7feaff") (bg-char-1           . "#ffaaff")
    (bg-char-2           . "#dff000") (bg-clay             . "#f1c8b5")
    (bg-completion       . "#c0deff") (bg-cyan-intense     . "#a4d5f9")
    (bg-cyan-nuanced     . "#e0f2fa") (bg-cyan-subtle      . "#bfefff")
    (bg-dim              . "#f2f2f2") (bg-green-intense    . "#8adf80")
    (bg-green-nuanced    . "#e0f6e0") (bg-green-subtle     . "#b3fabf")
    (bg-hl-line          . "#dae5ec") (bg-hover            . "#b2e4dc")
    (bg-hover-secondary  . "#f5d0a0") (bg-inactive         . "#e0e0e0")
    (bg-lavender         . "#dfcdfa") (bg-magenta-intense  . "#dfa0f0")
    (bg-magenta-nuanced  . "#f8e6f5") (bg-magenta-subtle   . "#ffddff")
    (bg-main             . "#ffffff") (bg-ochre            . "#f0e3c0")
    (bg-paren-expression . "#efd3f5") (bg-paren-match      . "#5fcfff")
    (bg-red-intense      . "#ff8f88") (bg-red-nuanced      . "#ffe8e8")
    (bg-red-subtle       . "#ffcfbf") (bg-region           . "#bdbdbd")
    (bg-removed          . "#ffd8d5") (bg-removed-faint    . "#ffe9e9")
    (bg-removed-fringe   . "#d84a4f") (bg-removed-refine   . "#f3b5af")
    (bg-sage             . "#c0e7d4") (bg-tab-bar          . "#dfdfdf")
    (bg-tab-other        . "#c2c2c2") (bg-yellow-intense   . "#f3d000")
    (bg-yellow-nuanced   . "#f8f0d0") (bg-yellow-subtle    . "#fff576")
    (blue                . "#0031a9") (blue-cooler         . "#0000b0")
    (blue-faint          . "#003497") (blue-intense        . "#0000ff")
    (blue-warmer         . "#3548cf") (border              . "#9f9f9f")
    (cyan                . "#005e8b") (cyan-cooler         . "#005f5f")
    (cyan-faint          . "#005077") (cyan-intense        . "#008899")
    (cyan-warmer         . "#3f578f") (fg-added            . "#005000")
    (fg-added-intense    . "#006700") (fg-alt              . "#193668")
    (fg-changed          . "#553d00") (fg-changed-intense  . "#655000")
    (fg-clay             . "#63192a") (fg-dim              . "#595959")
    (fg-lavender         . "#443379") (fg-main             . "#000000")
    (fg-ochre            . "#573a30") (fg-removed          . "#8f1313")
    (fg-removed-intense  . "#aa2222") (fg-sage             . "#124b41")
    (gold                . "#80601f") (green               . "#006800")
    (green-cooler        . "#00663f") (green-faint         . "#2a5045")
    (green-intense       . "#008900") (green-warmer        . "#316500")
    (indigo              . "#4a3a8a") (magenta             . "#721045")
    (magenta-cooler      . "#531ab6") (magenta-faint       . "#7c318f")
    (magenta-intense     . "#dd22dd") (magenta-warmer      . "#8f0075")
    (maroon              . "#731c52") (olive               . "#56692d")
    (pink                . "#7b435c") (red                 . "#a60000")
    (red-cooler          . "#a0132f") (red-faint           . "#7f0000")
    (red-intense         . "#d00000") (red-warmer          . "#972500")
    (rust                . "#8a290f") (slate               . "#2f3f83")
    (yellow              . "#6f5500") (yellow-cooler       . "#7a4f2f")
    (yellow-faint        . "#624416") (yellow-intense      . "#808000")
    (yellow-warmer       . "#884900") (fg-dimmer           . "#777777")))

(define modus-vivendi-colors ;; based on Protesilaos Stavrou's modus-themes
  '((bg-active           . "#535353") (bg-added            . "#00381f")
    (bg-added-faint      . "#002910") (bg-added-fringe     . "#237f3f")
    (bg-added-refine     . "#034f2f") (bg-blue-intense     . "#1640b0")
    (bg-blue-nuanced     . "#12154a") (bg-blue-subtle      . "#242679")
    (bg-changed          . "#363300") (bg-changed-faint    . "#2a1f00")
    (bg-changed-fringe   . "#8a7a00") (bg-changed-refine   . "#4a4a00")
    (bg-char-0           . "#0050af") (bg-char-1           . "#7f1f7f")
    (bg-char-2           . "#625a00") (bg-clay             . "#49191a")
    (bg-completion       . "#2f447f") (bg-cyan-intense     . "#2266ae")
    (bg-cyan-nuanced     . "#042837") (bg-cyan-subtle      . "#004065")
    (bg-dim              . "#1e1e1e") (bg-green-intense    . "#2f822f")
    (bg-green-nuanced    . "#092f1f") (bg-green-subtle     . "#00422a")
    (bg-hl-line          . "#2f3849") (bg-hover            . "#45605e")
    (bg-hover-secondary  . "#654a39") (bg-inactive         . "#303030")
    (bg-lavender         . "#38325c") (bg-magenta-intense  . "#7030af")
    (bg-magenta-nuanced  . "#2f0c3f") (bg-magenta-subtle   . "#552f5f")
    (bg-main             . "#000000") (bg-ochre            . "#462f20")
    (bg-paren-expression . "#453040") (bg-paren-match      . "#2f7f9f")
    (bg-red-intense      . "#9d1f1f") (bg-red-nuanced      . "#3a0c14")
    (bg-red-subtle       . "#620f2a") (bg-region           . "#5a5a5a")
    (bg-removed          . "#4f1119") (bg-removed-faint    . "#380a0f")
    (bg-removed-fringe   . "#b81a1f") (bg-removed-refine   . "#781a1f")
    (bg-sage             . "#143e32") (bg-tab-bar          . "#313131")
    (bg-tab-other        . "#545454") (bg-yellow-intense   . "#7a6100")
    (bg-yellow-nuanced   . "#381d0f") (bg-yellow-subtle    . "#4a4000")
    (blue                . "#2fafff") (blue-cooler         . "#00bcff")
    (blue-faint          . "#82b0ec") (blue-intense        . "#338fff")
    (blue-warmer         . "#79a8ff") (border              . "#646464")
    (cyan                . "#00d3d0") (cyan-cooler         . "#6ae4b9")
    (cyan-faint          . "#9ac8e0") (cyan-intense        . "#00eff0")
    (cyan-warmer         . "#4ae2f0") (fg-added            . "#a0e0a0")
    (fg-added-intense    . "#80e080") (fg-alt              . "#c6daff")
    (fg-changed          . "#efef80") (fg-changed-intense  . "#c0b05f")
    (fg-clay             . "#f1b090") (fg-dim              . "#989898")
    (fg-lavender         . "#dfc0f0") (fg-main             . "#ffffff")
    (fg-ochre            . "#e0d09c") (fg-removed          . "#ffbfbf")
    (fg-removed-intense  . "#ff9095") (fg-sage             . "#c3e7d4")
    (gold                . "#c0965b") (green               . "#44bc44")
    (green-cooler        . "#00c06f") (green-faint         . "#88ca9f")
    (green-intense       . "#44df44") (green-warmer        . "#70b900")
    (indigo              . "#9099d9") (magenta             . "#feacd0")
    (magenta-cooler      . "#b6a0ff") (magenta-faint       . "#caa6df")
    (magenta-intense     . "#ff66ff") (magenta-warmer      . "#f78fe7")
    (maroon              . "#cf7fa7") (olive               . "#9cbd6f")
    (pink                . "#d09dc0") (red                 . "#ff5f59")
    (red-cooler          . "#ff7f9f") (red-faint           . "#ff9580")
    (red-intense         . "#ff5f5f") (red-warmer          . "#ff6b55")
    (rust                . "#db7b5f") (slate               . "#76afbf")
    (yellow              . "#d0bc00") (yellow-cooler       . "#dfaf7a")
    (yellow-faint        . "#d2b580") (yellow-intense      . "#efef00")
    (yellow-warmer       . "#fec43f") (fg-dimmer           . "#888888")))

(define (modus:kind->color kind)
  (case kind
    (( abbrev )                            'fg-dim)
    (( box )                               'fg-alt)
    (( compound )                          'fg-dim)
    (( dot )                               'fg-dim)
    (( hs-begin )                          'fg-dim)
    (( invalid )                           'fg-dim)
    (( shebang )                           'fg-dim)
    (( atmosphere )                        'fg-dimmer)
    (( boolean )                           'yellow-warmer)
    (( char )                              'red-faint)
    (( compound-empty )                    'fg-main)
    (( datum-label )                       'magenta)
    (( datum-ref repl-ref serial-ref )     'fg-alt)
    (( def-like-bind def-like-esc )        'magenta)
    (( default )                           'fg-main)
    (( hs-key )                            'yellow)
    (( ident ident-esc )                   'fg-main)
    (( keyword key-param key-init-param )  'magenta-warmer)
    (( let-like-bind let-like-esc )        'blue-faint)
    (( number )                            'cyan)
    (( sharp )                             'yellow)
    (( string string-esc )                 'green)
    (( syntax syntax-esc )                 'magenta-cooler)
    (else kind)))

(define (modus:element->color element)
  (case element
    (( bg-deftp bg-deftypefn bg-deftypevr ) 'bg-dim)
    (( problem )                            'bg-yellow-intense)
    (( category-def )                       'fg-dim)
    (( def-bracket )                        'fg-main)
    (( def-dots )                           'fg-main)
    (( deftp-l deftp-r )                    'bg-ochre)
    (( deftypefn-l deftypefn-r )            'bg-blue-subtle)
    (( deftypevr-l deftypevr-r )            'bg-red-subtle)
    (( exception )                          'yellow-faint)
    (( link )                               'fg-alt)
    (( link-visited )                       'fg-alt)
    (( todo )                               'bg-red-intense)
    (else #f)))

(define codemirror-colors
  '((cm-keyword   . "#708") (cm-atom       . "#219") (cm-number     . "#164")
    (cm-def       . "#00f") (cm-variable-2 . "#05a") (cm-variable-3 . "#085")
    (cm-type      . "#085") (cm-comment    . "#a50") (cm-string     . "#a11")
    (cm-string-2  . "#f50") (cm-meta       . "#555") (cm-qualifier  . "#555")
    (cm-builtin   . "#30a") (cm-bracket    . "#997") (cm-tag        . "#170")
    (cm-attribute . "#00c") (cm-hr         . "#999") (fg-main       . "#000")
    (cm-error     . "#f00") (fg-alt        . "#000") (bg-main       . "#fff")))

(define (codemirror:kind->color kind)
  (case kind
    (( abbrev atmosphere shebang ) 'cm-comment)
    (( boolean ) 'cm-atom)
    (( char compound-empty datum-label def-like-bind def-like-esc dot ok
       default invalid keyword key-param key-init-param ident ident-esc
       let-like-bind let-like-esc hs-key sharp box datum-ref repl-ref hs-begin
       serial-ref ) 'fg-main)
    (( compound ) 'cm-bracket)
    (( number ) 'cm-number)
    (( problem ) 'cm-error)
    (( string string-esc ) 'cm-string)
    (( syntax ) 'cm-builtin)
    (else #f)))

(define (get-color theme string-or-symbol)
  (let ((sym (if (string? string-or-symbol)
                 (string->symbol string-or-symbol)
                 string-or-symbol))
        (element->color/kind->color/colors
         (case theme
           (( modus-operandi ) (list modus:element->color
                                     modus:kind->color
                                     modus-operandi-colors))
           (( modus-vivendi ) (list modus:element->color
                                    modus:kind->color
                                    modus-vivendi-colors))
           (( codemirror ) (list codemirror:kind->color
                                 codemirror:kind->color
                                 codemirror-colors))
           (else (error "Unknown theme")))))
    (let ((element->color (car element->color/kind->color/colors))
          (kind->color (cadr element->color/kind->color/colors))
          (colors (caddr element->color/kind->color/colors)))
      (let ((color (cdr (or (assq (or (element->color sym) (kind->color sym))
                                  colors)
                            (assq (or (modus:element->color sym)
                                      (modus:kind->color sym))
                                  modus-operandi-colors)
                            sym))))
        (case theme
          (( modus-operandi codemirror )
           (case sym
             ((bg-deftp bg-deftypefn bg-deftypevr) (string-append color "90"))
             ((deftp-l deftypefn-l deftypevr-l) (string-append color "4f"))
             ((deftp-r deftypefn-r deftypevr-r) (string-append color "1f"))
             (else color)))
          (( modus-vivendi )
           (case sym
             ((bg-deftp bg-deftypefn bg-deftypevr) (string-append color "90"))
             ((deftp-l ) (string-append color "bf"))
             ((deftypefn-l) (string-append color "6f"))
             ((deftypevr-l) (string-append color "af"))
             ((deftp-r) (string-append color "9f"))
             ((deftypefn-r) (string-append color "3f"))
             ((deftypevr-r) (string-append color "8f"))
             (else color)))
          (else color))))))
