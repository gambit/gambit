                Installation instructions for Gambit
                ====================================


This directory contains a release of the Gambit Scheme programming
system (see the file configure.ac for the version number).  Gambit
includes a Scheme interpreter and a Scheme compiler which can be used
to build standalone executables.  Because the compiler generates
portable C code it is fairly easy to port to any platform with a
decent C compiler.

1) Obtaining the Gambit source code
===================================

The Gambit source code can be obtained in different ways.

 - You can get the most recent version of the sources directly from
   the Gambit repository on github:

     % git clone https://github.com/gambit/gambit.git
     % cd gambit

   Note that the source code obtained contains some stale .c files
   (those generated by the Gambit compiler from .scm files at the
   moment of the latest release).  Up to date files are obtained
   through a bootstrapping process explained in the next section.

 - You can get a specific release, preferably the latest, in the form
   of a compressed tar ball (.tgz extension).  The simplest is to use
   a browser to visit the Gambit wiki (http://gambitscheme.org)
   and click on "Development Sources" to download the compressed tar
   ball.  Alternatively, use wget or curl from the command line,
   for example:

     % wget http://www.iro.umontreal.ca/~gambit/download/gambit/v4.9/source/gambit-v4_9_3-devel.tgz
     % tar zxf gambit-v4_9_3-devel.tgz
     % mv gambit-v4_9_3-devel gambit
     % cd gambit

   Note that releases come in two flavors.  The "developer" release,
   which has a "-devel" suffix in its name, contains the complete git
   history.  It is a snapshot of the Gambit repository at a particular
   point in time.  The "plain" release, without the "-devel" suffix in
   its name, does not contain the git history and is much more compact
   than the developer release.

Obtaining a version of the sources with the git history is required if
you intend to contribute changes to the Gambit repository.  In that
case you will need a github account.  Please send a message with your
github user name to gambit@iro.umontreal.ca to request write
permissions.


2) Quick-install instructions
=============================

On most Unix platforms the system is easily built using configure/make:

  % ./configure        # add options as required, for example CC=gcc-7
  % make

The system can then be tested and installed using the following commands:

  % make check
  % make modules       # compile the builtin modules (optional)
  % sudo make install

On a computer with multiple cores it is normally beneficial to build
the system in parallel by adding a "-jN" option to the invocation
of make with a suitable value for N (typically the number of cores):

  % make -j8


3) Recommended "configure" script options
=========================================

The configure script, which was generated by the "autoconf" tool,
accepts many command line options that control various features.

It is ***highly*** recommended to use the --enable-single-host option
to improve the execution speed and compactness of the executables:

  % ./configure --enable-single-host

By using the --enable-single-host option, the speed of the Gambit
interpreter improves by roughly a factor of 2.

It is also ***highly*** recommended to use the GNU GCC compiler to
build the system as the source code can take advantage of some GCC
extensions.  Notably the use of GCC's computed gotos reduces the
execution time by roughly 35%.

The --enable-c-opt option can be used to enable a higher C
optimization level (-O2 instead of -O1) as follows:

  % ./configure --enable-single-host --enable-c-opt

However this is no longer recommended with recent versions of GCC
because -O1 often generates better code from the C code generated by
the Gambit compiler.

By using the --enable-c-opt option and GCC 4.2.1 (a rather old version
at this point) the speed of the Gambit interpreter improves by roughly
10%.  Note that some C compilers generate incorrect code when
compiling Gambit with --enable-c-opt, notably GCC 4.6.0 .  So the
--enable-c-opt option should be used with great care.

The --enable-march=native option will use C compiler options to
optimize the system for best execution speed on the machine
architecture that is used for the build.  This may restrict the
execution to that specific machine architecture.

The --enable-dynamic-clib option will generate direct calls to the C
library functions in dynamically loadable modules.  This typically
leads to more efficient code by allowing the C compiler to inline C
library calls in dynamically loaded modules (for example calls to the
math functions sqrt, sin, etc).  However this may not work on some
operating systems.

These options are not used by default because they can cause issues on
some systems.  The C compiler may take a long time and a lot of memory
to compile.  In fact some platforms and C compilers may not have
enough resources to build the system this way.  With
--enable-single-host the build takes roughly 500 megabytes and 2 to 4
minutes on a 2 GHz Intel Core Duo based MacBook Pro with the GCC 4.0.1
compiler instead of 300 megabytes and 1 to 2 minutes when
--enable-single-host is not used.  With --enable-single-host and
--enable-gcc-opts the build takes roughly 2 gigabytes and over 10
minutes.

We recommend that users build Gambit with GCC 3.3 or later.  The
compile time varies greatly from one version of GCC to the next
(usually a more recent version is better, but not always).  This is
because the algorithms used to implement the optimizations performed
by the compiler evolve and vary in computational complexity.  Since
the C files are so large, the compile time is very sensitive to the
computational complexity of the optimization algorithms.  See the
table at the end of this file for performance information for
different versions of GCC.  On a recent 8 core computer a "make" takes
about 140 seconds and a "make -j8" takes about 30 seconds (when
starting from a "release" or a distribution .tgz produced by "make dist").

Finally, in order to support installing multiple versions of Gambit,
it is recommended to use these options:

  % ./configure --enable-single-host --enable-multiple-versions


4) Other options of the "configure" script
==========================================

The detailed list of options accepted by the "configure" script can be
obtained with:

  % ./configure --help

Most options are the same as for other autoconf generated configure
scripts.  For example, you can select the central installation
directory with the option --prefix:

  % ./configure --prefix=/Users/feeley/my-gambit
  % make install
  % ~/my-gambit/bin/gsi
  Gambit v4.9.3
  ...

If the --prefix option is not used, the default is to install all
files in /usr/local/Gambit and its subdirectories, namely "bin",
"lib", "include", etc.  The files that would normally go in these
subdirectories can be redirected to other directories using
the following configure options:

  --bindir=DIR            executables (gsi, gsc, ...)
  --libdir=DIR            libraries (libgambit.a, _gambit#.scm, ...)
  --includedir=DIR        C header files (gambit.h, ...)
  --docdir=DIR            documentation (gambit.pdf, gambit.html, ...)
  --infodir=DIR           info documentation (gambit.info, ...)
  --datadir=DIR           read-only architecture-independent data (gambit.el)

Note that the install target of the makefiles supports the DESTDIR
environment variable which allows staging an install to a specific
directory.  The command:

  % make install DESTDIR=/Users/feeley/stage

will install all the files in /Users/feeley/stage as though it was the
root of the filesystem.  Note that the use of DESTDIR is incompatible
with the combination of --enable-shared and
--enable-absolute-shared-libs options.

The configure options which are specific to the Gambit system are:

  --enable-single-host[=N]
                          compile each Scheme module as a single C function
                          when it has at most N control points (N defaults
                          to 30000, use N=0 to avoid a limit)
  --enable-c-opt[=level]  use higher C optimization level
  --enable-trust-c-tco    trust C compiler does TCO properly (default is NO)
  --enable-gcc-opts       use expensive GCC optimizations
  --enable-gnu-gcc-specific-options
                          use GNU GCC specific options (default=YES)
  --enable-gnu-gcc-no-strict-aliasing
                          use GNU GCC -fno-strict-aliasing option (default=YES)
  --enable-march=arch     build for specific machine architecture
                          (the default is to use the C compiler default)
  --enable-dynamic-clib   allow C library to be called directly from
                          dynamically loaded modules (default=NO)
  --enable-cplusplus      compile using C++ compiler
  --enable-shared         build the Scheme runtime system as a shared library
  --enable-pic            build system with position independent code (default
                          is YES)
  --enable-lowlevel-exec  build system so C and machine code can be mixed
                          (default is NO)
  --enable-debug          build system so that it can be debugged
  --enable-debug-log      build system so that it generates a debugging log
                          file
  --enable-debug-c-backtrace
                          build system so that it generates a C backtrace when
                          a program crashes
  --enable-debug-ctrl-flow-history
                          build system so that it tracks the control flow
                          history
  --enable-debug-host-changes
                          build system so that it tracks the host changes
  --enable-debug-alloc-mem
                          build system so that it tracks the memory allocations
  --enable-debug-garbage-collect
                          build system so that it detects issues in the
                          garbage collector
  --enable-profile        build system so that it can be profiled
  --enable-coverage       build system to accumulate coverage statistics
  --enable-feedback1      build system to accumulate trial run data
  --enable-feedback2      build system using trial run feedback
  --enable-inline-jumps   generate inline code for jumps
  --enable-char-size=N    Scheme character size in bytes (N = 1, 2 or 4)
  --enable-path-encoding=utf8|latin1|ucs2|ucs4|wchar|native
                          filesystem path encoding (default is ucs2 on Windows
                          and utf8 on other OSes)
  --enable-default-runtime-options=...
                          default runtime options (default is none)
  --enable-default-compile-options=...
                          default compile options (default is (compactness 9))
  --enable-module-search-order=...
                          module search order (default is ~~lib,~~userlib)
  --enable-module-whitelist=...
                          module whitelist (default is github.com/gambit)
  --enable-targets=...    targets to build in addition to C (default is js)
  --enable-ansi-c         link only with ANSI C libraries
  --enable-symlinks       use symbolic links for installed files not in the
                          Gambit central installation directory
  --enable-gambitdir=...  set the default binding of ~~ (the central
                          installation directory) to override the default
                          which is the directory specified by --prefix
  --enable-interpreter-name=INTERP
                          choose name for Gambit interpreter (default = gsi)
  --enable-compiler-name=COMP
                          choose name for Gambit compiler (default = gsc)
  --enable-multiple-versions
                          multiple installed versions are supported
  --enable-absolute-shared-libs
                          shared libraries should be linked to using an
                          absolute path
  --enable-versioned-shared-libs
                          add version numbers to the shared libraries
  --enable-lib-suffix[=<suffix>]
                          add a suffix to the library names
  --enable-help-browser=BROWSER
                          use the specified browser to view documentation
                          requested through the help procedure or REPL
  --enable-type-checking
                          cause primitives to perform type checking
                          of their arguments
                          (requires: make bootstrap; make bootclean; make)
  --enable-auto-forcing
                          cause strict operations such as car, but not
                          cons, to automatically force their arguments
                          (requires: make bootstrap; make bootclean; make)
  --enable-sharp-dot
                          enables the support for the #.<expression> syntax
                          (requires: make bootstrap; make bootclean; make)
  --enable-bignum         support infinite precision integers
                          (requires: make bootstrap; make bootclean; make)
  --enable-ratnum         support exact rational numbers
                          (requires: make bootstrap; make bootclean; make)
  --enable-cpxnum         support complex numbers
                          (requires: make bootstrap; make bootclean; make)
  --enable-s8vector       support s8vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-u16vector      support u16vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-s16vector      support s16vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-u32vector      support u32vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-s32vector      support s32vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-u64vector      support u64vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-s64vector      support s64vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-f32vector      support f32vector type
                          (requires: make bootstrap; make bootclean; make)
  --enable-rtlib-debug
                          cause the inclusion of all debugging information
                          in the code generated for the Scheme runtime library
                          (requires: make bootstrap; make bootclean; make)
  --enable-rtlib-debug-location
                          cause the inclusion of source code location
                          debugging information in the code generated
                          for the Scheme runtime library
                          (requires: make bootstrap; make bootclean; make)
  --enable-rtlib-debug-source
                          cause the inclusion of source code debugging
                          information in the code generated for the
                          Scheme runtime library
                          (requires: make bootstrap; make bootclean; make)
  --enable-rtlib-debug-environments
                          cause the inclusion of environment debugging
                          information in the code generated for the
                          Scheme runtime library
                          (requires: make bootstrap; make bootclean; make)
  --enable-track-scheme   cause the inclusion of Scheme code location in
                          C code generated
                          (requires: make bootstrap; make bootclean; make)
  --enable-poll           use poll as the select method
  --enable-high-res-timing
                          enable high-resolution timing on Windows
  --enable-thread-system[=thread-system]
                          cause the selection of a specific thread system
                          (either posix or win32)
  --enable-multiple-vms
                          compiles with support for instantiating more
                          than one Gambit VM (implies --enable-thread-system)
  --enable-multiple-threaded-vms
                          compiles with support for having more than one
                          OS thread per Gambit VM (implies
                          --enable-thread-system)
  --enable-smp            support SMP Scheme thread scheduler
                          (requires: make bootstrap; make bootclean; make)
  --enable-max-processors=N
                          max number of processors per Gambit VM
                          (default is 64)
  --enable-dynamic-tls    allow thread local storage variables to be
                          referenced from dynamically loaded modules
  --enable-openssl        compile with SSL support using OpenSSL
  --enable-corcxxflags-gambuild=FLAGS
                          C compiler flags gambuild-C script will use instead
                          of current CFLAGS/CXXFLAGS
  --enable-ldflags-gambuild=FLAGS
                          C linker flags gambuild-C script will use instead of
                          current LDFLAGS

The option --enable-cplusplus should be used when applications
developped with the Gambit compiler are to be linked with code or
libraries written in C++.  This will compile all of the Gambit
source code with a C++ compiler instead of a C compiler (this is
possible because the code generated by the Gambit compiler conforms
both to C and C++ and also Objective-C).

The option --enable-shared will build a shared library for the
Gambit runtime system.  This is not supported on all platforms.  The
runtime library is located in the "lib" installation directory.  All
programs built with Gambit, including the interpreter and compiler,
need to find this library when they are executed and consequently this
directory must be in the path searched by the system for
shared-libraries.  This path is normally specified through an
environment variable which is "LD_LIBRARY_PATH" on most versions of
UNIX, "LIBPATH" on AIX, "SHLIB_PATH" on HPUX, "DYLD_LIBRARY_PATH" on
OS X, and "PATH" on Microsoft Windows.

The options --enable-debug and --enable-profile are useful for
debugging the system.

The options --enable-feedback1 and --enable-feedback2 are useful for
building the system such that it is optimized for a particular use
case.  The system should first be built with --enable-feedback1, then
one or more sample executions of the system should be performed, and
then finally the system should be built with --enable-feedback2.  For
example:

  % ./configure --enable-single-host --enable-feedback1
  % make
  % gsc/gsc -:=. my-favorite-program.scm
  % gsi/gsi -:=. my-favorite-program.o1
  % make mostlyclean
  % ./configure --enable-single-host --enable-feedback2
  % make

The option --enable-symlinks is useful when the --bindir, --libdir,
... options are used.  The files will actually be stored in the
central installation directory and symbolic links to those files will
be stored in the directories specified to --bindir, --libdir, ...

The options --enable-interpreter-name=INTERP and
--enable-compiler-name=COMP are useful when names different from the
defaults are needed (i.e. gsi and gsc respectively).  These options
should be used only when absolutely necessary because users will
expect the defaults (from reading documentation, talking with users on
a different OS, etc).  We strongly suggest that the names start with
gsi and gsc respectively, so that shell tab completion will help the
user discover the correct name.

The option --enable-multiple-versions allows multiple versions of
Gambit to be installed.  When it is enabled the path of the central
installation directory (specified with --prefix) is automatically
extended with a subdirectory which is the version number, and a
"current" symbolic link points to the version subdirectory.  All
symbolic links created as a result of the --enable-symlinks option
will refer to the files indirectly through the "current" symbolic
link.  Switching to a different version of Gambit can be done by
simply redirecting the "current" symbolic link to another version
subdirectory.

When --enable-shared is used, the option --enable-absolute-shared-libs
will install executables (for gsi and gsc) which contain references to
the absolute paths of the libraries.  This is necessary when multiple
versions of Gambit are installed so that each executable refers to the
appropriate Gambit shared library.  This is the default behavior.
Note that this option is incompatible with the use of DESTDIR because
the executables can only be linked after the Gambit shared libraries
are installed in their final destination.

When --enable-shared is used, the option --enable-versioned-shared-libs
will add a version number after the shared library extension.  For
example the Gambit v4.9.3 runtime shared library which is normally
libgambit.so will be named libgambit.so.4.9.3 .  This also creates
symbolic links to the shared library under the names libgambit.so and
libgambit.so.4 .

The option --enable-lib-suffix will add an explicit suffix to the names
of the libraries.  If not specified the suffix will default to the version
number. For example the Gambit v4.9.3 runtime library which is normally
libgambit.a will be named libgambit-v4_9_3.a and it must be linked to with
the C compiler option -lgambit-v4_9_3 .  If you give this option a value,
as in --enable-lib-suffix=<suffix> then <suffix> will be used as a suffix.

By default the configure script will use the GCC compiler to build the
system, if it is available.  To override this choice or to use special
C compiler flags it is possible to set the environment variables CC,
CFLAGS, LDFLAGS, etc in the shell or on the configure command line.
Object file compilation options should go in CFLAGS, link options
should go in LDFLAGS, and options that apply to both can be next to
the name of the C compiler in CC.  Here are some examples.

  - To use cc instead of gcc:

      % ./configure CC=cc

  - On a Sun Sparc workstation, the following will use the Sun
    Workshop C/C++ compiler and generate 64 bit executables (the heap
    can grow beyond 4 Gbytes):

      % ./configure CC="cc -xtarget=native -xarch=v9"

  - On a Compaq Alpha workstation, the following will use the Compaq
    Tru64 UNIX C/C++ compiler and generate executables that use 32 bit
    addressing instead of the normal 64 bit addressing (the heap and
    code will be in the lower 4 GBytes of the address space):

      % ./configure CC=cc CFLAGS="-w -D___USE_32_BIT_ADDR" LDFLAGS=-taso

  - By default, Gambit's runtime system does not restrict the size
    of the Scheme heap.  A heap overflow will only be signalled when
    virtual memory is all used up, which can take a long time and
    cause lots of paging.  This is not ideal for an educational
    environment where endless recursions are commonplace.  The symbol
    ___FORCE_MAX_HEAP can be defined to put a limit on the size of the
    heap.  To get a 5000 kilobyte limit (a reasonable amount for an
    educational environment) the system could be configured with:

      % ./configure CFLAGS="-D___FORCE_MAX_HEAP=5000"


5) Other "make" targets
=======================

Here is a description of the most useful "make" targets:

  % make from-scratch        Builds the system from source where the .c
                             files which are generated from .scm files
                             are stale.  This is normally the case after
                             cloning the Gambit repository (because the
                             repository HEAD keeps track of the latest
                             .scm files, but not the .c files generated
                             from them).  This way of building Gambit may
                             fail if the Gambit compiler itself has
                             evolved in an incompatible way since the latest
                             release (the Gambit maintainer should prevent
                             this situation by creating a release when the
                             compiler changes incompatibly).

  % make bootstrap           Builds the system and copies the gsc
                             executable to gsc-boot in the root directory.
                             The makefiles call up gsc-boot to
                             compile the Scheme source files
                             in the system if they are modified.

  % make mostlyclean         Removes all the files that can be
                             regenerated using basic tools
                             (C compiler, sed, etc).  The feedback
                             files are not removed.

  % make clean               Removes all the files that are created
                             from a pristine distribution during
                             a "make" (object files, libraries,
                             gsi, gsc, etc).

  % make bootclean           Like "make clean", but also removes the
                             C files that the gsc-boot compiler can
                             create from the Scheme source files.  This
                             should only be used after a successful
                             "make bootstrap".  The next "make" will
                             compile the whole system from scratch,
                             including compiling the Scheme sources
                             to C, using gsc-boot.

  % make realclean           Like "make bootclean", but also removes all
                             the files which can be created using the
                             configure script (this includes the makefiles).

  % make check               Checks that gsi and gsc pass some
                             basic tests by running a few Scheme
                             programs with gsi and gsc.

  % make examples            Runs the programs in the "examples"
                             subdirectory.

  % make dist                Creates a compressed tar file of
                             the system.

  % make dist-devel          Creates a compressed tar file of
                             the system including all the source code
                             management files.

  % make dist-boot           Creates a compressed tar file of
                             the system like "make dist" but named boot.tgz

  % make doc                 Builds the documentation.

  % make rc-setup            For initial setup of source code
                             management using git.  This should
                             only be performed by the Gambit maintainers.

  % make new-revision        Changes the version number of the system,
  % make new-minor           by incrementing either the revision number,
  % make new-major           the minor number or the major number.
                             This should only be performed by the
                             Gambit maintainers after thorough testing.

  % make release             Builds source tarball and installers.
                             This is normally done after changing
                             the version number of the system.
                             Note: this make target is very platform
                             specific and is intended for the Gambit
                             maintainers.

  % make prebuilt            Builds installers for Mac OS X and Windows.
                             This is normally done after changing
                             the version number of the system.
                             Note: this make target is very platform
                             specific and is intended for the Gambit
                             maintainers.

  % make commit              Commits changes to the system's source code.
                             This should only be performed by the
                             Gambit maintainers after thorough testing.


  % make push                Pushes the changes to the Gambit repository.
                             This should only be performed by the
                             Gambit maintainers after thorough testing.

  % make pull                Pulls changes from the Gambit repository.


6) Building on Microsoft Windows
================================

There are several alternatives for building the system on Microsoft
Windows:

  a) Use the free MSYS/MinGW development environment (Minimalist GNU
     for Windows, www.mingw.org).  Install MinGW and MSYS, then follow
     the instructions above (i.e. "./configure" followed by "make").

  b) Use the free Cygwin development environment
     (http://www.cygwin.com/).  Install Cygwin, then follow the
     instructions above (i.e. "./configure" followed by "make").

  c) Use the Open Watcom compiler which can be obtained at no charge
     from http://openwatcom.mirrors.pair.com/.  You must perform a
     full installation of the Open Watcom compiler in C:\WATCOM.  From
     the shell, execute the batch file "misc\openwatcom.bat".

  d) Use the Microsoft Visual C++ 2005 Express Edition which can be
     obtained at no charge from Microsoft at this URL:
     http://msdn.microsoft.com/vstudio/express/downloads/default.aspx .
     You must also install the Microsoft Platform SDK.  From the
     shell, execute the batch file "misc\vcexpress.bat".

  e) Use Microsoft Visual Studio .NET 2003.  You must unzip
     "misc\vstudio.zip" in the Gambit distribution's root directory.
     Then with Microsoft Visual Studio open "gambit.sln" and select
     "Build Solution" (Ctrl+Shift+B).


7) If you can't build the system on your platform
=================================================

The configure script tailors the build process to your platform.
Although it can adapt to a wide range of platforms there are cases
where it is not clever enough to do it completely automatically.

In this case you need to modify the configure script (the file
"configure.ac") and/or the source code of the Gambit system.  Most
of the system dependent code is located in the files
"include/gambit.h", "lib/os*.h" and "lib/os*.c".  Never modify the C
files generated by the Gambit compiler (these files usually have a
name that starts or ends with an underscore).

If you needed to modify any file to get Gambit to work properly on
your system, please send your modifications along with your machine/OS
specification to

  gambit@iro.umontreal.ca

so that it can be added to the next release.


8) Performance of GCC and CLANG when compiling Gambit
=====================================================

In order to investigate some issues with the use of the --enable-c-opt
C compiler option the system's performance was measured when built
with and without --enable-c-opt, and with --enable-multiple-hosts and
--enable-single-host, and with all 65 releases of gcc since version
2.95 and with clang 2.6 to 3.0 .

The machine used is a x86_64 linux machine with 48 GB of RAM, but in
order to compile the early releases of gcc and to be able to compare
all versions of gcc, 32 bit executables of gcc and Gambit were used
(so at most 4 GB of RAM is used by the processes).  Gambit v4.6.6 was
used.

To measure the performance of the resulting system, the gsi
interpreter was executed on a moderately complex program
(tests/mix.scm).  The elapsed time was measured for building Gambit
sequentially (i.e. a simple "make" after the appropriate "./configure
...").  Both the absolute time in seconds and the time relative to the
smallest time is indicated.  The tables are given below.


**** Execution time of tests/mix.scm when run by gsi

       |    --enable-multiple-hosts      |      --enable-single-host       |
       |                | --enable-c-opt |                | --enable-c-opt |
gcc    |  secs    rel   |  secs    rel   |  secs    rel   |  secs    rel   |
-------+----------------+----------------+----------------+----------------+
2.95   |   5.34 ( 2.03) |   5.30 ( 2.01) |   2.97 ( 1.13) |   2.90 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
2.95.1 |   5.38 ( 2.04) |   5.43 ( 2.06) |   2.97 ( 1.13) |   2.90 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
2.95.2 |   5.32 ( 2.02) |   5.46 ( 2.07) |   2.97 ( 1.13) |   2.87 ( 1.09) |
-------+----------------+----------------+----------------+----------------+
2.95.3 |   5.31 ( 2.02) |   5.40 ( 2.05) |   2.87 ( 1.09) |   3.04 ( 1.15) |
-------+----------------+----------------+----------------+----------------+
3.0    |   5.44 ( 2.06) |   5.31 ( 2.02) |   3.01 ( 1.14) |   3.30 ( 1.25) |
-------+----------------+----------------+----------------+----------------+
3.0.1  |   5.42 ( 2.06) |   5.37 ( 2.04) |   2.95 ( 1.12) |   2.88 ( 1.09) |
-------+----------------+----------------+----------------+----------------+
3.0.2  |   5.53 ( 2.10) |   5.37 ( 2.04) |   2.95 ( 1.12) |   2.89 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
3.0.3  |   5.41 ( 2.05) |   6.06 ( 2.30) |   2.91 ( 1.10) |   2.92 ( 1.11) |
-------+----------------+----------------+----------------+----------------+
3.0.4  |   5.50 ( 2.09) |   5.41 ( 2.05) |   2.93 ( 1.11) |   2.84 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
3.1    |   5.49 ( 2.08) |   5.48 ( 2.08) |   2.96 ( 1.13) |   2.98 ( 1.13) |
-------+----------------+----------------+----------------+----------------+
3.1.1  |   5.49 ( 2.09) |   5.89 ( 2.24) |   3.04 ( 1.15) |   3.00 ( 1.14) |
-------+----------------+----------------+----------------+----------------+
3.2    |   5.44 ( 2.06) |   5.51 ( 2.09) |   3.03 ( 1.15) |   3.00 ( 1.14) |
-------+----------------+----------------+----------------+----------------+
3.2.1  |   5.60 ( 2.13) |   5.66 ( 2.15) |   3.05 ( 1.16) |   3.05 ( 1.16) |
-------+----------------+----------------+----------------+----------------+
3.2.2  |   5.63 ( 2.14) |   5.66 ( 2.15) |   2.94 ( 1.12) |   3.05 ( 1.16) |
-------+----------------+----------------+----------------+----------------+
3.2.3  |   5.45 ( 2.07) |   5.61 ( 2.13) |   3.03 ( 1.15) |   3.09 ( 1.17) |
-------+----------------+----------------+----------------+----------------+
3.3    |   5.35 ( 2.03) |   5.26 ( 2.00) |   2.93 ( 1.11) |   2.67 ( 1.01) |
-------+----------------+----------------+----------------+----------------+
3.3.1  |   5.36 ( 2.03) |   5.28 ( 2.00) |   2.90 ( 1.10) |   2.66 ( 1.01) |
-------+----------------+----------------+----------------+----------------+
3.3.2  |   5.35 ( 2.03) |   5.37 ( 2.04) |   3.31 ( 1.26) |   2.63 ( 1.00) |
-------+----------------+----------------+----------------+----------------+
3.3.3  |   5.35 ( 2.03) |   5.30 ( 2.01) |   2.90 ( 1.10) |   2.64 ( 1.00) |
-------+----------------+----------------+----------------+----------------+
3.3.4  |   5.20 ( 1.98) |   5.31 ( 2.02) |   2.83 ( 1.08) |   2.69 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
3.3.5  |   5.21 ( 1.98) |   5.53 ( 2.10) |   2.83 ( 1.08) |   2.69 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
3.3.6  |   5.30 ( 2.01) |   5.25 ( 1.99) |   3.20 ( 1.21) |   2.69 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
3.4.0  |   5.47 ( 2.08) |   5.37 ( 2.04) |   2.87 ( 1.09) |   2.86 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
3.4.1  |   5.54 ( 2.10) |   5.40 ( 2.05) |   2.82 ( 1.07) |   2.90 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
3.4.2  |   5.41 ( 2.05) |   5.41 ( 2.05) |   2.81 ( 1.07) |   2.91 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
3.4.3  |   5.41 ( 2.05) |   5.44 ( 2.06) |   2.85 ( 1.08) |   2.91 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
3.4.4  |   5.63 ( 2.14) |   5.41 ( 2.06) |   2.89 ( 1.10) |   2.88 ( 1.09) |
-------+----------------+----------------+----------------+----------------+
3.4.5  |   5.63 ( 2.14) |   5.38 ( 2.04) |   2.89 ( 1.10) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
3.4.6  |   5.66 ( 2.15) |   6.51 ( 2.47) |   3.08 ( 1.17) |   2.80 ( 1.06) |
-------+----------------+----------------+----------------+----------------+
4.0.0  |   5.38 ( 2.04) |   5.24 ( 1.99) |   2.95 ( 1.12) |   3.01 ( 1.14) |
-------+----------------+----------------+----------------+----------------+
4.0.1  |   5.38 ( 2.04) |   5.25 ( 1.99) |   2.95 ( 1.12) |   3.01 ( 1.14) |
-------+----------------+----------------+----------------+----------------+
4.0.2  |   5.49 ( 2.09) |   5.26 ( 2.00) |   2.96 ( 1.12) |   2.98 ( 1.13) |
-------+----------------+----------------+----------------+----------------+
4.0.3  |   5.40 ( 2.05) |   5.22 ( 1.98) |   2.98 ( 1.13) |   2.98 ( 1.13) |
-------+----------------+----------------+----------------+----------------+
4.0.4  |   5.38 ( 2.04) |   5.22 ( 1.98) |   2.96 ( 1.12) |   2.97 ( 1.13) |
-------+----------------+----------------+----------------+----------------+
4.1.0  |   5.52 ( 2.10) |   5.35 ( 2.03) |   3.14 ( 1.19) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.1.1  |   5.55 ( 2.11) |   5.32 ( 2.02) |   3.17 ( 1.20) |   2.84 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
4.1.2  |   5.51 ( 2.09) |   5.28 ( 2.00) |   2.91 ( 1.11) |   2.88 ( 1.09) |
-------+----------------+----------------+----------------+----------------+
4.2.0  |   5.44 ( 2.06) |   5.33 ( 2.02) |   3.02 ( 1.14) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.2.1  |   5.46 ( 2.07) |   5.28 ( 2.01) |   3.02 ( 1.14) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.2.2  |   5.45 ( 2.07) |   5.29 ( 2.01) |   3.02 ( 1.15) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.2.3  |   5.44 ( 2.07) |   5.28 ( 2.01) |   3.02 ( 1.15) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.2.4  |   5.53 ( 2.10) |   5.29 ( 2.01) |   3.08 ( 1.17) |   2.81 ( 1.07) |
-------+----------------+----------------+----------------+----------------+
4.3.0  |   5.71 ( 2.17) |   5.42 ( 2.06) |   3.36 ( 1.28) |   3.52 ( 1.34) |
-------+----------------+----------------+----------------+----------------+
4.3.1  |   5.71 ( 2.17) |   5.42 ( 2.06) |   3.36 ( 1.28) |   3.52 ( 1.33) |
-------+----------------+----------------+----------------+----------------+
4.3.2  |   5.50 ( 2.09) |   5.35 ( 2.03) |   3.36 ( 1.28) |   3.50 ( 1.33) |
-------+----------------+----------------+----------------+----------------+
4.3.3  |   5.50 ( 2.09) |   5.44 ( 2.07) |   3.36 ( 1.27) |   3.48 ( 1.32) |
-------+----------------+----------------+----------------+----------------+
4.3.4  |   5.57 ( 2.11) |   5.47 ( 2.08) |   3.33 ( 1.27) |   3.50 ( 1.33) |
-------+----------------+----------------+----------------+----------------+
4.3.5  |   5.56 ( 2.11) |   5.46 ( 2.07) |   3.35 ( 1.27) |   3.49 ( 1.33) |
-------+----------------+----------------+----------------+----------------+
4.3.6  |   5.56 ( 2.11) |   5.46 ( 2.07) |   3.34 ( 1.27) |   3.49 ( 1.33) |
-------+----------------+----------------+----------------+----------------+
4.4.0  |   5.71 ( 2.17) |   5.48 ( 2.08) |   3.18 ( 1.21) |   2.91 ( 1.11) |
-------+----------------+----------------+----------------+----------------+
4.4.1  |   5.79 ( 2.20) |   5.45 ( 2.07) |   3.01 ( 1.14) |   2.94 ( 1.12) |
-------+----------------+----------------+----------------+----------------+
4.4.2  |   5.78 ( 2.20) |   5.38 ( 2.04) |   3.01 ( 1.14) |   2.98 ( 1.13) |
-------+----------------+----------------+----------------+----------------+
4.4.3  |   5.82 ( 2.21) |   5.37 ( 2.04) |   3.01 ( 1.14) |   2.84 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
4.4.4  |   5.76 ( 2.19) |   5.36 ( 2.04) |   2.95 ( 1.12) |   2.99 ( 1.14) |
-------+----------------+----------------+----------------+----------------+
4.4.5  |   5.76 ( 2.19) |   5.33 ( 2.02) |   2.91 ( 1.11) |   2.89 ( 1.10) |
-------+----------------+----------------+----------------+----------------+
4.4.6  |   5.76 ( 2.19) |   5.45 ( 2.07) |   2.91 ( 1.10) |   2.92 ( 1.11) |
-------+----------------+----------------+----------------+----------------+
4.4.7  |   5.76 ( 2.19) |   5.45 ( 2.07) |   2.91 ( 1.10) |   2.92 ( 1.11) |
-------+----------------+----------------+----------------+----------------+
4.5.0  |   5.40 ( 2.05) |   5.30 ( 2.01) |   2.95 ( 1.12) |   2.77 ( 1.05) |
-------+----------------+----------------+----------------+----------------+
4.5.1  |   5.36 ( 2.03) |   5.42 ( 2.06) |   2.87 ( 1.09) |   2.83 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
4.5.2  |   5.36 ( 2.03) |   5.42 ( 2.06) |   2.85 ( 1.08) |   2.86 ( 1.08) |
-------+----------------+----------------+----------------+----------------+
4.5.3  |   5.36 ( 2.04) |   5.24 ( 1.99) |   2.85 ( 1.08) |   2.86 ( 1.09) |
-------+----------------+----------------+----------------+----------------+
4.6.0  |   5.33 ( 2.02) |     crash      |   2.84 ( 1.08) |     crash      |
-------+----------------+----------------+----------------+----------------+
4.6.1  |   5.31 ( 2.02) |   5.06 ( 1.92) |   2.85 ( 1.08) |   2.68 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
4.6.2  |   5.30 ( 2.01) |   5.13 ( 1.95) |   2.87 ( 1.09) |   2.70 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
4.6.3  |   5.30 ( 2.01) |   5.13 ( 1.95) |   2.87 ( 1.09) |   2.70 ( 1.03) |
-------+----------------+----------------+----------------+----------------+
4.7.0  |   5.22 ( 1.98) |   4.95 ( 1.88) |   2.89 ( 1.10) |   2.70 ( 1.03) |
-------+----------------+----------------+----------------+----------------+


**** Elapsed time of "make"

       |    --enable-multiple-hosts      |      --enable-single-host       |
       |                | --enable-c-opt |                | --enable-c-opt |
gcc    |  secs    rel   |  secs    rel   |  secs    rel   |  secs    rel   |
-------+----------------+----------------+----------------+----------------+
2.95   |  34.00 ( 1.03) |  42.49 ( 1.28) |  58.29 ( 1.76) |  91.51 ( 2.76) |
-------+----------------+----------------+----------------+----------------+
2.95.1 |  33.89 ( 1.02) |  41.82 ( 1.26) |  56.38 ( 1.70) |  90.78 ( 2.74) |
-------+----------------+----------------+----------------+----------------+
2.95.2 |  33.83 ( 1.02) |  42.66 ( 1.29) |  56.88 ( 1.72) |  91.69 ( 2.77) |
-------+----------------+----------------+----------------+----------------+
2.95.3 |  33.15 ( 1.00) |  40.89 ( 1.23) |  56.19 ( 1.70) |  93.00 ( 2.81) |
-------+----------------+----------------+----------------+----------------+
3.0    |  43.63 ( 1.32) |  63.58 ( 1.92) |  98.37 ( 2.97) | 198.97 ( 6.00) |
-------+----------------+----------------+----------------+----------------+
3.0.1  |  43.30 ( 1.31) |  64.00 ( 1.93) |  99.07 ( 2.99) | 181.10 ( 5.46) |
-------+----------------+----------------+----------------+----------------+
3.0.2  |  42.38 ( 1.28) |  65.59 ( 1.98) |  95.82 ( 2.89) | 183.37 ( 5.53) |
-------+----------------+----------------+----------------+----------------+
3.0.3  |  44.93 ( 1.36) |  64.64 ( 1.95) |  98.70 ( 2.98) | 179.34 ( 5.41) |
-------+----------------+----------------+----------------+----------------+
3.0.4  |  44.30 ( 1.34) |  64.80 ( 1.95) |  98.90 ( 2.98) | 178.63 ( 5.39) |
-------+----------------+----------------+----------------+----------------+
3.1    |  49.02 ( 1.48) |  79.16 ( 2.39) | 132.62 ( 4.00) | 385.21 (11.62) |
-------+----------------+----------------+----------------+----------------+
3.1.1  |  48.77 ( 1.47) |  79.45 ( 2.40) | 133.49 ( 4.03) | 375.01 (11.31) |
-------+----------------+----------------+----------------+----------------+
3.2    |  49.68 ( 1.50) |  78.50 ( 2.37) | 130.94 ( 3.95) | 402.10 (12.13) |
-------+----------------+----------------+----------------+----------------+
3.2.1  |  49.37 ( 1.49) |  78.03 ( 2.35) | 130.90 ( 3.95) | 366.79 (11.06) |
-------+----------------+----------------+----------------+----------------+
3.2.2  |  49.36 ( 1.49) |  78.06 ( 2.35) | 131.08 ( 3.95) | 364.01 (10.98) |
-------+----------------+----------------+----------------+----------------+
3.2.3  |  49.93 ( 1.51) |  77.75 ( 2.35) | 131.50 ( 3.97) | 366.83 (11.07) |
-------+----------------+----------------+----------------+----------------+
3.3    |  50.08 ( 1.51) |  76.42 ( 2.31) |  89.80 ( 2.71) | 292.12 ( 8.81) |
-------+----------------+----------------+----------------+----------------+
3.3.1  |  50.06 ( 1.51) |  77.01 ( 2.32) |  90.45 ( 2.73) | 292.13 ( 8.81) |
-------+----------------+----------------+----------------+----------------+
3.3.2  |  50.04 ( 1.51) |  76.34 ( 2.30) |  89.63 ( 2.70) | 290.08 ( 8.75) |
-------+----------------+----------------+----------------+----------------+
3.3.3  |  50.25 ( 1.52) |  76.82 ( 2.32) |  90.44 ( 2.73) | 295.69 ( 8.92) |
-------+----------------+----------------+----------------+----------------+
3.3.4  |  50.23 ( 1.52) |  77.15 ( 2.33) |  90.71 ( 2.74) | 296.18 ( 8.93) |
-------+----------------+----------------+----------------+----------------+
3.3.5  |  50.18 ( 1.51) |  77.02 ( 2.32) |  90.11 ( 2.72) | 293.49 ( 8.85) |
-------+----------------+----------------+----------------+----------------+
3.3.6  |  50.23 ( 1.52) |  77.43 ( 2.34) |  90.60 ( 2.73) | 296.37 ( 8.94) |
-------+----------------+----------------+----------------+----------------+
3.4.0  |  50.68 ( 1.53) |  71.85 ( 2.17) |  47.80 ( 1.44) | 170.43 ( 5.14) |
-------+----------------+----------------+----------------+----------------+
3.4.1  |  47.50 ( 1.43) |  73.34 ( 2.21) |  48.74 ( 1.47) | 172.05 ( 5.19) |
-------+----------------+----------------+----------------+----------------+
3.4.2  |  47.48 ( 1.43) |  72.67 ( 2.19) |  48.10 ( 1.45) | 174.11 ( 5.25) |
-------+----------------+----------------+----------------+----------------+
3.4.3  |  47.42 ( 1.43) |  72.46 ( 2.19) |  48.03 ( 1.45) | 172.00 ( 5.19) |
-------+----------------+----------------+----------------+----------------+
3.4.4  |  47.97 ( 1.45) |  72.81 ( 2.20) |  47.82 ( 1.44) | 172.45 ( 5.20) |
-------+----------------+----------------+----------------+----------------+
3.4.5  |  47.92 ( 1.45) |  72.77 ( 2.20) |  47.79 ( 1.44) | 171.46 ( 5.17) |
-------+----------------+----------------+----------------+----------------+
3.4.6  |  48.18 ( 1.45) |  73.27 ( 2.21) |  47.97 ( 1.45) | 171.99 ( 5.19) |
-------+----------------+----------------+----------------+----------------+
4.0.0  |  64.86 ( 1.96) |  85.67 ( 2.58) | 105.44 ( 3.18) | 200.58 ( 6.05) |
-------+----------------+----------------+----------------+----------------+
4.0.1  |  63.44 ( 1.91) |  85.37 ( 2.58) | 107.23 ( 3.23) | 200.04 ( 6.03) |
-------+----------------+----------------+----------------+----------------+
4.0.2  |  63.66 ( 1.92) |  85.66 ( 2.58) | 105.26 ( 3.18) | 200.38 ( 6.04) |
-------+----------------+----------------+----------------+----------------+
4.0.3  |  63.47 ( 1.91) |  85.38 ( 2.58) | 107.57 ( 3.24) | 200.84 ( 6.06) |
-------+----------------+----------------+----------------+----------------+
4.0.4  |  63.42 ( 1.91) |  92.51 ( 2.79) | 105.24 ( 3.17) | 200.67 ( 6.05) |
-------+----------------+----------------+----------------+----------------+
4.1.0  |  69.72 ( 2.10) |  93.87 ( 2.83) | 121.59 ( 3.67) | 247.69 ( 7.47) |
-------+----------------+----------------+----------------+----------------+
4.1.1  |  68.43 ( 2.06) |  92.90 ( 2.80) | 102.04 ( 3.08) | 189.45 ( 5.71) |
-------+----------------+----------------+----------------+----------------+
4.1.2  |  69.15 ( 2.09) |  92.38 ( 2.79) | 103.45 ( 3.12) | 199.92 ( 6.03) |
-------+----------------+----------------+----------------+----------------+
4.2.0  |  79.05 ( 2.38) | 105.12 ( 3.17) |  83.46 ( 2.52) | 172.92 ( 5.22) |
-------+----------------+----------------+----------------+----------------+
4.2.1  |  81.37 ( 2.45) | 107.41 ( 3.24) |  84.23 ( 2.54) | 173.26 ( 5.23) |
-------+----------------+----------------+----------------+----------------+
4.2.2  |  81.42 ( 2.46) | 108.04 ( 3.26) |  84.44 ( 2.55) | 173.84 ( 5.24) |
-------+----------------+----------------+----------------+----------------+
4.2.3  |  81.44 ( 2.46) | 109.30 ( 3.30) |  84.29 ( 2.54) | 174.04 ( 5.25) |
-------+----------------+----------------+----------------+----------------+
4.2.4  |  81.36 ( 2.45) | 108.06 ( 3.26) |  84.18 ( 2.54) | 174.47 ( 5.26) |
-------+----------------+----------------+----------------+----------------+
4.3.0  |  74.37 ( 2.24) | 112.07 ( 3.38) |  80.64 ( 2.43) | 210.46 ( 6.35) |
-------+----------------+----------------+----------------+----------------+
4.3.1  |  73.96 ( 2.23) | 112.87 ( 3.40) |  80.33 ( 2.42) | 205.96 ( 6.21) |
-------+----------------+----------------+----------------+----------------+
4.3.2  |  73.93 ( 2.23) | 110.52 ( 3.33) |  78.91 ( 2.38) | 199.48 ( 6.02) |
-------+----------------+----------------+----------------+----------------+
4.3.3  |  73.86 ( 2.23) | 110.52 ( 3.33) |  79.60 ( 2.40) | 199.99 ( 6.03) |
-------+----------------+----------------+----------------+----------------+
4.3.4  |  74.29 ( 2.24) | 110.46 ( 3.33) |  81.02 ( 2.44) | 198.01 ( 5.97) |
-------+----------------+----------------+----------------+----------------+
4.3.5  |  73.42 ( 2.21) | 110.74 ( 3.34) |  79.37 ( 2.39) | 198.17 ( 5.98) |
-------+----------------+----------------+----------------+----------------+
4.3.6  |  74.01 ( 2.23) | 110.60 ( 3.34) |  80.03 ( 2.41) | 198.45 ( 5.99) |
-------+----------------+----------------+----------------+----------------+
4.4.0  |  79.38 ( 2.39) | 113.40 ( 3.42) |  89.70 ( 2.71) | 211.26 ( 6.37) |
-------+----------------+----------------+----------------+----------------+
4.4.1  |  78.12 ( 2.36) | 114.11 ( 3.44) |  88.92 ( 2.68) | 211.13 ( 6.37) |
-------+----------------+----------------+----------------+----------------+
4.4.2  |  79.46 ( 2.40) | 114.49 ( 3.45) |  90.39 ( 2.73) | 210.79 ( 6.36) |
-------+----------------+----------------+----------------+----------------+
4.4.3  |  77.76 ( 2.35) | 114.03 ( 3.44) |  88.46 ( 2.67) | 212.31 ( 6.40) |
-------+----------------+----------------+----------------+----------------+
4.4.4  |  77.75 ( 2.35) | 113.94 ( 3.44) |  89.19 ( 2.69) | 210.39 ( 6.35) |
-------+----------------+----------------+----------------+----------------+
4.4.5  |  78.32 ( 2.36) | 114.55 ( 3.46) |  88.20 ( 2.66) | 212.88 ( 6.42) |
-------+----------------+----------------+----------------+----------------+
4.4.6  |  78.24 ( 2.36) | 114.99 ( 3.47) |  89.99 ( 2.71) | 219.40 ( 6.62) |
-------+----------------+----------------+----------------+----------------+
4.4.7  |  77.71 ( 2.34) | 113.90 ( 3.44) |  87.86 ( 2.65) | 210.67 ( 6.36) |
-------+----------------+----------------+----------------+----------------+
4.5.0  |  78.36 ( 2.36) | 109.78 ( 3.31) |  96.15 ( 2.90) | 191.80 ( 5.79) |
-------+----------------+----------------+----------------+----------------+
4.5.1  |  78.23 ( 2.36) | 109.68 ( 3.31) |  95.36 ( 2.88) | 188.34 ( 5.68) |
-------+----------------+----------------+----------------+----------------+
4.5.2  |  78.45 ( 2.37) | 110.11 ( 3.32) |  96.61 ( 2.91) | 189.24 ( 5.71) |
-------+----------------+----------------+----------------+----------------+
4.5.3  |  79.87 ( 2.41) | 112.65 ( 3.40) |  98.45 ( 2.97) | 196.36 ( 5.92) |
-------+----------------+----------------+----------------+----------------+
4.6.0  |  82.61 ( 2.49) | 117.70 ( 3.55) | 102.63 ( 3.10) | 235.50 ( 7.10) |
-------+----------------+----------------+----------------+----------------+
4.6.1  |  81.98 ( 2.47) | 121.60 ( 3.67) | 103.07 ( 3.11) | 266.58 ( 8.04) |
-------+----------------+----------------+----------------+----------------+
4.6.2  |  81.67 ( 2.46) | 121.04 ( 3.65) | 103.30 ( 3.12) | 263.24 ( 7.94) |
-------+----------------+----------------+----------------+----------------+
4.6.3  |  82.22 ( 2.48) | 120.98 ( 3.65) | 102.90 ( 3.10) | 265.34 ( 8.00) |
-------+----------------+----------------+----------------+----------------+
4.7.0  |  92.20 ( 2.78) | 145.52 ( 4.39) | 108.40 ( 3.27) | 362.57 (10.94) |
-------+----------------+----------------+----------------+----------------+


The same experiment was done with clang version 2.6 to 3.1.  Bugs were
encountered getting all these clang versions working on linux (due to
linking problems) so the prebuilt compilers were installed on a x86_64
Mac OS X machine.  This Mac OS X machine is about 15% faster than the
linux machine used above with gcc.

Clang versions 2.7, 2.8 and 2.9 have bugs which prevent the Gambit
"make" to complete.  The details are given below.

The build and execution times are given below.  Note that the fastest
execution speed is obtained with --enable-single-host (regardless of
optimization level) and that clang 2.6 generates code that is about
40% faster than clang 3.0 and clang 3.1 .

As for the build time, clang is very roughly the same speed as gcc
when --enable-multiple-hosts is used.  However, when
--enable-single-host is used the build time increases dramatically
(over 10 minutes for clang 2.6, and as much as 70 minutes for clang
3.0).  Clang is probably using algorithms with a high algorithmic
complexity.  Strangely, with clang 3.0 it takes less time to compile
with -O2 than with -O1.  My guess is that clang 3.0 at -O2 must limit
the size of functions which are optimized (i.e. the expensive
optimizations are turned off when the functions are too big).


**** Execution time of tests/mix.scm when run by gsi

       |    --enable-multiple-hosts      |      --enable-single-host       |
       |                | --enable-c-opt |                | --enable-c-opt |
clang  |  secs    rel   |  secs    rel   |  secs    rel   |  secs    rel   |
-------+----------------+----------------+----------------+----------------+
2.6    |   4.35 ( 1.59) |   4.41 ( 1.61) |   2.74 ( 1.00) |   2.79 ( 1.02) |
-------+----------------+----------------+----------------+----------------+
3.0    |   3.83 ( 1.40) |   3.76 ( 1.37) |   4.49 ( 1.64) |   4.87 ( 1.78) |
-------+----------------+----------------+----------------+----------------+
3.1    |   3.82 ( 1.39) |   3.89 ( 1.42) |   4.32 ( 1.58) |   4.90 ( 1.79) |
-------+----------------+----------------+----------------+----------------+


**** Elapsed time of "make"

       |    --enable-multiple-hosts      |      --enable-single-host       |
       |                | --enable-c-opt |                | --enable-c-opt |
clang  |  secs    rel   |  secs    rel   |  secs    rel   |  secs    rel   |
-------+----------------+----------------+----------------+----------------+
2.6    |   95.7 ( 1.12) |   96.0 ( 1.12) |  694.4 ( 8.10) |  699.1 ( 8.16) |
-------+----------------+----------------+----------------+----------------+
3.0    |  164.3 ( 1.92) |  127.2 ( 1.48) | 4313.0 (50.33) | 1825.3 (21.30) |
-------+----------------+----------------+----------------+----------------+
3.1    |   90.1 ( 1.05) |   85.7 ( 1.00) | 1110.0 (12.95) |  915.7 (10.68) |
-------+----------------+----------------+----------------+----------------+


**** Bugs in the clang compilers versions 2.7, 2.8 and 2.9:

clang 2.7:

/Users/feeley/clang/2.7/bin/clang -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common   -I"../include" -c -o "_t-c-2.o" -I. -DHAVE_CONFIG_H _t-c-2.c -D___LIBRARY
clang: warning: argument unused during compilation: '-fwrapv'
Assertion failed: (!isa<IndirectBrInst>(Preds[i]->getTerminator()) && "Cannot split an edge from an IndirectBrInst"), function SplitBlockPredecessors, file BasicBlockUtils.cpp, line 400.

clang 2.8:

/Users/feeley/clang/2.8/bin/clang -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common   -I"../include" -c -o "_num.o" -I. -DHAVE_CONFIG_H -D___GAMBCDIR="\"/Users/feeley/gambit-clang/clang/2.8/mhO1\"" -D___SYS_TYPE_CPU="\"i386\"" -D___SYS_TYPE_VENDOR="\"apple\"" -D___SYS_TYPE_OS="\"darwin11.3.0\"" -D___CONFIGURE_COMMAND="\"./configure '--prefix=/Users/feeley/gambit-clang/clang/2.8/mhO1' 'CC=/Users/feeley/clang/2.8/bin/clang' '--enable-multiple-hosts' '--enable-c-opt=-O1'"\" -D___OBJ_EXTENSION="\".o\"" -D___EXE_EXTENSION="\"\"" -D___BAT_EXTENSION="\"\"" -D___PRIMAL _num.c -D___LIBRARY
...
Stack dump:
0.	Program arguments: /Users/feeley/clang/2.8/bin/clang -cc1 -triple x86_64-apple-darwin11.0.0 -emit-obj -disable-free -disable-llvm-verifier -main-file-name _num.c -pic-level 2 -masm-verbose -munwind-tables -target-cpu core2 -target-linker-version 97.14 -resource-dir /Users/feeley/clang/2.8/lib/clang/2.8 -D HAVE_CONFIG_H -D ___GAMBCDIR="/Users/feeley/gambit-clang/clang/2.8/mhO1" -D ___SYS_TYPE_CPU="i386" -D ___SYS_TYPE_VENDOR="apple" -D ___SYS_TYPE_OS="darwin11.3.0" -D ___CONFIGURE_COMMAND="./configure '--prefix=/Users/feeley/gambit-clang/clang/2.8/mhO1' 'CC=/Users/feeley/clang/2.8/bin/clang' '--enable-multiple-hosts' '--enable-c-opt=-O1'" -D ___OBJ_EXTENSION=".o" -D ___EXE_EXTENSION="" -D ___BAT_EXTENSION="" -D ___PRIMAL -D ___LIBRARY -I ../include -I . -O1 -Wno-unused -Wno-write-strings -ferror-limit 19 -fmessage-length 80 -fwrapv -stack-protector 1 -fblocks -fno-common -fdiagnostics-show-option -o _num.o -x c _num.c
1.	<eof> parser at end of file
2.	Per-module optimization passes
3.	Running pass 'CallGraph Pass Manager' on module '_num.c'.
4.	Running pass 'Jump Threading' on function '@___H__3d_'
clang: error: clang frontend command failed due to signal 11 (use -v to see invocation)

clang 2.9:

/Users/feeley/clang/2.9/bin/clang -Wno-unused -Wno-write-strings -O1 -fno-math-errno -fno-strict-aliasing -fwrapv -fomit-frame-pointer -fPIC -fno-common   -I"../include" -c -o "_num.o" -I. -DHAVE_CONFIG_H -D___GAMBCDIR="\"/Users/feeley/gambit-clang/clang/2.9/mhO1\"" -D___SYS_TYPE_CPU="\"i386\"" -D___SYS_TYPE_VENDOR="\"apple\"" -D___SYS_TYPE_OS="\"darwin11.3.0\"" -D___CONFIGURE_COMMAND="\"./configure '--prefix=/Users/feeley/gambit-clang/clang/2.9/mhO1' 'CC=/Users/feeley/clang/2.9/bin/clang' '--enable-multiple-hosts' '--enable-c-opt=-O1'"\" -D___OBJ_EXTENSION="\".o\"" -D___EXE_EXTENSION="\"\"" -D___BAT_EXTENSION="\"\"" -D___PRIMAL _num.c -D___LIBRARY
...
Stack dump:
0.	Program arguments: /Users/feeley/clang/2.9/bin/clang -cc1 -triple x86_64-apple-darwin11.0.0 -emit-obj -disable-free -disable-llvm-verifier -main-file-name _num.c -pic-level 2 -relaxed-aliasing -masm-verbose -munwind-tables -target-cpu core2 -target-linker-version 97.14 -resource-dir /Users/feeley/clang/2.9/bin/../lib/clang/2.9 -D HAVE_CONFIG_H -D ___GAMBCDIR="/Users/feeley/gambit-clang/clang/2.9/mhO1" -D ___SYS_TYPE_CPU="i386" -D ___SYS_TYPE_VENDOR="apple" -D ___SYS_TYPE_OS="darwin11.3.0" -D ___CONFIGURE_COMMAND="./configure '--prefix=/Users/feeley/gambit-clang/clang/2.9/mhO1' 'CC=/Users/feeley/clang/2.9/bin/clang' '--enable-multiple-hosts' '--enable-c-opt=-O1'" -D ___OBJ_EXTENSION=".o" -D ___EXE_EXTENSION="" -D ___BAT_EXTENSION="" -D ___PRIMAL -D ___LIBRARY -I ../include -I . -O1 -Wno-unused -Wno-write-strings -ferror-limit 19 -fmessage-length 80 -fwrapv -stack-protector 1 -fblocks -fno-common -fdiagnostics-show-option -o _num.o -x c _num.c 
1.	<eof> parser at end of file
2.	Per-module optimization passes
3.	Running pass 'CallGraph Pass Manager' on module '_num.c'.
4.	Running pass 'Loop Pass Manager' on function '@___H__23__23_bignum_2e__2a_'
5.	Running pass 'Rotate Loops' on basic block '%2697'
clang: error: unable to execute command: Segmentation fault: 11
clang: error: clang frontend command failed due to signal 1 (use -v to see invocation)
